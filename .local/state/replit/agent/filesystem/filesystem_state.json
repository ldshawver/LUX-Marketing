{"file_contents":{"auth.py":{"content":"from flask import Blueprint, render_template, request, flash, redirect, url_for, jsonify\nfrom flask_login import login_user, logout_user, login_required, current_user\nfrom werkzeug.security import check_password_hash, generate_password_hash\nfrom app import db\nfrom models import User\nfrom itsdangerous import URLSafeTimedSerializer, BadSignature, SignatureExpired\nimport os\n\nauth_bp = Blueprint('auth', __name__)\n\n# Password reset token serializer\ndef get_serializer():\n    \"\"\"Get URL safe serializer for password reset tokens\"\"\"\n    secret_key = os.environ.get('SESSION_SECRET') or 'dev-secret-key'\n    return URLSafeTimedSerializer(secret_key)\n\n@auth_bp.route('/login', methods=['GET', 'POST'])\ndef login():\n    \"\"\"User login\"\"\"\n    if current_user.is_authenticated:\n        return redirect(url_for('main.dashboard'))\n    \n    if request.method == 'POST':\n        username = request.form.get('username', '').strip()\n        password = request.form.get('password', '')\n        remember = bool(request.form.get('remember'))\n        \n        if not username or not password:\n            flash('Username and password are required', 'error')\n            return render_template('login.html')\n        \n        user = User.query.filter_by(username=username).first()\n        \n        if user and check_password_hash(user.password_hash, password):\n            login_user(user, remember=remember)\n            next_page = request.args.get('next')\n            return redirect(next_page) if next_page else redirect(url_for('main.dashboard'))\n        else:\n            flash('Invalid username or password', 'error')\n    \n    return render_template('login.html')\n\n@auth_bp.route('/logout')\n@login_required\ndef logout():\n    \"\"\"User logout\"\"\"\n    logout_user()\n    flash('You have been logged out', 'info')\n    return redirect(url_for('auth.login'))\n\n@auth_bp.route('/register', methods=['GET', 'POST'])\ndef register():\n    \"\"\"Register a new admin (only allowed when no admin exists)\"\"\"\n    # Check if any admin users exist\n    admin_exists = User.query.filter_by(is_admin=True).first() is not None\n    \n    if admin_exists:\n        flash('Admin registration is not allowed - an admin already exists', 'error')\n        return redirect(url_for('auth.login'))\n    \n    if request.method == 'POST':\n        username = request.form.get('username', '').strip()\n        email = request.form.get('email', '').strip()\n        password = request.form.get('password', '')\n        confirm_password = request.form.get('confirm_password', '')\n        \n        if not all([username, email, password, confirm_password]):\n            flash('All fields are required', 'error')\n            return render_template('register.html')\n        \n        if password != confirm_password:\n            flash('Passwords do not match', 'error')\n            return render_template('register.html')\n        \n        if len(password) < 8:\n            flash('Password must be at least 8 characters long', 'error')\n            return render_template('register.html')\n        \n        # Validate email format\n        from utils import validate_email\n        if not validate_email(email):\n            flash('Please enter a valid email address', 'error')\n            return render_template('register.html')\n        \n        # Check if user already exists\n        if User.query.filter_by(username=username).first():\n            flash('Username already exists', 'error')\n            return render_template('register.html')\n        \n        if User.query.filter_by(email=email).first():\n            flash('Email already exists', 'error')\n            return render_template('register.html')\n        \n        # Create new admin user\n        user = User()\n        user.username = username\n        user.email = email\n        user.password_hash = generate_password_hash(password)\n        user.is_admin = True  # First user is always admin\n        \n        db.session.add(user)\n        db.session.commit()\n        \n        # Auto-login the new admin\n        login_user(user)\n        flash('Admin account created successfully! Welcome to LUX Email Marketing.', 'success')\n        return redirect(url_for('main.dashboard'))\n    \n    return render_template('register.html', is_admin_registration=True)\n\n@auth_bp.route('/forgot-password', methods=['GET', 'POST'])\ndef forgot_password():\n    \"\"\"Request password reset\"\"\"\n    if current_user.is_authenticated:\n        return redirect(url_for('main.dashboard'))\n    \n    if request.method == 'POST':\n        email = request.form.get('email', '').strip()\n        \n        if not email:\n            flash('Email address is required', 'error')\n            return render_template('forgot_password.html')\n        \n        user = User.query.filter_by(email=email).first()\n        \n        if user:\n            # Generate password reset token\n            serializer = get_serializer()\n            token = serializer.dumps(user.email, salt='password-reset')\n            \n            # Send password reset email\n            try:\n                from email_service import EmailService\n                email_service = EmailService()\n                \n                reset_url = url_for('auth.reset_password', token=token, _external=True)\n                \n                html_content = f\"\"\"\n                <html>\n                <body style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n                    <div style=\"background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); padding: 30px; text-align: center;\">\n                        <h1 style=\"color: white; margin: 0;\">LUX Email Marketing</h1>\n                        <p style=\"color: white; margin: 10px 0 0 0;\">Password Reset Request</p>\n                    </div>\n                    <div style=\"padding: 30px; background: #f8f9fa;\">\n                        <h2 style=\"color: #333;\">Reset Your Password</h2>\n                        <p style=\"color: #666; line-height: 1.6;\">\n                            You requested a password reset for your LUX Email Marketing account. \n                            Click the button below to reset your password:\n                        </p>\n                        <div style=\"text-align: center; margin: 30px 0;\">\n                            <a href=\"{reset_url}\" \n                               style=\"background: #667eea; color: white; padding: 15px 30px; \n                                      text-decoration: none; border-radius: 5px; display: inline-block;\n                                      font-weight: bold;\">Reset Password</a>\n                        </div>\n                        <p style=\"color: #666; font-size: 14px;\">\n                            This link will expire in 1 hour for security purposes.<br>\n                            If you didn't request this reset, please ignore this email.\n                        </p>\n                        <hr style=\"border: none; border-top: 1px solid #eee; margin: 30px 0;\">\n                        <p style=\"color: #999; font-size: 12px; text-align: center;\">\n                            LUX Email Marketing Platform\n                        </p>\n                    </div>\n                </body>\n                </html>\n                \"\"\"\n                \n                result = email_service.send_email(\n                    to_email=user.email,\n                    subject=\"Password Reset - LUX Email Marketing\",\n                    html_content=html_content,\n                    from_email=\"noreply@luxemail.com\"\n                )\n                \n                if result:\n                    flash('Password reset instructions have been sent to your email', 'success')\n                else:\n                    flash('Failed to send password reset email. Please try again or contact support.', 'error')\n                    \n            except Exception as e:\n                flash('Failed to send password reset email. Please try again later.', 'error')\n                \n        else:\n            # Don't reveal if email exists or not for security\n            flash('If an account with that email exists, password reset instructions have been sent', 'info')\n        \n        return redirect(url_for('auth.login'))\n    \n    return render_template('forgot_password.html')\n\n@auth_bp.route('/reset-password/<token>', methods=['GET', 'POST'])\ndef reset_password(token):\n    \"\"\"Reset password with token\"\"\"\n    if current_user.is_authenticated:\n        return redirect(url_for('main.dashboard'))\n    \n    try:\n        serializer = get_serializer()\n        email = serializer.loads(token, salt='password-reset', max_age=3600)  # 1 hour expiry\n    except (BadSignature, SignatureExpired):\n        flash('Invalid or expired password reset link', 'error')\n        return redirect(url_for('auth.forgot_password'))\n    \n    user = User.query.filter_by(email=email).first()\n    if not user:\n        flash('Invalid password reset link', 'error')\n        return redirect(url_for('auth.forgot_password'))\n    \n    if request.method == 'POST':\n        password = request.form.get('password', '')\n        confirm_password = request.form.get('confirm_password', '')\n        \n        if not password or not confirm_password:\n            flash('Both password fields are required', 'error')\n            return render_template('reset_password.html', token=token)\n        \n        if password != confirm_password:\n            flash('Passwords do not match', 'error')\n            return render_template('reset_password.html', token=token)\n        \n        if len(password) < 8:\n            flash('Password must be at least 8 characters long', 'error')\n            return render_template('reset_password.html', token=token)\n        \n        # Update password\n        user.password_hash = generate_password_hash(password)\n        db.session.commit()\n        \n        flash('Your password has been reset successfully. You can now log in.', 'success')\n        return redirect(url_for('auth.login'))\n    \n    return render_template('reset_password.html', token=token)\n","size_bytes":10004},"email_service.py":{"content":"import os\nimport logging\nfrom datetime import datetime\nfrom jinja2 import Template\nimport msal\nimport requests\nfrom app import db\nfrom models import Campaign, CampaignRecipient, EmailTracking\n\nclass EmailService:\n    def __init__(self):\n        self.client_id = os.environ.get(\"MS_CLIENT_ID\", \"\")\n        self.client_secret = os.environ.get(\"MS_CLIENT_SECRET\", \"\")\n        self.tenant_id = os.environ.get(\"MS_TENANT_ID\", \"\")\n        self.authority = f\"https://login.microsoftonline.com/{self.tenant_id}\"\n        self.scope = [\"https://graph.microsoft.com/.default\"]\n        \n        if not all([self.client_id, self.client_secret, self.tenant_id]):\n            logging.warning(\"Microsoft Graph API credentials not configured\")\n    \n    def get_access_token(self):\n        \"\"\"Get access token for Microsoft Graph API\"\"\"\n        try:\n            if not all([self.client_id, self.client_secret, self.tenant_id]):\n                logging.error(\"Microsoft Graph API credentials not configured properly\")\n                return None\n                \n            app = msal.ConfidentialClientApplication(\n                self.client_id,\n                authority=self.authority,\n                client_credential=self.client_secret\n            )\n            \n            result = app.acquire_token_silent(self.scope, account=None)\n            \n            if not result:\n                result = app.acquire_token_for_client(scopes=self.scope)\n            \n            if result and isinstance(result, dict) and \"access_token\" in result:\n                return result[\"access_token\"]\n            else:\n                error_desc = \"Unknown error\"\n                if result and isinstance(result, dict):\n                    error_desc = result.get('error_description', error_desc)\n                logging.error(f\"Failed to acquire token: {error_desc}\")\n                return None\n                \n        except Exception as e:\n            logging.error(f\"Error getting access token: {str(e)}\")\n            return None\n    \n    def send_email(self, to_email, subject, html_content, from_email=None):\n        \"\"\"Send a single email using Microsoft Graph API\"\"\"\n        try:\n            if not from_email:\n                from_email = os.environ.get(\"MS_FROM_EMAIL\", \"noreply@yourdomain.com\")\n            \n            # First try to get access token\n            access_token = self.get_access_token()\n            if not access_token:\n                logging.error(\"Cannot send email: Failed to get access token\")\n                # Try SMTP fallback if available\n                return self._send_smtp_fallback(to_email, subject, html_content, from_email)\n            \n            # Prepare email message\n            message = {\n                \"message\": {\n                    \"subject\": subject,\n                    \"body\": {\n                        \"contentType\": \"HTML\",\n                        \"content\": html_content\n                    },\n                    \"toRecipients\": [\n                        {\n                            \"emailAddress\": {\n                                \"address\": to_email\n                            }\n                        }\n                    ],\n                    \"from\": {\n                        \"emailAddress\": {\n                            \"address\": from_email\n                        }\n                    }\n                }\n            }\n        \n            # Send email via Microsoft Graph API\n            headers = {\n                'Authorization': f'Bearer {access_token}',\n                'Content-Type': 'application/json'\n            }\n            \n            endpoint = f\"https://graph.microsoft.com/v1.0/users/{from_email}/sendMail\"\n            \n            response = requests.post(endpoint, json=message, headers=headers, timeout=30)\n            \n            if response.status_code == 202:\n                logging.info(f\"Email sent successfully to {to_email}\")\n                return True\n            else:\n                logging.error(f\"Failed to send email to {to_email}: {response.status_code} - {response.text}\")\n                # Try SMTP fallback\n                return self._send_smtp_fallback(to_email, subject, html_content, from_email)\n                \n        except Exception as e:\n            logging.error(f\"Error sending email to {to_email}: {str(e)}\")\n            # Try SMTP fallback\n            return self._send_smtp_fallback(to_email, subject, html_content, from_email)\n    \n    def _send_smtp_fallback(self, to_email, subject, html_content, from_email):\n        \"\"\"Fallback SMTP email sending\"\"\"\n        try:\n            import smtplib\n            from email.mime.text import MIMEText\n            from email.mime.multipart import MIMEMultipart\n            \n            # Check for SMTP configuration\n            smtp_server = os.environ.get(\"SMTP_SERVER\")\n            smtp_port = int(os.environ.get(\"SMTP_PORT\", \"587\"))\n            smtp_username = os.environ.get(\"SMTP_USERNAME\")\n            smtp_password = os.environ.get(\"SMTP_PASSWORD\")\n            \n            if not smtp_server or not smtp_username or not smtp_password:\n                logging.warning(\"SMTP fallback not configured, email could not be sent\")\n                return False\n            \n            # Create message\n            msg = MIMEMultipart('alternative')\n            msg['Subject'] = subject\n            msg['From'] = from_email\n            msg['To'] = to_email\n            \n            # Add HTML content\n            html_part = MIMEText(html_content, 'html')\n            msg.attach(html_part)\n            \n            # Send email\n            with smtplib.SMTP(smtp_server, smtp_port) as server:\n                server.starttls()\n                server.login(smtp_username, smtp_password)\n                server.send_message(msg)\n            \n            logging.info(f\"Email sent via SMTP fallback to {to_email}\")\n            return True\n            \n        except Exception as e:\n            logging.error(f\"SMTP fallback failed for {to_email}: {str(e)}\")\n            return False\n    \n    def render_template(self, template_html, contact, campaign):\n        \"\"\"Render email template with contact and campaign data\"\"\"\n        try:\n            from tracking import process_email_content\n            \n            template = Template(template_html)\n            \n            # Prepare template context\n            context = {\n                'contact': {\n                    'first_name': contact.first_name or '',\n                    'last_name': contact.last_name or '',\n                    'full_name': contact.full_name,\n                    'email': contact.email,\n                    'company': contact.company or '',\n                    'phone': contact.phone or ''\n                },\n                'campaign': {\n                    'name': campaign.name,\n                    'subject': campaign.subject\n                },\n                'unsubscribe_url': f\"https://yourdomain.com/unsubscribe?email={contact.email}&campaign={campaign.id}\"\n            }\n            \n            # Render the basic template\n            rendered_html = template.render(**context)\n            \n            # Add tracking pixels and links\n            tracked_html = process_email_content(rendered_html, campaign.id, contact.id)\n            \n            return tracked_html\n            \n        except Exception as e:\n            logging.error(f\"Error rendering template: {str(e)}\")\n            return template_html\n    \n    def send_campaign(self, campaign):\n        \"\"\"Send campaign to all recipients\"\"\"\n        if not campaign.template:\n            raise Exception(\"Campaign has no template\")\n        \n        recipients = campaign.recipients.filter_by(status='pending').all()\n        \n        if not recipients:\n            raise Exception(\"No pending recipients found\")\n        \n        success_count = 0\n        failed_count = 0\n        \n        for recipient in recipients:\n            try:\n                # Render email content\n                html_content = self.render_template(\n                    campaign.template.html_content,\n                    recipient.contact,\n                    campaign\n                )\n                \n                # Send email\n                success = self.send_email(\n                    recipient.contact.email,\n                    campaign.subject,\n                    html_content\n                )\n                \n                if success:\n                    recipient.status = 'sent'\n                    recipient.sent_at = datetime.utcnow()\n                    success_count += 1\n                    \n                    # Log tracking event\n                    tracking = EmailTracking(\n                        campaign_id=campaign.id,\n                        contact_id=recipient.contact.id,\n                        event_type='sent'\n                    )\n                    db.session.add(tracking)\n                    \n                else:\n                    recipient.status = 'failed'\n                    recipient.error_message = 'Failed to send via Microsoft Graph API'\n                    failed_count += 1\n                \n                db.session.commit()\n                \n            except Exception as e:\n                logging.error(f\"Error sending to recipient {recipient.id}: {str(e)}\")\n                recipient.status = 'failed'\n                recipient.error_message = str(e)\n                failed_count += 1\n                db.session.commit()\n        \n        # Update campaign status\n        if failed_count == 0:\n            campaign.status = 'sent'\n        elif success_count == 0:\n            campaign.status = 'failed'\n        else:\n            campaign.status = 'partial'\n        \n        db.session.commit()\n        \n        logging.info(f\"Campaign {campaign.id} completed: {success_count} sent, {failed_count} failed\")\n        \n        return {\n            'success_count': success_count,\n            'failed_count': failed_count\n        }\n","size_bytes":9981},"vps_setup.sh":{"content":"# Make the script executable and run it\nchmod +x deploy_current_app.sh\n./deploy_current_app.sh","size_bytes":94},"README-DEPLOYMENT.md":{"content":"# Email Marketing App - VPS Deployment Guide\n\nThis guide will help you deploy the Email Marketing Automation App on a Debian 12 VPS.\n\n## Prerequisites\n\n- Debian 12 VPS with root access\n- Domain name pointing to your VPS (optional but recommended)\n- Microsoft Graph API credentials (for email sending)\n- OpenAI API key (optional, for AI features)\n\n## Quick Deployment\n\n1. **Upload files to your VPS:**\n   ```bash\n   # Copy all files to your VPS\n   scp -r * root@your-vps-ip:/root/email-marketing-deploy/\n   ```\n\n2. **Run the deployment script:**\n   ```bash\n   ssh root@your-vps-ip\n   cd /root/email-marketing-deploy/\n   chmod +x deploy.sh\n   ./deploy.sh\n   ```\n\n3. **Configure your credentials:**\n   ```bash\n   nano /opt/email-marketing/.env\n   ```\n   Update the following values:\n   - `MS_CLIENT_ID` - Your Microsoft Graph Client ID\n   - `MS_CLIENT_SECRET` - Your Microsoft Graph Client Secret  \n   - `MS_TENANT_ID` - Your Microsoft Tenant ID\n   - `OPENAI_API_KEY` - Your OpenAI API key (optional)\n   - Change the PostgreSQL password\n\n4. **Update domain configuration:**\n   ```bash\n   nano /etc/nginx/sites-available/email-marketing\n   ```\n   Replace `your_domain.com` with your actual domain\n\n5. **Restart services:**\n   ```bash\n   systemctl restart email-marketing nginx\n   ```\n\n## SSL Certificate Setup\n\nAfter configuring your domain:\n\n```bash\nchmod +x ssl-setup.sh\n./ssl-setup.sh your-domain.com\n```\n\n## Application Management\n\n### Service Commands\n```bash\n# Start the application\nsystemctl start email-marketing\n\n# Stop the application\nsystemctl stop email-marketing\n\n# Restart the application\nsystemctl restart email-marketing\n\n# Check status\nsystemctl status email-marketing\n\n# View logs\njournalctl -u email-marketing -f\n```\n\n### Application Logs\n- Application logs: `/var/log/email-marketing/`\n- Nginx logs: `/var/log/nginx/`\n- System logs: `journalctl -u email-marketing`\n\n## Backup and Maintenance\n\n### Create Backup\n```bash\nchmod +x backup.sh\n./backup.sh\n```\n\n### Update Application\n```bash\nchmod +x update.sh\n./update.sh\n```\n\n### Monitor Health\n```bash\nchmod +x monitoring.sh\n./monitoring.sh\n```\n\n### Set up automated monitoring (optional)\n```bash\n# Add to crontab to run every 5 minutes\ncrontab -e\n# Add this line:\n# */5 * * * * /opt/email-marketing/monitoring.sh\n```\n\n## Database Access\n\n### Connect to PostgreSQL\n```bash\nsudo -u postgres psql email-marketing_db\n```\n\n### Common Database Commands\n```sql\n-- List all tables\n\\dt\n\n-- View users\nSELECT * FROM user;\n\n-- View contacts\nSELECT * FROM contact;\n\n-- View campaigns\nSELECT * FROM campaign;\n```\n\n## Troubleshooting\n\n### Application won't start\n```bash\n# Check logs\njournalctl -u email-marketing -n 50\n\n# Check configuration\nsource /opt/email-marketing/.env\necho $DATABASE_URL\n\n# Test database connection\nsudo -u email-marketing psql $DATABASE_URL -c \"SELECT 1;\"\n```\n\n### Database issues\n```bash\n# Restart PostgreSQL\nsystemctl restart postgresql\n\n# Check PostgreSQL status\nsystemctl status postgresql\n\n# Reset database (WARNING: This will delete all data)\nsudo -u postgres dropdb email-marketing_db\nsudo -u postgres createdb email-marketing_db -O email-marketing\n```\n\n### Permission issues\n```bash\n# Fix file permissions\nchown -R email-marketing:email-marketing /opt/email-marketing\nchmod 600 /opt/email-marketing/.env\n```\n\n## Security Recommendations\n\n1. **Change default passwords:**\n   - PostgreSQL password in `.env`\n   - Admin user password (login as admin, change in app)\n\n2. **Configure firewall:**\n   ```bash\n   ufw enable\n   ufw allow 22/tcp\n   ufw allow 80/tcp\n   ufw allow 443/tcp\n   ```\n\n3. **Set up fail2ban (optional):**\n   ```bash\n   apt install fail2ban\n   systemctl enable fail2ban\n   ```\n\n4. **Regular updates:**\n   ```bash\n   apt update && apt upgrade -y\n   ```\n\n## Default Login\n\nAfter deployment, you can access the application at:\n- HTTP: `http://your-domain.com`\n- HTTPS: `https://your-domain.com` (after SSL setup)\n\n**Default admin credentials:**\n- Username: `admin`\n- Password: `admin123`\n\n**⚠️ Important: Change the default password immediately after first login!**\n\n## Support\n\nIf you encounter issues:\n1. Check the logs: `journalctl -u email-marketing -f`\n2. Verify configuration: `cat /opt/email-marketing/.env`\n3. Test health endpoint: `curl http://localhost:5000/health`\n4. Check service status: `systemctl status email-marketing`\n\nFor production use, consider:\n- Setting up automated backups\n- Implementing log rotation\n- Configuring email alerts for system issues\n- Using a CDN for static assets\n- Setting up monitoring with tools like Prometheus/Grafana","size_bytes":4559},"migrate_database.py":{"content":"#!/usr/bin/env python3\n\"\"\"\nSimple database migration script for LUX Email Marketing App\nAdds missing columns to existing database\n\"\"\"\n\nimport os\nimport sqlite3\nfrom app import app, db\nfrom models import User\n\ndef migrate_database():\n    \"\"\"Add missing columns to existing database\"\"\"\n    print(\"🔄 Starting database migration...\")\n    \n    with app.app_context():\n        # Check if we're using SQLite\n        db_url = app.config[\"SQLALCHEMY_DATABASE_URI\"]\n        if db_url.startswith('sqlite'):\n            # Extract SQLite database path\n            db_path = db_url.replace('sqlite:///', '')\n            \n            # Connect directly to SQLite to add missing columns\n            conn = sqlite3.connect(db_path)\n            cursor = conn.cursor()\n            \n            try:\n                # Check if is_admin column exists\n                cursor.execute(\"PRAGMA table_info(user)\")\n                columns = [column[1] for column in cursor.fetchall()]\n                \n                if 'is_admin' not in columns:\n                    print(\"➕ Adding is_admin column to user table...\")\n                    cursor.execute(\"ALTER TABLE user ADD COLUMN is_admin BOOLEAN DEFAULT 0\")\n                    \n                    # Update admin user to be admin\n                    cursor.execute(\"UPDATE user SET is_admin = 1 WHERE username = 'admin'\")\n                    print(\"✅ Admin user updated with admin privileges\")\n                \n                conn.commit()\n                print(\"✅ Database migration completed successfully!\")\n                \n            except Exception as e:\n                print(f\"❌ Error during migration: {e}\")\n                conn.rollback()\n                return False\n            finally:\n                conn.close()\n        \n        else:\n            # For PostgreSQL or other databases, use SQLAlchemy\n            try:\n                # Try to create all tables (this will add missing columns)\n                db.create_all()\n                print(\"✅ Database tables updated successfully!\")\n                \n                # Update admin user\n                admin = User.query.filter_by(username='admin').first()\n                if admin:\n                    admin.is_admin = True\n                    db.session.commit()\n                    print(\"✅ Admin user updated with admin privileges\")\n                \n            except Exception as e:\n                print(f\"❌ Error during PostgreSQL migration: {e}\")\n                return False\n    \n    return True\n\nif __name__ == \"__main__\":\n    migrate_database()","size_bytes":2574},"update.sh":{"content":"#!/bin/bash\n\n# Update script for Email Marketing App\n# Updates application code while preserving data\n\nAPP_NAME=\"email-marketing\"\nAPP_USER=\"email-marketing\"\nAPP_DIR=\"/opt/$APP_NAME\"\nVENV_DIR=\"$APP_DIR/venv\"\n\necho \"=== Email Marketing App Update Script ===\"\n\n# Create backup before update\necho \"Creating backup before update...\"\n./backup.sh\n\n# Stop the application\necho \"Stopping application...\"\nsystemctl stop \"$APP_NAME\"\n\n# Backup current .env file\necho \"Preserving configuration...\"\ncp \"$APP_DIR/.env\" \"/tmp/.env.backup\"\n\n# Update application files (assuming new files are in current directory)\necho \"Updating application files...\"\nrsync -av --exclude='.env' --exclude='*.db' --exclude='venv' ./ \"$APP_DIR/\"\n\n# Restore .env file\ncp \"/tmp/.env.backup\" \"$APP_DIR/.env\"\n\n# Set correct permissions\nchown -R \"$APP_USER:$APP_USER\" \"$APP_DIR\"\n\n# Update Python dependencies\necho \"Updating Python dependencies...\"\nsudo -u \"$APP_USER\" \"$VENV_DIR/bin/pip\" install --upgrade -r \"$APP_DIR/deploy_requirements.txt\"\n\n# Run database migrations if needed\necho \"Running database migrations...\"\ncd \"$APP_DIR\"\nsudo -u \"$APP_USER\" bash -c \"source $VENV_DIR/bin/activate && source .env && python3 -c 'from app import app, db; app.app_context().push(); db.create_all()'\"\n\n# Start the application\necho \"Starting application...\"\nsystemctl start \"$APP_NAME\"\n\n# Check status\nsleep 5\nif systemctl is-active --quiet \"$APP_NAME\"; then\n    echo \"✓ Application updated and running successfully!\"\nelse\n    echo \"✗ Application failed to start. Check logs:\"\n    echo \"  journalctl -u $APP_NAME -n 20\"\nfi\n\necho \"\"\necho \"Update completed!\"","size_bytes":1608},"deploy_current_app.sh":{"content":"#!/bin/bash\n\n# LUX Marketing - Deploy Current Application to VPS\n# This script creates an artifact from the current Replit workspace and deploys it to VPS\n\nset -e  # Exit on any error\n\n# Colors for output\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nBLUE='\\033[0;34m'\nNC='\\033[0m' # No Color\n\n# Configuration\nVPS_HOST=\"194.195.92.52\"\nVPS_USER=\"root\"\nVPS_PATH=\"/opt/lux\"\nCURRENT_PATH=\"/opt/lux/current\"\nDOMAIN=\"lux.lucifercruz.com\"\nTIMESTAMP=$(date +%Y%m%d_%H%M%S)\nRELEASE_DIR=\"/opt/lux/releases/$TIMESTAMP\"\nARTIFACT_NAME=\"lux-marketing-$TIMESTAMP.tar.gz\"\n\necho -e \"${GREEN}🚀 LUX Marketing Current App Deployment${NC}\"\necho -e \"${BLUE}=======================================${NC}\"\necho \"Deploying from: $(pwd)\"\necho \"Target VPS: $VPS_HOST\"\necho \"Release: $TIMESTAMP\"\necho \"\"\n\n# Test VPS connection\necho -e \"${YELLOW}🔍 Testing VPS connection...${NC}\"\nif ! ssh -o ConnectTimeout=10 $VPS_USER@$VPS_HOST \"echo 'Connection successful'\"; then\n    echo -e \"${RED}❌ Cannot connect to VPS${NC}\"\n    exit 1\nfi\necho -e \"${GREEN}✅ VPS connection successful${NC}\"\n\n# Create artifact from current workspace\necho -e \"${YELLOW}📦 Creating application artifact...${NC}\"\ntar czf $ARTIFACT_NAME \\\n    --exclude='*.tar.gz' \\\n    --exclude='.git*' \\\n    --exclude='__pycache__' \\\n    --exclude='*.pyc' \\\n    --exclude='.DS_Store' \\\n    --exclude='node_modules' \\\n    --exclude='venv*' \\\n    --exclude='.env*' \\\n    --exclude='instance/*.db' \\\n    --exclude='*.log' \\\n    --exclude='tmp' \\\n    --exclude='.replit*' \\\n    --exclude='replit.nix' \\\n    .\n\n# Create checksum\nsha256sum $ARTIFACT_NAME > $ARTIFACT_NAME.sha256\n\necho -e \"${GREEN}✅ Artifact created: $ARTIFACT_NAME${NC}\"\nls -lh $ARTIFACT_NAME\n\n# Upload artifact to VPS\necho -e \"${YELLOW}📤 Uploading artifact to VPS...${NC}\"\nscp $ARTIFACT_NAME $ARTIFACT_NAME.sha256 $VPS_USER@$VPS_HOST:/tmp/\n\n# Setup VPS environment and deploy\necho -e \"${YELLOW}🔧 Setting up VPS environment...${NC}\"\nssh $VPS_USER@$VPS_HOST << EOF\n    set -e\n    \n    echo \"🔄 Installing system dependencies...\"\n    apt update\n    apt install -y python3 python3-pip python3-venv nginx postgresql postgresql-contrib\n    apt install -y curl wget unzip git htop ufw\n    \n    echo \"👤 Creating application user...\"\n    useradd -m -s /bin/bash luxapp 2>/dev/null || echo \"User exists\"\n    usermod -aG www-data luxapp\n    \n    echo \"📁 Creating directory structure...\"\n    mkdir -p $VPS_PATH/releases $VPS_PATH/shared/logs $VPS_PATH/shared/instance\n    chown -R luxapp:www-data $VPS_PATH\n    \n    echo \"🗄️ Setting up PostgreSQL...\"\n    systemctl start postgresql\n    systemctl enable postgresql\n    \n    sudo -u postgres psql -c \"CREATE DATABASE lux_marketing;\" 2>/dev/null || echo \"Database exists\"\n    sudo -u postgres psql -c \"CREATE USER luxuser WITH PASSWORD 'LuxPass2024!';\" 2>/dev/null || echo \"User exists\"\n    sudo -u postgres psql -c \"GRANT ALL PRIVILEGES ON DATABASE lux_marketing TO luxuser;\" 2>/dev/null || true\n    \n    echo \"📦 Verifying and extracting artifact...\"\n    cd /tmp\n    if sha256sum -c $ARTIFACT_NAME.sha256; then\n        echo \"✅ Checksum verified\"\n    else\n        echo \"❌ Checksum failed\"\n        exit 1\n    fi\n    \n    mkdir -p $RELEASE_DIR\n    tar xzf $ARTIFACT_NAME -C $RELEASE_DIR\n    chown -R luxapp:www-data $RELEASE_DIR\n    \n    echo \"🔗 Creating symlinks...\"\n    rm -f $CURRENT_PATH\n    ln -sf $RELEASE_DIR $CURRENT_PATH\n    \n    # Link shared directories\n    rm -rf $CURRENT_PATH/instance $CURRENT_PATH/logs 2>/dev/null || true\n    ln -sf $VPS_PATH/shared/instance $CURRENT_PATH/instance\n    ln -sf $VPS_PATH/shared/logs $CURRENT_PATH/logs\n    \n    echo \"🐍 Setting up Python environment...\"\n    cd $CURRENT_PATH\n    sudo -u luxapp python3 -m venv venv\n    sudo -u luxapp venv/bin/pip install --upgrade pip\n    \n    # Install dependencies from requirements or manually\n    if [ -f requirements.txt ]; then\n        sudo -u luxapp venv/bin/pip install -r requirements.txt\n    else\n        sudo -u luxapp venv/bin/pip install flask gunicorn flask-sqlalchemy flask-login flask-wtf\n        sudo -u luxapp venv/bin/pip install psycopg2-binary msal openai requests twilio apscheduler\n        sudo -u luxapp venv/bin/pip install email-validator itsdangerous werkzeug jinja2\n    fi\n    \n    echo \"⚙️ Creating configuration files...\"\n    \n    # Environment file\n    cat > /etc/lux.env << 'ENVEOF'\nDATABASE_URL=postgresql://luxuser:LuxPass2024!@localhost/lux_marketing\nSESSION_SECRET=lux-marketing-super-secret-key-production-2024\nFLASK_ENV=production\nFLASK_DEBUG=False\nOPENAI_API_KEY=your-openai-key-here\nMS_CLIENT_ID=your-ms-client-id\nMS_CLIENT_SECRET=your-ms-client-secret\nMS_TENANT_ID=your-ms-tenant-id\nTWILIO_ACCOUNT_SID=your-twilio-sid\nTWILIO_AUTH_TOKEN=your-twilio-token\nTWILIO_PHONE_NUMBER=your-twilio-phone\nENVEOF\n\n    # Gunicorn config\n    cat > $CURRENT_PATH/gunicorn.conf.py << 'CONFEOF'\nimport multiprocessing\n\nbind = \"127.0.0.1:5000\"\nworkers = multiprocessing.cpu_count() * 2 + 1\nworker_class = \"sync\"\ntimeout = 60\nkeepalive = 2\nmax_requests = 1000\nmax_requests_jitter = 50\nuser = \"luxapp\"\ngroup = \"www-data\"\ndaemon = False\npidfile = \"/var/run/gunicorn/lux-marketing.pid\"\nCONFEOF\n\n    # Systemd service\n    cat > /etc/systemd/system/lux-marketing.service << 'SERVICEEOF'\n[Unit]\nDescription=LUX Marketing Flask Application\nAfter=network.target postgresql.service\nRequires=postgresql.service\n\n[Service]\nType=notify\nUser=luxapp\nGroup=www-data\nWorkingDirectory=/opt/lux/current\nEnvironment=PATH=/opt/lux/current/venv/bin\nEnvironmentFile=/etc/lux.env\nExecStart=/opt/lux/current/venv/bin/gunicorn --config gunicorn.conf.py --reuse-port main:app\nExecReload=/bin/kill -s HUP \\$MAINPID\nRestart=always\nRestartSec=5\nStandardOutput=append:/opt/lux/shared/logs/access.log\nStandardError=append:/opt/lux/shared/logs/error.log\nRuntimeDirectory=gunicorn\nRuntimeDirectoryMode=755\n\n[Install]\nWantedBy=multi-user.target\nSERVICEEOF\n\n    # Nginx config\n    cat > /etc/nginx/sites-available/lux-marketing << 'NGINXEOF'\nserver {\n    listen 80;\n    server_name $DOMAIN www.$DOMAIN;\n    \n    client_max_body_size 50M;\n    \n    location / {\n        proxy_pass http://127.0.0.1:5000;\n        proxy_set_header Host \\$host;\n        proxy_set_header X-Real-IP \\$remote_addr;\n        proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto \\$scheme;\n        proxy_redirect off;\n        \n        proxy_connect_timeout 30;\n        proxy_send_timeout 60;\n        proxy_read_timeout 60;\n    }\n    \n    location /static {\n        alias /opt/lux/current/static;\n        expires 1y;\n        add_header Cache-Control \"public, immutable\";\n    }\n    \n    # Health check endpoint\n    location /health {\n        access_log off;\n        proxy_pass http://127.0.0.1:5000;\n    }\n    \n    # Security headers\n    add_header X-Frame-Options \"SAMEORIGIN\" always;\n    add_header X-XSS-Protection \"1; mode=block\" always;\n    add_header X-Content-Type-Options \"nosniff\" always;\n    add_header Referrer-Policy \"strict-origin-when-cross-origin\" always;\n    add_header X-LUX-Version \"$TIMESTAMP\" always;\n}\nNGINXEOF\n\n    # Enable Nginx site\n    ln -sf /etc/nginx/sites-available/lux-marketing /etc/nginx/sites-enabled/\n    rm -f /etc/nginx/sites-enabled/default\n    \n    # Test Nginx config\n    nginx -t\n    \n    echo \"🔐 Configuring firewall...\"\n    ufw --force enable\n    ufw allow 22    # SSH\n    ufw allow 80    # HTTP\n    ufw allow 443   # HTTPS\n    \n    echo \"🚀 Starting services...\"\n    systemctl daemon-reload\n    systemctl enable lux-marketing nginx postgresql\n    systemctl restart nginx\n    \n    # Initialize database\n    cd $CURRENT_PATH\n    sudo -u luxapp -H bash -c \"\n        source venv/bin/activate\n        export \\$(cat /etc/lux.env | xargs)\n        python3 -c \\\"\nfrom app import app, db\nwith app.app_context():\n    db.create_all()\n    print('Database initialized')\n\\\"\n    \"\n    \n    systemctl start lux-marketing\n    \n    echo \"✅ Deployment completed!\"\n    \n    # Clean up\n    rm -f /tmp/$ARTIFACT_NAME /tmp/$ARTIFACT_NAME.sha256\n    \n    # Keep only last 5 releases\n    cd $VPS_PATH/releases\n    ls -t | tail -n +6 | xargs rm -rf 2>/dev/null || true\nEOF\n\n# Clean up local artifacts\nrm -f $ARTIFACT_NAME $ARTIFACT_NAME.sha256\n\necho -e \"${GREEN}🎉 Deployment completed successfully!${NC}\"\necho \"\"\necho -e \"${BLUE}========================================${NC}\"\necho -e \"${GREEN}✅ LUX Marketing Platform is LIVE!${NC}\"\necho -e \"${BLUE}========================================${NC}\"\necho \"\"\necho -e \"${YELLOW}📋 Access Information:${NC}\"\necho \"  🌐 Website: http://$DOMAIN\"\necho \"  📊 Version: $TIMESTAMP\"\necho \"\"\necho -e \"${YELLOW}🧪 Testing deployment...${NC}\"\nif curl -s -I http://$DOMAIN | grep -q \"200 OK\"; then\n    echo -e \"${GREEN}✅ Website is responding${NC}\"\nelse\n    echo -e \"${YELLOW}⚠️  Website may still be starting...${NC}\"\nfi\n\necho \"\"\necho -e \"${YELLOW}🔧 Post-deployment commands:${NC}\"\necho \"  • Check status: ssh $VPS_USER@$VPS_HOST 'systemctl status lux-marketing'\"\necho \"  • View logs: ssh $VPS_USER@$VPS_HOST 'journalctl -u lux-marketing -f'\"\necho \"  • Setup SSL: ssh $VPS_USER@$VPS_HOST 'apt install certbot python3-certbot-nginx -y && certbot --nginx -d $DOMAIN'\"\necho \"  • Update API keys: ssh $VPS_USER@$VPS_HOST 'nano /etc/lux.env && systemctl restart lux-marketing'\"\necho \"\"\necho -e \"${GREEN}🚀 Your complete LUX Marketing platform is now deployed!${NC}\"","size_bytes":9415},"routes.py":{"content":"import csv\nimport io\nimport base64\nfrom datetime import datetime, timedelta\nfrom flask import Blueprint, render_template, request, flash, redirect, url_for, jsonify, make_response\nfrom flask_login import login_required, current_user\nfrom sqlalchemy import or_\nfrom app import db\nfrom models import (Contact, Campaign, EmailTemplate, CampaignRecipient, EmailTracking, \n                    BrandKit, EmailComponent, Poll, PollResponse, ABTest, Automation, \n                    AutomationStep, SMSCampaign, SMSRecipient, SocialPost, Segment, \n                    SegmentMember, WebForm, FormSubmission, Event, EventRegistration, \n                    Product, Order, CalendarEvent, AutomationTemplate, AutomationExecution,\n                    AutomationAction, LandingPage, NewsletterArchive, NonOpenerResend)\nfrom email_service import EmailService\nfrom utils import validate_email\nfrom tracking import decode_tracking_data, record_email_event\nimport logging\nimport json\nfrom ai_agent import lux_agent\nfrom seo_service import seo_service\n\nlogger = logging.getLogger(__name__)\n\nmain_bp = Blueprint('main', __name__)\n\n@main_bp.route('/')\n@login_required\ndef dashboard():\n    \"\"\"Dashboard with overview statistics\"\"\"\n    total_contacts = Contact.query.filter_by(is_active=True).count()\n    total_campaigns = Campaign.query.count()\n    active_campaigns = Campaign.query.filter_by(status='sending').count()\n    recent_campaigns = Campaign.query.order_by(Campaign.created_at.desc()).limit(5).all()\n    \n    # Email statistics\n    total_sent = db.session.query(CampaignRecipient).filter_by(status='sent').count()\n    total_failed = db.session.query(CampaignRecipient).filter_by(status='failed').count()\n    \n    return render_template('dashboard.html',\n                         total_contacts=total_contacts,\n                         total_campaigns=total_campaigns,\n                         active_campaigns=active_campaigns,\n                         recent_campaigns=recent_campaigns,\n                         total_sent=total_sent,\n                         total_failed=total_failed)\n\n@main_bp.route('/contacts')\n@login_required\ndef contacts():\n    \"\"\"Contact management page\"\"\"\n    page = request.args.get('page', 1, type=int)\n    search = request.args.get('search', '')\n    \n    query = Contact.query.filter_by(is_active=True)\n    \n    if search:\n        query = query.filter(or_(\n            Contact.email.contains(search),\n            Contact.first_name.contains(search),\n            Contact.last_name.contains(search),\n            Contact.company.contains(search)\n        ))\n    \n    contacts = query.order_by(Contact.created_at.desc()).paginate(\n        page=page, per_page=20, error_out=False\n    )\n    \n    return render_template('contacts.html', contacts=contacts, search=search)\n\n@main_bp.route('/contacts/add', methods=['POST'])\n@login_required\ndef add_contact():\n    \"\"\"Add a new contact\"\"\"\n    email = request.form.get('email', '').strip()\n    first_name = request.form.get('first_name', '').strip()\n    last_name = request.form.get('last_name', '').strip()\n    company = request.form.get('company', '').strip()\n    phone = request.form.get('phone', '').strip()\n    tags = request.form.get('tags', '').strip()\n    \n    if not email:\n        flash('Email is required', 'error')\n        return redirect(url_for('main.contacts'))\n    \n    if not validate_email(email):\n        flash('Invalid email format', 'error')\n        return redirect(url_for('main.contacts'))\n    \n    # Check if contact already exists\n    existing = Contact.query.filter_by(email=email).first()\n    if existing:\n        flash('Contact with this email already exists', 'error')\n        return redirect(url_for('main.contacts'))\n    \n    contact = Contact()\n    contact.email = email\n    contact.first_name = first_name\n    contact.last_name = last_name\n    contact.company = company\n    contact.phone = phone\n    contact.tags = tags\n    \n    db.session.add(contact)\n    db.session.commit()\n    \n    flash('Contact added successfully', 'success')\n    return redirect(url_for('main.contacts'))\n\n@main_bp.route('/contacts/import', methods=['POST'])\n@login_required\ndef import_contacts():\n    \"\"\"Import contacts from CSV file\"\"\"\n    if 'file' not in request.files:\n        flash('No file selected', 'error')\n        return redirect(url_for('main.contacts'))\n    \n    file = request.files['file']\n    if file.filename == '':\n        flash('No file selected', 'error')\n        return redirect(url_for('main.contacts'))\n    \n    if not file.filename or not file.filename.endswith('.csv'):\n        flash('Please upload a CSV file', 'error')\n        return redirect(url_for('main.contacts'))\n    \n    try:\n        # Read CSV file with better error handling\n        try:\n            content = file.stream.read()\n            # Try different encodings\n            for encoding in ['utf-8', 'utf-8-sig', 'latin-1', 'cp1252']:\n                try:\n                    decoded_content = content.decode(encoding)\n                    break\n                except UnicodeDecodeError:\n                    continue\n            else:\n                flash('Unable to decode file. Please ensure it is saved in UTF-8 format.', 'error')\n                return redirect(url_for('main.contacts'))\n            \n            stream = io.StringIO(decoded_content, newline=None)\n            csv_input = csv.DictReader(stream)\n        except Exception as e:\n            flash(f'Error reading CSV file: {str(e)}', 'error')\n            return redirect(url_for('main.contacts'))\n        \n        imported_count = 0\n        error_count = 0\n        \n        for row in csv_input:\n            email = row.get('email', '').strip()\n            if not email or not validate_email(email):\n                error_count += 1\n                continue\n            \n            # Check if contact already exists\n            existing = Contact.query.filter_by(email=email).first()\n            if existing:\n                continue\n            \n            contact = Contact()\n            contact.email = email\n            contact.first_name = row.get('first_name', '').strip()\n            contact.last_name = row.get('last_name', '').strip()\n            contact.company = row.get('company', '').strip()\n            contact.phone = row.get('phone', '').strip()\n            contact.tags = row.get('tags', '').strip()\n            \n            db.session.add(contact)\n            imported_count += 1\n        \n        db.session.commit()\n        \n        flash(f'Successfully imported {imported_count} contacts. {error_count} errors.', 'success')\n        \n    except Exception as e:\n        logging.error(f\"Error importing contacts: {str(e)}\")\n        flash('Error importing contacts. Please check file format.', 'error')\n    \n    return redirect(url_for('main.contacts'))\n\n@main_bp.route('/contacts/export')\n@login_required\ndef export_contacts():\n    \"\"\"Export contacts to CSV\"\"\"\n    contacts = Contact.query.filter_by(is_active=True).all()\n    \n    output = io.StringIO()\n    writer = csv.writer(output)\n    \n    # Write header\n    writer.writerow(['email', 'first_name', 'last_name', 'company', 'phone', 'tags', 'created_at'])\n    \n    # Write contacts\n    for contact in contacts:\n        writer.writerow([\n            contact.email,\n            contact.first_name or '',\n            contact.last_name or '',\n            contact.company or '',\n            contact.phone or '',\n            contact.tags or '',\n            contact.created_at.strftime('%Y-%m-%d %H:%M:%S')\n        ])\n    \n    # Create response\n    output.seek(0)\n    response = make_response(output.getvalue())\n    response.headers['Content-Type'] = 'text/csv'\n    response.headers['Content-Disposition'] = f'attachment; filename=contacts_{datetime.now().strftime(\"%Y%m%d\")}.csv'\n    \n    return response\n\n@main_bp.route('/contacts/<int:contact_id>/delete', methods=['POST'])\n@login_required\ndef delete_contact(contact_id):\n    \"\"\"Delete a contact\"\"\"\n    contact = Contact.query.get_or_404(contact_id)\n    contact.is_active = False\n    db.session.commit()\n    \n    flash('Contact deleted successfully', 'success')\n    return redirect(url_for('main.contacts'))\n\n@main_bp.route('/campaigns')\n@login_required\ndef campaigns():\n    \"\"\"Campaign management page\"\"\"\n    page = request.args.get('page', 1, type=int)\n    status_filter = request.args.get('status', '')\n    \n    query = Campaign.query\n    \n    if status_filter:\n        query = query.filter_by(status=status_filter)\n    \n    campaigns = query.order_by(Campaign.created_at.desc()).paginate(\n        page=page, per_page=10, error_out=False\n    )\n    \n    return render_template('campaigns.html', campaigns=campaigns, status_filter=status_filter)\n\n@main_bp.route('/campaigns/create', methods=['GET', 'POST'])\n@login_required\ndef create_campaign():\n    \"\"\"Create a new campaign\"\"\"\n    if request.method == 'POST':\n        name = request.form.get('name', '').strip()\n        subject = request.form.get('subject', '').strip()\n        template_id = request.form.get('template_id', type=int)\n        scheduled_at = request.form.get('scheduled_at')\n        recipient_tags = request.form.get('recipient_tags', '').strip()\n        \n        if not name or not subject or not template_id:\n            flash('Name, subject, and template are required', 'error')\n            return redirect(url_for('main.create_campaign'))\n        \n        # Create campaign\n        campaign = Campaign()\n        campaign.name = name\n        campaign.subject = subject\n        campaign.template_id = template_id\n        campaign.status = 'draft'\n        \n        if scheduled_at:\n            try:\n                campaign.scheduled_at = datetime.fromisoformat(scheduled_at.replace('T', ' '))\n                campaign.status = 'scheduled'\n            except ValueError:\n                flash('Invalid scheduled time format', 'error')\n                return redirect(url_for('main.create_campaign'))\n        \n        db.session.add(campaign)\n        db.session.flush()  # Get campaign ID\n        \n        # Add recipients\n        contacts_query = Contact.query.filter_by(is_active=True)\n        \n        if recipient_tags:\n            # Filter by tags\n            tag_list = [tag.strip() for tag in recipient_tags.split(',')]\n            tag_conditions = []\n            for tag in tag_list:\n                tag_conditions.append(Contact.tags.contains(tag))\n            contacts_query = contacts_query.filter(or_(*tag_conditions))\n        \n        contacts = contacts_query.all()\n        \n        for contact in contacts:\n            recipient = CampaignRecipient()\n            recipient.campaign_id = campaign.id\n            recipient.contact_id = contact.id\n            db.session.add(recipient)\n        \n        db.session.commit()\n        \n        flash(f'Campaign created successfully with {len(contacts)} recipients', 'success')\n        return redirect(url_for('main.campaigns'))\n    \n    # GET request - show form\n    templates = EmailTemplate.query.filter_by(is_active=True).all()\n    return render_template('campaign_create.html', templates=templates)\n\n@main_bp.route('/campaigns/<int:campaign_id>/send', methods=['POST'])\n@login_required\ndef send_campaign(campaign_id):\n    \"\"\"Send a campaign immediately\"\"\"\n    campaign = Campaign.query.get_or_404(campaign_id)\n    \n    if campaign.status not in ['draft', 'scheduled']:\n        flash('Campaign cannot be sent in current status', 'error')\n        return redirect(url_for('main.campaigns'))\n    \n    try:\n        email_service = EmailService()\n        email_service.send_campaign(campaign)\n        \n        campaign.status = 'sending'\n        campaign.sent_at = datetime.utcnow()\n        db.session.commit()\n        \n        flash('Campaign is being sent', 'success')\n    except Exception as e:\n        logging.error(f\"Error sending campaign: {str(e)}\")\n        flash('Error sending campaign. Please check configuration.', 'error')\n    \n    return redirect(url_for('main.campaigns'))\n\n@main_bp.route('/campaigns/<int:campaign_id>/preview')\n@login_required\ndef preview_campaign(campaign_id):\n    \"\"\"Preview campaign email\"\"\"\n    campaign = Campaign.query.get_or_404(campaign_id)\n    template = campaign.template\n    \n    # Get sample contact for preview\n    sample_contact = Contact.query.filter_by(is_active=True).first()\n    \n    return render_template('preview_email.html', \n                         campaign=campaign, \n                         template=template,\n                         sample_contact=sample_contact)\n\n@main_bp.route('/templates')\n@login_required\ndef templates():\n    \"\"\"Email template management\"\"\"\n    templates = EmailTemplate.query.filter_by(is_active=True).order_by(EmailTemplate.created_at.desc()).all()\n    return render_template('templates_manage.html', templates=templates)\n\n@main_bp.route('/templates/gallery')\n@login_required\ndef template_gallery():\n    \"\"\"Branded template gallery\"\"\"\n    # Define branded template options\n    branded_templates = [\n        {\n            'id': 'modern_newsletter',\n            'name': 'Modern Newsletter',\n            'description': 'Clean, modern design perfect for newsletters and announcements',\n            'preview_image': '/static/images/templates/modern_newsletter.png',\n            'category': 'Newsletter',\n            'features': ['Responsive Design', 'Hero Image', 'Call-to-Action Button', 'Social Links']\n        },\n        {\n            'id': 'promotional_sale',\n            'name': 'Promotional Sale',\n            'description': 'Eye-catching design for sales promotions and special offers',\n            'preview_image': '/static/images/templates/promotional_sale.png',\n            'category': 'Promotional',\n            'features': ['Bold Headlines', 'Product Showcase', 'Urgency Elements', 'Discount Highlights']\n        },\n        {\n            'id': 'welcome_series',\n            'name': 'Welcome Email',\n            'description': 'Professional welcome email for new subscribers',\n            'preview_image': '/static/images/templates/welcome_series.png',\n            'category': 'Welcome',\n            'features': ['Personal Touch', 'Brand Introduction', 'Next Steps', 'Contact Information']\n        },\n        {\n            'id': 'event_invitation',\n            'name': 'Event Invitation',\n            'description': 'Elegant design for event invitations and announcements',\n            'preview_image': '/static/images/templates/event_invitation.png',\n            'category': 'Events',\n            'features': ['Event Details', 'RSVP Button', 'Location Map', 'Calendar Integration']\n        },\n        {\n            'id': 'product_update',\n            'name': 'Product Update',\n            'description': 'Professional layout for product announcements and updates',\n            'preview_image': '/static/images/templates/product_update.png',\n            'category': 'Product',\n            'features': ['Feature Highlights', 'Screenshots', 'Learn More Links', 'Feedback Request']\n        },\n        {\n            'id': 'minimal_corporate',\n            'name': 'Minimal Corporate',\n            'description': 'Clean, minimalist design for corporate communications',\n            'preview_image': '/static/images/templates/minimal_corporate.png',\n            'category': 'Corporate',\n            'features': ['Professional Layout', 'Typography Focus', 'Brand Colors', 'Simple CTA']\n        }\n    ]\n    \n    return render_template('template_gallery.html', branded_templates=branded_templates)\n\n@main_bp.route('/templates/use-branded/<template_id>')\n@login_required\ndef use_branded_template(template_id):\n    \"\"\"Use a branded template to create a new custom template\"\"\"\n    # Get the branded template HTML\n    template_html = get_branded_template_html(template_id)\n    \n    if not template_html:\n        flash('Template not found', 'error')\n        return redirect(url_for('main.template_gallery'))\n    \n    # Get template info\n    template_info = get_branded_template_info(template_id)\n    \n    return render_template('template_create.html', \n                         branded_template=template_info,\n                         default_html=template_html['html'],\n                         default_subject=template_html['subject'])\n\n@main_bp.route('/templates/create', methods=['GET', 'POST'])\n@login_required\ndef create_template():\n    \"\"\"Create a new email template\"\"\"\n    if request.method == 'POST':\n        try:\n            name = request.form.get('name', '').strip()\n            subject = request.form.get('subject', '').strip()\n            html_content = request.form.get('html_content', '').strip()\n            \n            logging.debug(f\"Template creation attempt: name='{name}', subject='{subject}', content_length={len(html_content)}\")\n            \n            if not name or not subject or not html_content:\n                flash('All fields are required', 'error')\n                return redirect(url_for('main.create_template'))\n            \n            template = EmailTemplate()\n            template.name = name\n            template.subject = subject\n            template.html_content = html_content\n            \n            db.session.add(template)\n            db.session.commit()\n            \n            logging.info(f\"Template '{name}' created successfully\")\n            flash('Template created successfully', 'success')\n            return redirect(url_for('main.templates'))\n            \n        except Exception as e:\n            logging.error(f\"Error creating template: {str(e)}\")\n            db.session.rollback()\n            flash('Error creating template. Please try again.', 'error')\n            return redirect(url_for('main.create_template'))\n    \n    return render_template('template_create.html')\n\n@main_bp.route('/templates/<int:template_id>/preview')\n@login_required\ndef preview_template(template_id):\n    \"\"\"Preview email template\"\"\"\n    template = EmailTemplate.query.get_or_404(template_id)\n    \n    # Get sample contact for preview\n    sample_contact = Contact.query.filter_by(is_active=True).first()\n    \n    if not sample_contact:\n        # Create a sample contact for preview if none exists\n        sample_contact = type('SampleContact', (), {\n            'first_name': 'John',\n            'last_name': 'Doe',\n            'full_name': 'John Doe',\n            'email': 'john.doe@example.com',\n            'company': 'Example Company',\n            'phone': '+1 (555) 123-4567'\n        })()\n    \n    # Create a sample campaign for preview\n    sample_campaign = type('SampleCampaign', (), {\n        'name': 'Sample Campaign',\n        'subject': template.subject,\n        'id': 0\n    })()\n    \n    try:\n        from email_service import EmailService\n        email_service = EmailService()\n        \n        # Render the template with sample data\n        rendered_html = email_service.render_template(\n            template.html_content,\n            sample_contact,\n            sample_campaign\n        )\n        \n        return render_template('preview_template.html', \n                             template=template, \n                             rendered_html=rendered_html,\n                             sample_contact=sample_contact)\n                             \n    except Exception as e:\n        flash(f'Error rendering template preview: {str(e)}', 'error')\n        return redirect(url_for('main.templates'))\n\n@main_bp.route('/templates/preview-live', methods=['POST'])\n@login_required\ndef preview_template_live():\n    \"\"\"Live preview of template during creation/editing\"\"\"\n    try:\n        html_content = request.form.get('html_content', '')\n        subject = request.form.get('subject', 'Preview Subject')\n        \n        if not html_content:\n            return jsonify({'error': 'No HTML content provided'}), 400\n        \n        # Create sample data for preview\n        sample_contact = type('SampleContact', (), {\n            'first_name': 'John',\n            'last_name': 'Doe',\n            'full_name': 'John Doe',\n            'email': 'john.doe@example.com',\n            'company': 'Example Company',\n            'phone': '+1 (555) 123-4567'\n        })()\n        \n        sample_campaign = type('SampleCampaign', (), {\n            'name': 'Sample Campaign',\n            'subject': subject,\n            'id': 0\n        })()\n        \n        # Render the template\n        from email_service import EmailService\n        email_service = EmailService()\n        \n        rendered_html = email_service.render_template(\n            html_content,\n            sample_contact,\n            sample_campaign\n        )\n        \n        return jsonify({\n            'success': True,\n            'rendered_html': rendered_html,\n            'subject': subject\n        })\n        \n    except Exception as e:\n        return jsonify({'error': str(e)}), 500\n\ndef get_branded_template_html(template_id):\n    \"\"\"Get HTML content for branded templates\"\"\"\n    templates = {\n        'modern_newsletter': {\n            'subject': 'Latest Updates from {{campaign.name}}',\n            'html': '''<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>{{campaign.subject}}</title>\n</head>\n<body style=\"margin: 0; padding: 0; font-family: 'Arial', sans-serif; background-color: #f8f9fa;\">\n    <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\" style=\"background-color: #f8f9fa;\">\n        <tr>\n            <td align=\"center\" style=\"padding: 40px 20px;\">\n                <table width=\"600\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\" style=\"background-color: #ffffff; border-radius: 8px; box-shadow: 0 4px 6px rgba(0,0,0,0.1);\">\n                    <!-- Header -->\n                    <tr>\n                        <td style=\"background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); padding: 40px 30px; text-align: center; border-radius: 8px 8px 0 0;\">\n                            <h1 style=\"margin: 0; color: #ffffff; font-size: 28px; font-weight: bold;\">Your Company</h1>\n                            <p style=\"margin: 10px 0 0 0; color: #ffffff; font-size: 16px; opacity: 0.9;\">Newsletter</p>\n                        </td>\n                    </tr>\n                    <!-- Main Content -->\n                    <tr>\n                        <td style=\"padding: 40px 30px;\">\n                            <h2 style=\"margin: 0 0 20px 0; color: #333333; font-size: 24px;\">Hello {{contact.first_name}}!</h2>\n                            <p style=\"margin: 0 0 20px 0; color: #666666; font-size: 16px; line-height: 1.6;\">\n                                We're excited to share the latest updates and insights with you. Here's what's new:\n                            </p>\n                            \n                            <!-- Feature Section -->\n                            <div style=\"background-color: #f8f9fa; padding: 25px; border-radius: 6px; margin: 25px 0;\">\n                                <h3 style=\"margin: 0 0 15px 0; color: #333333; font-size: 20px;\">Featured Content</h3>\n                                <p style=\"margin: 0 0 15px 0; color: #666666; font-size: 16px; line-height: 1.6;\">\n                                    Add your featured content here. This section is perfect for highlighting your most important news or updates.\n                                </p>\n                                <a href=\"#\" style=\"display: inline-block; background-color: #667eea; color: #ffffff; text-decoration: none; padding: 12px 24px; border-radius: 4px; font-weight: bold;\">\n                                    Learn More\n                                </a>\n                            </div>\n                            \n                            <p style=\"margin: 20px 0 0 0; color: #666666; font-size: 16px; line-height: 1.6;\">\n                                Thank you for being part of our community, {{contact.first_name}}!\n                            </p>\n                        </td>\n                    </tr>\n                    <!-- Footer -->\n                    <tr>\n                        <td style=\"background-color: #f8f9fa; padding: 30px; text-align: center; border-radius: 0 0 8px 8px;\">\n                            <p style=\"margin: 0 0 10px 0; color: #999999; font-size: 14px;\">\n                                You're receiving this email because you subscribed to our newsletter.\n                            </p>\n                            <p style=\"margin: 0; color: #999999; font-size: 14px;\">\n                                <a href=\"{{unsubscribe_url}}\" style=\"color: #667eea; text-decoration: none;\">Unsubscribe</a> | \n                                <a href=\"#\" style=\"color: #667eea; text-decoration: none;\">Update Preferences</a>\n                            </p>\n                        </td>\n                    </tr>\n                </table>\n            </td>\n        </tr>\n    </table>\n</body>\n</html>'''\n        },\n        'promotional_sale': {\n            'subject': '🔥 Special Offer Just for You, {{contact.first_name}}!',\n            'html': '''<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>{{campaign.subject}}</title>\n</head>\n<body style=\"margin: 0; padding: 0; font-family: 'Arial', sans-serif; background-color: #f8f9fa;\">\n    <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\" style=\"background-color: #f8f9fa;\">\n        <tr>\n            <td align=\"center\" style=\"padding: 40px 20px;\">\n                <table width=\"600\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\" style=\"background-color: #ffffff; border-radius: 8px; box-shadow: 0 4px 6px rgba(0,0,0,0.1);\">\n                    <!-- Header -->\n                    <tr>\n                        <td style=\"background: linear-gradient(135deg, #ff6b6b 0%, #ee5a24 100%); padding: 40px 30px; text-align: center; border-radius: 8px 8px 0 0;\">\n                            <h1 style=\"margin: 0; color: #ffffff; font-size: 32px; font-weight: bold;\">MEGA SALE</h1>\n                            <p style=\"margin: 10px 0 0 0; color: #ffffff; font-size: 18px; font-weight: bold;\">UP TO 50% OFF</p>\n                        </td>\n                    </tr>\n                    <!-- Main Content -->\n                    <tr>\n                        <td style=\"padding: 40px 30px; text-align: center;\">\n                            <h2 style=\"margin: 0 0 20px 0; color: #333333; font-size: 24px;\">Hey {{contact.first_name}}, Don't Miss Out!</h2>\n                            <p style=\"margin: 0 0 30px 0; color: #666666; font-size: 16px; line-height: 1.6;\">\n                                Our biggest sale of the year is here! Save up to 50% on everything. Limited time only!\n                            </p>\n                            \n                            <!-- Offer Box -->\n                            <div style=\"background: linear-gradient(135deg, #ff6b6b 0%, #ee5a24 100%); color: #ffffff; padding: 30px; border-radius: 8px; margin: 30px 0;\">\n                                <h3 style=\"margin: 0 0 10px 0; font-size: 28px; font-weight: bold;\">50% OFF</h3>\n                                <p style=\"margin: 0 0 20px 0; font-size: 16px;\">Use code: SAVE50</p>\n                                <a href=\"#\" style=\"display: inline-block; background-color: #ffffff; color: #ee5a24; text-decoration: none; padding: 15px 30px; border-radius: 4px; font-weight: bold; font-size: 16px;\">\n                                    SHOP NOW\n                                </a>\n                            </div>\n                            \n                            <p style=\"margin: 20px 0 0 0; color: #ff6b6b; font-size: 14px; font-weight: bold;\">\n                                ⏰ Hurry! Sale ends in 48 hours\n                            </p>\n                        </td>\n                    </tr>\n                    <!-- Footer -->\n                    <tr>\n                        <td style=\"background-color: #f8f9fa; padding: 30px; text-align: center; border-radius: 0 0 8px 8px;\">\n                            <p style=\"margin: 0 0 10px 0; color: #999999; font-size: 14px;\">\n                                You're receiving this email because you're a valued customer.\n                            </p>\n                            <p style=\"margin: 0; color: #999999; font-size: 14px;\">\n                                <a href=\"{{unsubscribe_url}}\" style=\"color: #ff6b6b; text-decoration: none;\">Unsubscribe</a>\n                            </p>\n                        </td>\n                    </tr>\n                </table>\n            </td>\n        </tr>\n    </table>\n</body>\n</html>'''\n        },\n        'welcome_series': {\n            'subject': 'Welcome to our community, {{contact.first_name}}!',\n            'html': '''<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>{{campaign.subject}}</title>\n</head>\n<body style=\"margin: 0; padding: 0; font-family: 'Arial', sans-serif; background-color: #f8f9fa;\">\n    <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\" style=\"background-color: #f8f9fa;\">\n        <tr>\n            <td align=\"center\" style=\"padding: 40px 20px;\">\n                <table width=\"600\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\" style=\"background-color: #ffffff; border-radius: 8px; box-shadow: 0 4px 6px rgba(0,0,0,0.1);\">\n                    <!-- Header -->\n                    <tr>\n                        <td style=\"background: linear-gradient(135deg, #2ecc71 0%, #27ae60 100%); padding: 40px 30px; text-align: center; border-radius: 8px 8px 0 0;\">\n                            <h1 style=\"margin: 0; color: #ffffff; font-size: 32px; font-weight: bold;\">Welcome!</h1>\n                            <p style=\"margin: 10px 0 0 0; color: #ffffff; font-size: 16px; opacity: 0.9;\">We're thrilled to have you join us</p>\n                        </td>\n                    </tr>\n                    <!-- Main Content -->\n                    <tr>\n                        <td style=\"padding: 40px 30px;\">\n                            <h2 style=\"margin: 0 0 20px 0; color: #333333; font-size: 24px;\">Hi {{contact.first_name}}, Welcome aboard! 🎉</h2>\n                            <p style=\"margin: 0 0 20px 0; color: #666666; font-size: 16px; line-height: 1.6;\">\n                                Thank you for joining our community! We're excited to have you with us and can't wait to share amazing content, updates, and exclusive offers.\n                            </p>\n                            \n                            <!-- Getting Started Section -->\n                            <div style=\"background-color: #f8f9fa; padding: 25px; border-radius: 6px; margin: 25px 0;\">\n                                <h3 style=\"margin: 0 0 15px 0; color: #333333; font-size: 20px;\">🚀 Getting Started</h3>\n                                <ul style=\"margin: 0; padding-left: 20px; color: #666666; font-size: 16px; line-height: 1.8;\">\n                                    <li>Explore our latest content and resources</li>\n                                    <li>Follow us on social media for daily updates</li>\n                                    <li>Join our community discussions</li>\n                                    <li>Don't forget to add us to your contacts</li>\n                                </ul>\n                            </div>\n                            \n                            <div style=\"text-align: center; margin: 30px 0;\">\n                                <a href=\"#\" style=\"display: inline-block; background-color: #2ecc71; color: #ffffff; text-decoration: none; padding: 15px 30px; border-radius: 4px; font-weight: bold; font-size: 16px;\">\n                                    Get Started\n                                </a>\n                            </div>\n                            \n                            <p style=\"margin: 20px 0 0 0; color: #666666; font-size: 16px; line-height: 1.6;\">\n                                If you have any questions, feel free to reply to this email. We're here to help!\n                            </p>\n                            \n                            <p style=\"margin: 20px 0 0 0; color: #666666; font-size: 16px; line-height: 1.6;\">\n                                Best regards,<br>\n                                <strong>The Team</strong>\n                            </p>\n                        </td>\n                    </tr>\n                    <!-- Footer -->\n                    <tr>\n                        <td style=\"background-color: #f8f9fa; padding: 30px; text-align: center; border-radius: 0 0 8px 8px;\">\n                            <p style=\"margin: 0 0 10px 0; color: #999999; font-size: 14px;\">\n                                You're receiving this email because you recently signed up.\n                            </p>\n                            <p style=\"margin: 0; color: #999999; font-size: 14px;\">\n                                <a href=\"{{unsubscribe_url}}\" style=\"color: #2ecc71; text-decoration: none;\">Unsubscribe</a> | \n                                <a href=\"#\" style=\"color: #2ecc71; text-decoration: none;\">Contact Us</a>\n                            </p>\n                        </td>\n                    </tr>\n                </table>\n            </td>\n        </tr>\n    </table>\n</body>\n</html>'''\n        }\n    }\n    \n    return templates.get(template_id)\n\ndef get_branded_template_info(template_id):\n    \"\"\"Get template information\"\"\"\n    template_info = {\n        'modern_newsletter': {\n            'name': 'Modern Newsletter',\n            'description': 'Clean, modern design perfect for newsletters and announcements'\n        },\n        'promotional_sale': {\n            'name': 'Promotional Sale',\n            'description': 'Eye-catching design for sales promotions and special offers'\n        },\n        'welcome_series': {\n            'name': 'Welcome Email',\n            'description': 'Professional welcome email for new subscribers'\n        }\n    }\n    \n    return template_info.get(template_id, {'name': 'Unknown Template', 'description': ''})\n\n@main_bp.route('/analytics')\n@login_required\ndef analytics():\n    \"\"\"Analytics and reporting dashboard\"\"\"\n    # Campaign statistics\n    total_campaigns = Campaign.query.count()\n    sent_campaigns = Campaign.query.filter_by(status='sent').count()\n    \n    # Email delivery statistics\n    total_sent = db.session.query(CampaignRecipient).filter_by(status='sent').count()\n    total_failed = db.session.query(CampaignRecipient).filter_by(status='failed').count()\n    total_bounced = db.session.query(CampaignRecipient).filter_by(status='bounced').count()\n    total_pending = db.session.query(CampaignRecipient).filter_by(status='pending').count()\n    \n    # Engagement statistics\n    total_opened = db.session.query(CampaignRecipient).filter(CampaignRecipient.opened_at.isnot(None)).count()\n    total_clicked = db.session.query(CampaignRecipient).filter(CampaignRecipient.clicked_at.isnot(None)).count()\n    \n    # Calculate rates\n    total_delivered = total_sent\n    open_rate = (total_opened / total_delivered * 100) if total_delivered > 0 else 0\n    click_rate = (total_clicked / total_delivered * 100) if total_delivered > 0 else 0\n    bounce_rate = (total_bounced / (total_delivered + total_bounced) * 100) if (total_delivered + total_bounced) > 0 else 0\n    \n    # Tracking events breakdown\n    tracking_stats = db.session.query(\n        EmailTracking.event_type, \n        db.func.count(EmailTracking.id).label('count')\n    ).group_by(EmailTracking.event_type).all()\n    \n    tracking_data = {stat.event_type: stat.count for stat in tracking_stats}\n    \n    # Recent campaign performance\n    recent_campaigns = Campaign.query.filter(Campaign.sent_at.isnot(None)).order_by(Campaign.sent_at.desc()).limit(10).all()\n    \n    # Top performing campaigns by open rate\n    top_campaigns = []\n    for campaign in Campaign.query.filter_by(status='sent').all():\n        recipients = campaign.recipients.filter_by(status='sent').count()\n        opens = campaign.recipients.filter(CampaignRecipient.opened_at.isnot(None)).count()\n        clicks = campaign.recipients.filter(CampaignRecipient.clicked_at.isnot(None)).count()\n        \n        if recipients > 0:\n            campaign_open_rate = (opens / recipients * 100)\n            campaign_click_rate = (clicks / recipients * 100)\n            top_campaigns.append({\n                'campaign': campaign,\n                'recipients': recipients,\n                'opens': opens,\n                'clicks': clicks,\n                'open_rate': campaign_open_rate,\n                'click_rate': campaign_click_rate\n            })\n    \n    # Sort by open rate\n    top_campaigns.sort(key=lambda x: x['open_rate'], reverse=True)\n    top_campaigns = top_campaigns[:5]  # Top 5 campaigns\n    \n    return render_template('analytics.html',\n                         total_campaigns=total_campaigns,\n                         sent_campaigns=sent_campaigns,\n                         total_sent=total_sent,\n                         total_failed=total_failed,\n                         total_bounced=total_bounced,\n                         total_pending=total_pending,\n                         total_opened=total_opened,\n                         total_clicked=total_clicked,\n                         open_rate=open_rate,\n                         click_rate=click_rate,\n                         bounce_rate=bounce_rate,\n                         tracking_data=tracking_data,\n                         recent_campaigns=recent_campaigns,\n                         top_campaigns=top_campaigns)\n\n@main_bp.route('/track/open/<tracking_id>')\ndef track_open(tracking_id):\n    \"\"\"Track email open events\"\"\"\n    campaign_id, contact_id = decode_tracking_data(tracking_id)\n    \n    if campaign_id and contact_id:\n        # Get client info for tracking\n        event_data = {\n            'user_agent': request.headers.get('User-Agent', ''),\n            'ip_address': request.remote_addr,\n            'timestamp': datetime.utcnow().isoformat()\n        }\n        \n        # Record the open event\n        record_email_event(campaign_id, contact_id, 'opened', event_data)\n    \n    # Return a 1x1 transparent pixel\n    from flask import Response\n    \n    # 1x1 transparent GIF in base64\n    pixel_data = 'R0lGODlhAQABAIAAAAAAAP///yH5BAEAAAAALAAAAAABAAEAAAIBRAA7'\n    pixel_bytes = base64.b64decode(pixel_data)\n    \n    response = Response(pixel_bytes, mimetype='image/gif')\n    response.headers['Cache-Control'] = 'no-cache, no-store, must-revalidate'\n    response.headers['Pragma'] = 'no-cache'\n    response.headers['Expires'] = '0'\n    \n    return response\n\n@main_bp.route('/track/click')\ndef track_click():\n    \"\"\"Track email click events\"\"\"\n    tracking_id = request.args.get('tracking_id')\n    original_url = request.args.get('url', '/')\n    \n    if tracking_id:\n        campaign_id, contact_id = decode_tracking_data(tracking_id)\n        \n        if campaign_id and contact_id:\n            # Get client info for tracking\n            event_data = {\n                'user_agent': request.headers.get('User-Agent', ''),\n                'ip_address': request.remote_addr,\n                'clicked_url': original_url,\n                'timestamp': datetime.utcnow().isoformat()\n            }\n            \n            # Record the click event\n            record_email_event(campaign_id, contact_id, 'clicked', event_data)\n    \n    # Redirect to the original URL\n    return redirect(original_url)\n\n@main_bp.route('/api/campaign/<int:campaign_id>/analytics')\n@login_required\ndef campaign_analytics_api(campaign_id):\n    \"\"\"API endpoint for campaign analytics\"\"\"\n    from tracking import get_campaign_analytics\n    \n    analytics = get_campaign_analytics(campaign_id)\n    if not analytics:\n        return jsonify({'error': 'Campaign not found'}), 404\n    \n    # Convert campaign object to dict for JSON serialization\n    campaign_data = {\n        'id': analytics['campaign'].id,\n        'name': analytics['campaign'].name,\n        'subject': analytics['campaign'].subject,\n        'status': analytics['campaign'].status,\n        'created_at': analytics['campaign'].created_at.isoformat() if analytics['campaign'].created_at else None,\n        'sent_at': analytics['campaign'].sent_at.isoformat() if analytics['campaign'].sent_at else None\n    }\n    \n    return jsonify({\n        'campaign': campaign_data,\n        'metrics': {\n            'total_recipients': analytics['total_recipients'],\n            'sent_count': analytics['sent_count'],\n            'failed_count': analytics['failed_count'],\n            'bounced_count': analytics['bounced_count'],\n            'opened_count': analytics['opened_count'],\n            'clicked_count': analytics['clicked_count'],\n            'delivery_rate': round(analytics['delivery_rate'], 2),\n            'open_rate': round(analytics['open_rate'], 2),\n            'click_rate': round(analytics['click_rate'], 2),\n            'bounce_rate': round(analytics['bounce_rate'], 2)\n        },\n        'events': analytics['event_counts']\n    })\n\n# LUX AI Agent Routes\n@main_bp.route('/lux/generate-campaign', methods=['POST'])\n@login_required\ndef lux_generate_campaign():\n    \"\"\"LUX AI agent - Generate automated campaign\"\"\"\n    try:\n        from ai_agent import lux_agent\n        \n        data = request.get_json() or {}\n        campaign_brief = {\n            'objective': data.get('objective', 'Engage audience and drive conversions'),\n            'target_audience': data.get('target_audience', 'All active contacts'),\n            'brand_info': data.get('brand_info', 'Professional business'),\n            'target_tags': data.get('target_tags', []),\n            'schedule_time': None\n        }\n        \n        # Parse schedule time if provided\n        if data.get('schedule_time'):\n            try:\n                campaign_brief['schedule_time'] = datetime.fromisoformat(data['schedule_time'])\n            except ValueError:\n                pass\n        \n        result = lux_agent.create_automated_campaign(campaign_brief)\n        \n        if result:\n            return jsonify({\n                'success': True,\n                'campaign': result,\n                'message': f'LUX created campaign \"{result[\"campaign_name\"]}\" with {result[\"recipients_count\"]} recipients'\n            })\n        else:\n            return jsonify({\n                'success': False,\n                'message': 'LUX was unable to create the campaign. Please check your OpenAI configuration.'\n            }), 500\n            \n    except Exception as e:\n        logger.error(f\"LUX generate campaign error: {e}\")\n        return jsonify({\n            'success': False,\n            'message': f'Error: {str(e)}'\n        }), 500\n\n@main_bp.route('/lux/optimize-campaign/<int:campaign_id>')\n@login_required\ndef lux_optimize_campaign(campaign_id):\n    \"\"\"LUX AI agent - Optimize campaign performance\"\"\"\n    try:\n        from ai_agent import lux_agent\n        \n        optimization = lux_agent.optimize_campaign_performance(campaign_id)\n        \n        if optimization:\n            return jsonify({\n                'success': True,\n                'optimization': optimization\n            })\n        else:\n            return jsonify({\n                'success': False,\n                'message': 'Unable to analyze campaign performance'\n            }), 404\n            \n    except Exception as e:\n        logger.error(f\"LUX optimize campaign error: {e}\")\n        return jsonify({\n            'success': False,\n            'message': f'Error: {str(e)}'\n        }), 500\n\n@main_bp.route('/lux/audience-analysis')\n@login_required\ndef lux_audience_analysis():\n    \"\"\"LUX AI agent - Analyze audience segments\"\"\"\n    try:\n        from ai_agent import lux_agent\n        \n        contacts = Contact.query.filter_by(is_active=True).all()\n        analysis = lux_agent.analyze_audience_segments(contacts)\n        \n        if analysis:\n            return jsonify({\n                'success': True,\n                'analysis': analysis\n            })\n        else:\n            return jsonify({\n                'success': False,\n                'message': 'Unable to analyze audience'\n            }), 500\n            \n    except Exception as e:\n        logger.error(f\"LUX audience analysis error: {e}\")\n        return jsonify({\n            'success': False,\n            'message': f'Error: {str(e)}'\n        }), 500\n\n@main_bp.route('/lux/subject-variants', methods=['POST'])\n@login_required\ndef lux_subject_variants():\n    \"\"\"LUX AI agent - Generate subject line variants\"\"\"\n    try:\n        from ai_agent import lux_agent\n        \n        data = request.get_json() or {}\n        objective = data.get('objective', 'Engage audience')\n        original_subject = data.get('original_subject')\n        \n        variants = lux_agent.generate_subject_line_variants(objective, original_subject)\n        \n        if variants:\n            return jsonify({\n                'success': True,\n                'variants': variants\n            })\n        else:\n            return jsonify({\n                'success': False,\n                'message': 'Unable to generate subject line variants'\n            }), 500\n            \n    except Exception as e:\n        logger.error(f\"LUX subject variants error: {e}\")\n        return jsonify({\n            'success': False,\n            'message': f'Error: {str(e)}'\n        }), 500\n\n@main_bp.route('/lux/recommendations')\n@login_required\ndef lux_recommendations():\n    \"\"\"LUX AI agent - Get campaign recommendations\"\"\"\n    try:\n        from ai_agent import lux_agent\n        from tracking import get_campaign_analytics\n        \n        # Gather data to pass to LUX agent (avoiding circular imports)\n        recent_campaigns = Campaign.query.order_by(Campaign.created_at.desc()).limit(5).all()\n        total_contacts = Contact.query.filter_by(is_active=True).count()\n        \n        campaign_data = []\n        for campaign in recent_campaigns:\n            analytics = get_campaign_analytics(campaign.id)\n            if analytics:\n                campaign_data.append({\n                    'name': campaign.name,\n                    'open_rate': analytics['open_rate'],\n                    'click_rate': analytics['click_rate'],\n                    'created_at': campaign.created_at.strftime('%Y-%m-%d') if campaign.created_at else ''\n                })\n        \n        recommendations = lux_agent.get_campaign_recommendations(campaign_data, total_contacts)\n        \n        if recommendations:\n            return jsonify({\n                'success': True,\n                'recommendations': recommendations\n            })\n        else:\n            return jsonify({\n                'success': False,\n                'message': 'Unable to generate recommendations'\n            }), 500\n            \n    except Exception as e:\n        logger.error(f\"LUX recommendations error: {e}\")\n        return jsonify({\n            'success': False,\n            'message': f'Error: {str(e)}'\n        }), 500\n\n@main_bp.route('/lux')\n@login_required\ndef lux_agent_dashboard():\n    \"\"\"LUX AI Agent dashboard\"\"\"\n    # Get recent campaigns for optimization selection\n    recent_campaigns = Campaign.query.filter(Campaign.sent_at.isnot(None)).order_by(Campaign.sent_at.desc()).limit(6).all()\n    \n    return render_template('lux_agent.html', recent_campaigns=recent_campaigns)\n\n@main_bp.route('/test-email', methods=['GET', 'POST'])\n@login_required\ndef test_email():\n    \"\"\"Test email sending functionality\"\"\"\n    if request.method == 'POST':\n        test_email_address = request.form.get('test_email', '').strip()\n        \n        if not test_email_address:\n            flash('Please enter a test email address', 'error')\n            return render_template('test_email.html')\n        \n        try:\n            from email_service import EmailService\n            email_service = EmailService()\n            \n            # Send test email\n            subject = \"LUX Email Marketing - Test Email\"\n            html_content = \"\"\"\n            <html>\n            <body style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n                <div style=\"background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); padding: 30px; text-align: center;\">\n                    <h1 style=\"color: white; margin: 0;\">✅ LUX Email Marketing</h1>\n                    <p style=\"color: white; margin: 10px 0 0 0;\">Email Test Successful!</p>\n                </div>\n                <div style=\"padding: 30px; background: #f8f9fa;\">\n                    <h2 style=\"color: #333;\">Email System Working</h2>\n                    <p style=\"color: #666; line-height: 1.6;\">\n                        Congratulations! Your LUX Email Marketing system is properly configured \n                        and able to send emails. This means:\n                    </p>\n                    <ul style=\"color: #666; line-height: 1.8;\">\n                        <li>✅ Microsoft Graph API connection is working</li>\n                        <li>✅ Email templates can be processed</li>\n                        <li>✅ Campaign emails will be delivered</li>\n                        <li>✅ Password reset emails will work</li>\n                    </ul>\n                    <p style=\"color: #666; line-height: 1.6;\">\n                        You can now confidently create and send email marketing campaigns!\n                    </p>\n                    <hr style=\"border: none; border-top: 1px solid #eee; margin: 30px 0;\">\n                    <p style=\"color: #999; font-size: 12px; text-align: center;\">\n                        LUX Email Marketing Platform - Test Email\n                    </p>\n                </div>\n            </body>\n            </html>\n            \"\"\"\n            \n            result = email_service.send_email(\n                to_email=test_email_address,\n                subject=subject,\n                html_content=html_content\n            )\n            \n            if result:\n                flash(f'✅ Test email sent successfully to {test_email_address}!', 'success')\n            else:\n                flash('❌ Failed to send test email. Please check your email configuration.', 'error')\n                \n        except Exception as e:\n            flash(f'❌ Error testing email: {str(e)}', 'error')\n    \n    return render_template('test_email.html')\n\n@main_bp.route('/lux/generate-image', methods=['POST'])\n@login_required\ndef lux_generate_image():\n    \"\"\"LUX AI agent - Generate campaign images with DALL-E\"\"\"\n    try:\n        from ai_agent import lux_agent\n        \n        data = request.get_json() or {}\n        description = data.get('description', 'Professional marketing campaign')\n        style = data.get('style', 'professional marketing')\n        \n        result = lux_agent.generate_campaign_image(description, style)\n        \n        if result:\n            return jsonify({\n                'success': True,\n                'image': result,\n                'message': 'Campaign image generated successfully'\n            })\n        else:\n            return jsonify({\n                'success': False,\n                'message': 'Unable to generate image. Please check your OpenAI configuration.'\n            }), 500\n            \n    except Exception as e:\n        logger.error(f\"LUX generate image error: {e}\")\n        return jsonify({\n            'success': False,\n            'message': f'Error: {str(e)}'\n        }), 500\n\n@main_bp.route('/lux/product-campaign', methods=['POST'])\n@login_required\ndef lux_product_campaign():\n    \"\"\"LUX AI agent - Create WooCommerce product campaign\"\"\"\n    try:\n        # Ensure no WooCommerce library conflicts\n        import sys\n        woo_modules = [mod for mod in sys.modules.keys() if 'woocommerce' in mod.lower()]\n        if woo_modules:\n            logging.warning(f\"Detected WooCommerce modules: {woo_modules}\")\n            # Remove any problematic WooCommerce modules\n            for mod in woo_modules:\n                if mod in sys.modules:\n                    del sys.modules[mod]\n        \n        from ai_agent import lux_agent\n        \n        data = request.get_json() or {}\n        \n        # WooCommerce configuration\n        woocommerce_config = {\n            'url': data.get('woocommerce_url', ''),\n            'consumer_key': data.get('consumer_key', ''),\n            'consumer_secret': data.get('consumer_secret', ''),\n            'product_limit': data.get('product_limit', 6)\n        }\n        \n        # Validate required WooCommerce fields\n        if not all([woocommerce_config['url'], woocommerce_config['consumer_key'], woocommerce_config['consumer_secret']]):\n            return jsonify({\n                'success': False,\n                'message': 'WooCommerce URL, Consumer Key, and Consumer Secret are required'\n            }), 400\n        \n        campaign_objective = data.get('objective', 'Promote our latest products')\n        product_filter = data.get('product_filter')  # Category filter\n        include_images = data.get('include_images', True)\n        \n        result = lux_agent.create_product_campaign(\n            woocommerce_config, \n            campaign_objective, \n            product_filter, \n            include_images\n        )\n        \n        if result:\n            # Create email template with product content\n            template = EmailTemplate()\n            template.name = f\"LUX Product Campaign - {result['campaign_name']}\"\n            template.subject = result['subject']\n            template.html_content = result['html_content']\n            db.session.add(template)\n            db.session.flush()\n            \n            # Create campaign\n            campaign = Campaign()\n            campaign.name = result['campaign_name']\n            campaign.subject = result['subject']\n            campaign.template_id = template.id\n            campaign.status = 'draft'\n            db.session.add(campaign)\n            db.session.flush()\n            \n            # Add recipients\n            contacts = Contact.query.filter_by(is_active=True).all()\n            for contact in contacts:\n                recipient = CampaignRecipient()\n                recipient.campaign_id = campaign.id\n                recipient.contact_id = contact.id\n                db.session.add(recipient)\n            \n            db.session.commit()\n            \n            return jsonify({\n                'success': True,\n                'campaign': {\n                    'id': campaign.id,\n                    'name': campaign.name,\n                    'subject': campaign.subject,\n                    'product_count': result['product_count'],\n                    'featured_products': result['featured_products'],\n                    'campaign_image': result['campaign_image'],\n                    'recipients_count': len(contacts)\n                },\n                'message': f'Product campaign created with {result[\"product_count\"]} products'\n            })\n        else:\n            return jsonify({\n                'success': False,\n                'message': 'Unable to create product campaign. Please check your WooCommerce API credentials.'\n            }), 500\n            \n    except Exception as e:\n        logger.error(f\"LUX product campaign error: {e}\")\n        return jsonify({\n            'success': False,\n            'message': f'Error: {str(e)}'\n        }), 500\n\n@main_bp.route('/lux/test-woocommerce', methods=['POST'])\n@login_required\ndef lux_test_woocommerce():\n    \"\"\"Test WooCommerce API connection\"\"\"\n    try:\n        from ai_agent import lux_agent\n        \n        data = request.get_json() or {}\n        \n        # Test connection by fetching a few products\n        products = lux_agent.fetch_woocommerce_products(\n            data.get('woocommerce_url', ''),\n            data.get('consumer_key', ''),\n            data.get('consumer_secret', ''),\n            product_limit=3\n        )\n        \n        if products:\n            return jsonify({\n                'success': True,\n                'message': f'Connected successfully! Found {len(products)} products.',\n                'sample_products': products[:3]\n            })\n        else:\n            return jsonify({\n                'success': False,\n                'message': 'Unable to connect to WooCommerce. Please check your API credentials and URL.'\n            }), 400\n            \n    except Exception as e:\n        error_msg = str(e)\n        logger.error(f\"WooCommerce test error: {e}\")\n        \n        # Handle specific error types\n        if \"proxies\" in error_msg or \"Client.__init__()\" in error_msg or \"woocommerce\" in error_msg.lower():\n            error_msg = \"WooCommerce library conflict detected. The system will use pure requests implementation instead. Please try again.\"\n        elif \"timeout\" in error_msg.lower():\n            error_msg = \"Connection timeout. Please check your WooCommerce store URL.\"\n        elif \"404\" in error_msg:\n            error_msg = \"WooCommerce API not found. Please check your store URL and ensure WooCommerce REST API is enabled.\"\n        elif \"401\" in error_msg or \"unauthorized\" in error_msg.lower():\n            error_msg = \"Invalid consumer key or secret. Please check your WooCommerce API credentials.\"\n        \n        return jsonify({\n            'success': False,\n            'message': f'Connection failed: {error_msg}'\n        }), 500\n\n# Drag & Drop Email Editor Routes\n@main_bp.route('/editor')\n@login_required\ndef drag_drop_editor():\n    \"\"\"Drag and drop email editor\"\"\"\n    brandkits = BrandKit.query.filter_by(is_default=True).first()\n    return render_template('drag_drop_editor.html', brandkit=brandkits)\n\n@main_bp.route('/editor/save', methods=['POST'])\n@login_required  \ndef save_drag_drop_template():\n    \"\"\"Save template from drag and drop editor\"\"\"\n    try:\n        name = request.form.get('name')\n        subject = request.form.get('subject')\n        html_content = request.form.get('html_content')\n        template_type = request.form.get('template_type', 'custom')\n        \n        if not name or not subject or not html_content:\n            return jsonify({'success': False, 'message': 'Missing required fields'})\n            \n        # Create new template\n        template = EmailTemplate()\n        template.name = name\n        template.subject = subject\n        template.html_content = html_content\n        template.template_type = template_type\n        \n        db.session.add(template)\n        db.session.commit()\n        \n        logger.info(f\"Template '{name}' saved successfully by user {current_user.username}\")\n        return jsonify({'success': True, 'template_id': template.id})\n        \n    except Exception as e:\n        logger.error(f\"Error saving template: {e}\")\n        db.session.rollback()\n        return jsonify({'success': False, 'message': str(e)})\n\n# AI Content Generation Routes\n@main_bp.route('/ai/generate-content', methods=['POST'])\n@login_required\ndef generate_ai_content():\n    \"\"\"Generate AI content for emails\"\"\"\n    try:\n        data = request.get_json()\n        prompt = data.get('prompt', '')\n        content_type = data.get('content_type', 'email_content')\n        \n        if not prompt:\n            return jsonify({'success': False, 'message': 'Prompt is required'})\n            \n        # Generate content using LUX AI agent\n        content_options = lux_agent.generate_email_content(prompt, content_type)\n        \n        return jsonify({'success': True, 'content': content_options})\n        \n    except Exception as e:\n        logger.error(f\"Error generating AI content: {e}\")\n        return jsonify({'success': False, 'message': str(e)})\n\n@main_bp.route('/ai/generate-subject-lines', methods=['POST'])\n@login_required\ndef generate_subject_lines():\n    \"\"\"Generate AI subject line suggestions\"\"\"\n    try:\n        data = request.get_json()\n        campaign_type = data.get('campaign_type', '')\n        audience = data.get('audience', '')\n        \n        subject_lines = lux_agent.generate_subject_lines(campaign_type, audience)\n        \n        return jsonify({'success': True, 'subject_lines': subject_lines})\n        \n    except Exception as e:\n        logger.error(f\"Error generating subject lines: {e}\")\n        return jsonify({'success': False, 'message': str(e)})\n\n# BrandKit Management Routes\n@main_bp.route('/brandkit')\n@login_required\ndef brandkit_management():\n    \"\"\"BrandKit management page\"\"\"\n    brandkits = BrandKit.query.all()\n    return render_template('brandkit.html', brandkits=brandkits)\n\n@main_bp.route('/brandkit/create', methods=['POST'])\n@login_required\ndef create_brandkit():\n    \"\"\"Create new BrandKit\"\"\"\n    try:\n        name = request.form.get('name')\n        logo_url = request.form.get('logo_url')\n        primary_color = request.form.get('primary_color')\n        secondary_color = request.form.get('secondary_color')\n        accent_color = request.form.get('accent_color')\n        primary_font = request.form.get('primary_font')\n        secondary_font = request.form.get('secondary_font')\n        \n        brandkit = BrandKit()\n        brandkit.name = name\n        brandkit.logo_url = logo_url\n        brandkit.primary_color = primary_color\n        brandkit.secondary_color = secondary_color\n        brandkit.accent_color = accent_color\n        brandkit.primary_font = primary_font\n        brandkit.secondary_font = secondary_font\n        \n        db.session.add(brandkit)\n        db.session.commit()\n        \n        flash('BrandKit created successfully!', 'success')\n        return redirect(url_for('main.brandkit_management'))\n        \n    except Exception as e:\n        logger.error(f\"Error creating BrandKit: {e}\")\n        flash('Error creating BrandKit', 'error')\n        return redirect(url_for('main.brandkit_management'))\n\n# Poll and Survey Routes\n@main_bp.route('/polls')\n@login_required\ndef polls_management():\n    \"\"\"Polls and surveys management\"\"\"\n    polls = Poll.query.filter_by(is_active=True).all()\n    return render_template('polls.html', polls=polls)\n\n@main_bp.route('/polls/create', methods=['POST'])\n@login_required\ndef create_poll():\n    \"\"\"Create new poll\"\"\"\n    try:\n        question = request.form.get('question')\n        poll_type = request.form.get('poll_type', 'multiple_choice')\n        options = request.form.getlist('options[]')\n        \n        poll = Poll()\n        poll.question = question\n        poll.poll_type = poll_type\n        poll.options = options\n        \n        db.session.add(poll)\n        db.session.commit()\n        \n        flash('Poll created successfully!', 'success')\n        return redirect(url_for('main.polls_management'))\n        \n    except Exception as e:\n        logger.error(f\"Error creating poll: {e}\")\n        flash('Error creating poll', 'error')\n        return redirect(url_for('main.polls_management'))\n\n@main_bp.route('/polls/<int:poll_id>/respond', methods=['POST'])\ndef respond_to_poll(poll_id):\n    \"\"\"Submit poll response (public endpoint)\"\"\"\n    try:\n        poll = Poll.query.get_or_404(poll_id)\n        contact_id = request.form.get('contact_id')\n        response_data = request.form.get('response_data')\n        \n        if contact_id and response_data:\n            poll_response = PollResponse()\n            poll_response.poll_id = poll_id\n            poll_response.contact_id = contact_id\n            poll_response.response_data = json.loads(response_data)\n            \n            db.session.add(poll_response)\n            db.session.commit()\n            \n        return jsonify({'success': True})\n        \n    except Exception as e:\n        logger.error(f\"Error submitting poll response: {e}\")\n        return jsonify({'success': False, 'message': str(e)})\n\n# A/B Testing Routes\n@main_bp.route('/ab-tests')\n@login_required\ndef ab_tests():\n    \"\"\"A/B testing management\"\"\"\n    tests = ABTest.query.all()\n    draft_campaigns = Campaign.query.filter_by(status='draft').all()\n    return render_template('ab_tests.html', tests=tests, draft_campaigns=draft_campaigns)\n\n@main_bp.route('/ab-tests/create', methods=['POST'])\n@login_required\ndef create_ab_test():\n    \"\"\"Create new A/B test\"\"\"\n    try:\n        campaign_id = request.form.get('campaign_id')\n        test_type = request.form.get('test_type', 'subject_line')\n        variant_a = request.form.get('variant_a')\n        variant_b = request.form.get('variant_b')\n        split_ratio = float(request.form.get('split_ratio', 0.5))\n        \n        if not campaign_id or not variant_a or not variant_b:\n            flash('Campaign, Variant A, and Variant B are required', 'error')\n            return redirect(url_for('main.ab_tests'))\n        \n        # Validate campaign exists\n        campaign = Campaign.query.get(campaign_id)\n        if not campaign:\n            flash('Selected campaign not found', 'error')\n            return redirect(url_for('main.ab_tests'))\n        \n        ab_test = ABTest()\n        ab_test.campaign_id = campaign_id\n        ab_test.test_type = test_type\n        ab_test.variant_a = variant_a\n        ab_test.variant_b = variant_b\n        ab_test.split_ratio = split_ratio\n        ab_test.status = 'draft'\n        \n        db.session.add(ab_test)\n        db.session.commit()\n        \n        flash('A/B test created successfully!', 'success')\n        return redirect(url_for('main.ab_tests'))\n        \n    except Exception as e:\n        logger.error(f\"Error creating A/B test: {e}\")\n        db.session.rollback()\n        flash('Error creating A/B test', 'error')\n        return redirect(url_for('main.ab_tests'))\n\n# Contact Segmentation Routes\n@main_bp.route('/segments')\n@login_required\ndef segments():\n    \"\"\"Contact segmentation management\"\"\"\n    segments = Segment.query.all()\n    return render_template('segments.html', segments=segments)\n\n@main_bp.route('/segments/create', methods=['POST'])\n@login_required\ndef create_segment():\n    \"\"\"Create new contact segment\"\"\"\n    try:\n        name = request.form.get('name')\n        description = request.form.get('description')\n        segment_type = request.form.get('segment_type', 'behavioral')\n        conditions = request.form.get('conditions')\n        is_dynamic = request.form.get('is_dynamic') == 'on'\n        \n        segment = Segment()\n        segment.name = name\n        segment.description = description\n        segment.segment_type = segment_type\n        segment.conditions = json.loads(conditions) if conditions else {}\n        segment.is_dynamic = is_dynamic\n        \n        db.session.add(segment)\n        db.session.commit()\n        \n        flash('Segment created successfully!', 'success')\n        return redirect(url_for('main.segments'))\n        \n    except Exception as e:\n        logger.error(f\"Error creating segment: {e}\")\n        flash('Error creating segment', 'error')\n        return redirect(url_for('main.segments'))\n\n# Social Media Management Routes\n@main_bp.route('/social')\n@login_required\ndef social_media():\n    \"\"\"Social media management dashboard\"\"\"\n    posts = SocialPost.query.order_by(SocialPost.created_at.desc()).limit(20).all()\n    return render_template('social_media.html', posts=posts)\n\n@main_bp.route('/social/create', methods=['POST'])\n@login_required\ndef create_social_post():\n    \"\"\"Create new social media post\"\"\"\n    try:\n        content = request.form.get('content')\n        platforms = request.form.getlist('platforms[]')\n        scheduled_at = request.form.get('scheduled_at')\n        \n        post = SocialPost()\n        post.content = content\n        post.platforms = platforms\n        post.scheduled_at = datetime.fromisoformat(scheduled_at) if scheduled_at else None\n        \n        db.session.add(post)\n        db.session.commit()\n        \n        flash('Social media post created successfully!', 'success')\n        return redirect(url_for('main.social_media'))\n        \n    except Exception as e:\n        logger.error(f\"Error creating social post: {e}\")\n        flash('Error creating social post', 'error')\n        return redirect(url_for('main.social_media'))\n\n# Advanced Automation Management Routes\n@main_bp.route('/automations')\n@login_required\ndef automation_dashboard():\n    \"\"\"Advanced automation management dashboard\"\"\"\n    automations = Automation.query.all()\n    templates = AutomationTemplate.query.filter_by(is_predefined=True).all()\n    active_executions = AutomationExecution.query.filter_by(status='active').count()\n    \n    return render_template('automation_dashboard.html', \n                         automations=automations, \n                         templates=templates,\n                         active_executions=active_executions)\n\n@main_bp.route('/automations/create', methods=['GET', 'POST'])\n@login_required\ndef create_automation():\n    \"\"\"Create new automation workflow\"\"\"\n    if request.method == 'POST':\n        try:\n            name = request.form.get('name')\n            description = request.form.get('description')\n            trigger_type = request.form.get('trigger_type')\n            trigger_conditions = request.form.get('trigger_conditions')\n            \n            automation = Automation()\n            automation.name = name\n            automation.description = description\n            automation.trigger_type = trigger_type\n            automation.trigger_conditions = json.loads(trigger_conditions) if trigger_conditions else {}\n            \n            db.session.add(automation)\n            db.session.commit()\n            \n            flash('Automation workflow created successfully!', 'success')\n            return redirect(url_for('main.edit_automation', id=automation.id))\n            \n        except Exception as e:\n            logger.error(f\"Error creating automation: {e}\")\n            flash('Error creating automation workflow', 'error')\n            return redirect(url_for('main.automation_dashboard'))\n    \n    templates = AutomationTemplate.query.filter_by(is_predefined=True).all()\n    email_templates = EmailTemplate.query.all()\n    return render_template('create_automation.html', templates=templates, email_templates=email_templates)\n\n@main_bp.route('/automations/<int:id>/edit', methods=['GET', 'POST'])\n@login_required\ndef edit_automation(id):\n    \"\"\"Edit automation workflow with visual builder\"\"\"\n    automation = Automation.query.get_or_404(id)\n    \n    if request.method == 'POST':\n        try:\n            # Update automation details\n            automation.name = request.form.get('name')\n            automation.description = request.form.get('description')\n            automation.trigger_type = request.form.get('trigger_type')\n            trigger_conditions = request.form.get('trigger_conditions')\n            automation.trigger_conditions = json.loads(trigger_conditions) if trigger_conditions else {}\n            \n            # Update steps from visual builder\n            steps_data = request.form.get('steps_data')\n            if steps_data:\n                steps = json.loads(steps_data)\n                \n                # Delete existing steps\n                AutomationStep.query.filter_by(automation_id=id).delete()\n                \n                # Create new steps\n                for i, step_data in enumerate(steps):\n                    step = AutomationStep()\n                    step.automation_id = id\n                    step.step_type = step_data.get('type')\n                    step.step_order = i\n                    step.template_id = step_data.get('template_id')\n                    step.delay_hours = step_data.get('delay_hours', 0)\n                    step.conditions = step_data.get('conditions', {})\n                    \n                    db.session.add(step)\n            \n            db.session.commit()\n            flash('Automation updated successfully!', 'success')\n            return redirect(url_for('main.automation_dashboard'))\n            \n        except Exception as e:\n            logger.error(f\"Error updating automation: {e}\")\n            db.session.rollback()\n            flash('Error updating automation', 'error')\n    \n    steps = AutomationStep.query.filter_by(automation_id=id).order_by(AutomationStep.step_order).all()\n    email_templates = EmailTemplate.query.all()\n    executions = AutomationExecution.query.filter_by(automation_id=id).limit(10).all()\n    \n    return render_template('edit_automation.html', \n                         automation=automation, \n                         steps=steps,\n                         email_templates=email_templates,\n                         executions=executions)\n\n@main_bp.route('/automations/<int:id>/toggle', methods=['POST'])\n@login_required\ndef toggle_automation(id):\n    \"\"\"Enable/disable automation workflow\"\"\"\n    try:\n        automation = Automation.query.get_or_404(id)\n        automation.is_active = not automation.is_active\n        db.session.commit()\n        \n        status = 'activated' if automation.is_active else 'deactivated'\n        flash(f'Automation {status} successfully!', 'success')\n        \n        return jsonify({'success': True, 'is_active': automation.is_active})\n    except Exception as e:\n        logger.error(f\"Error toggling automation: {e}\")\n        return jsonify({'success': False, 'message': str(e)})\n\n@main_bp.route('/automation-templates')\n@login_required\ndef automation_templates():\n    \"\"\"Automation template library\"\"\"\n    predefined = AutomationTemplate.query.filter_by(is_predefined=True).all()\n    custom = AutomationTemplate.query.filter_by(is_predefined=False).all()\n    \n    return render_template('automation_templates.html', \n                         predefined_templates=predefined,\n                         custom_templates=custom)\n\n@main_bp.route('/automation-templates/create-from-template/<int:template_id>')\n@login_required\ndef create_from_template(template_id):\n    \"\"\"Create automation from predefined template\"\"\"\n    try:\n        template = AutomationTemplate.query.get_or_404(template_id)\n        template_data = template.template_data\n        \n        # Create automation from template\n        automation = Automation()\n        automation.name = f\"{template.name} - Copy\"\n        automation.description = template.description\n        automation.trigger_type = template_data.get('trigger_type', 'custom')\n        automation.trigger_conditions = template_data.get('trigger_conditions', {})\n        \n        db.session.add(automation)\n        db.session.flush()\n        \n        # Create steps from template\n        for i, step_data in enumerate(template_data.get('steps', [])):\n            step = AutomationStep()\n            step.automation_id = automation.id\n            step.step_type = step_data.get('type')\n            step.step_order = i\n            step.delay_hours = step_data.get('delay_hours', 0)\n            step.conditions = step_data.get('conditions', {})\n            \n            db.session.add(step)\n        \n        # Update usage count\n        template.usage_count += 1\n        \n        db.session.commit()\n        \n        flash(f'Created automation from template: {template.name}', 'success')\n        return redirect(url_for('main.edit_automation', id=automation.id))\n        \n    except Exception as e:\n        logger.error(f\"Error creating from template: {e}\")\n        flash('Error creating automation from template', 'error')\n        return redirect(url_for('main.automation_templates'))\n\n@main_bp.route('/automation-analytics')\n@login_required\ndef automation_analytics():\n    \"\"\"Automation performance analytics\"\"\"\n    total_automations = Automation.query.count()\n    active_automations = Automation.query.filter_by(is_active=True).count()\n    total_executions = AutomationExecution.query.count()\n    completed_executions = AutomationExecution.query.filter_by(status='completed').count()\n    \n    # Recent execution data\n    recent_executions = AutomationExecution.query.order_by(AutomationExecution.started_at.desc()).limit(20).all()\n    \n    # Performance by automation\n    automation_stats = []\n    for automation in Automation.query.all():\n        executions = AutomationExecution.query.filter_by(automation_id=automation.id)\n        total = executions.count()\n        completed = executions.filter_by(status='completed').count()\n        completion_rate = (completed / total * 100) if total > 0 else 0\n        \n        automation_stats.append({\n            'automation': automation,\n            'total_executions': total,\n            'completed': completed,\n            'completion_rate': completion_rate\n        })\n    \n    return render_template('automation_analytics.html',\n                         total_automations=total_automations,\n                         active_automations=active_automations,\n                         total_executions=total_executions,\n                         completed_executions=completed_executions,\n                         recent_executions=recent_executions,\n                         automation_stats=automation_stats)\n\n# Non-Opener Resend Feature\n@main_bp.route('/campaigns/<int:campaign_id>/resend-non-openers', methods=['GET', 'POST'])\n@login_required\ndef setup_non_opener_resend(campaign_id):\n    \"\"\"Set up automatic resend to non-openers\"\"\"\n    campaign = Campaign.query.get_or_404(campaign_id)\n    \n    if request.method == 'POST':\n        try:\n            hours_after = int(request.form.get('hours_after', 24))\n            new_subject = request.form.get('new_subject_line')\n            \n            resend = NonOpenerResend()\n            resend.original_campaign_id = campaign_id\n            resend.hours_after_original = hours_after\n            resend.new_subject_line = new_subject\n            resend.scheduled_at = campaign.sent_at + timedelta(hours=hours_after) if campaign.sent_at else None\n            \n            db.session.add(resend)\n            db.session.commit()\n            \n            flash('Non-opener resend scheduled successfully!', 'success')\n            return redirect(url_for('main.campaign_details', id=campaign_id))\n            \n        except Exception as e:\n            logger.error(f\"Error setting up resend: {e}\")\n            flash('Error setting up resend', 'error')\n    \n    return render_template('setup_non_opener_resend.html', campaign=campaign)\n\n# Web Forms & Landing Pages Routes\n@main_bp.route('/forms')\n@login_required\ndef forms_dashboard():\n    \"\"\"Web forms management dashboard\"\"\"\n    forms = WebForm.query.all()\n    total_submissions = FormSubmission.query.count()\n    \n    return render_template('forms_dashboard.html', forms=forms, total_submissions=total_submissions)\n\n@main_bp.route('/forms/create', methods=['GET', 'POST'])\n@login_required\ndef create_web_form():\n    \"\"\"Create new web signup form\"\"\"\n    if request.method == 'POST':\n        try:\n            name = request.form.get('name')\n            title = request.form.get('title')\n            description = request.form.get('description')\n            fields_data = request.form.get('fields_data')\n            success_message = request.form.get('success_message')\n            redirect_url = request.form.get('redirect_url')\n            \n            form = WebForm()\n            form.name = name\n            form.title = title\n            form.description = description\n            form.fields = json.loads(fields_data) if fields_data else []\n            form.success_message = success_message\n            form.redirect_url = redirect_url\n            \n            db.session.add(form)\n            db.session.commit()\n            \n            flash('Web form created successfully!', 'success')\n            return redirect(url_for('main.forms_dashboard'))\n            \n        except Exception as e:\n            logger.error(f\"Error creating form: {e}\")\n            flash('Error creating web form', 'error')\n    \n    return render_template('create_web_form.html')\n\n@main_bp.route('/forms/<int:id>/embed-code')\n@login_required\ndef form_embed_code(id):\n    \"\"\"Get embed code for web form\"\"\"\n    form = WebForm.query.get_or_404(id)\n    \n    embed_html = f\"\"\"\n<div id=\"lux-form-{form.id}\"></div>\n<script>\n(function() {{\n    var script = document.createElement('script');\n    script.src = '{request.url_root}static/js/form-embed.js';\n    script.onload = function() {{\n        LuxForm.render({form.id}, 'lux-form-{form.id}');\n    }};\n    document.head.appendChild(script);\n}})();\n</script>\n    \"\"\"\n    \n    return jsonify({'embed_code': embed_html})\n\n@main_bp.route('/landing-pages')\n@login_required\ndef landing_pages():\n    \"\"\"Landing pages management\"\"\"\n    pages = LandingPage.query.all()\n    forms = WebForm.query.all()\n    \n    return render_template('landing_pages.html', pages=pages, forms=forms)\n\n@main_bp.route('/landing-pages/create', methods=['GET', 'POST'])\n@login_required\ndef create_landing_page():\n    \"\"\"Create new landing page\"\"\"\n    if request.method == 'POST':\n        try:\n            name = request.form.get('name')\n            title = request.form.get('title')\n            slug = request.form.get('slug')\n            html_content = request.form.get('html_content')\n            css_styles = request.form.get('css_styles')\n            meta_description = request.form.get('meta_description')\n            form_id = request.form.get('form_id') or None\n            \n            page = LandingPage()\n            page.name = name\n            page.title = title\n            page.slug = slug\n            page.html_content = html_content\n            page.css_styles = css_styles\n            page.meta_description = meta_description\n            page.form_id = int(form_id) if form_id else None\n            \n            db.session.add(page)\n            db.session.commit()\n            \n            flash('Landing page created successfully!', 'success')\n            return redirect(url_for('main.landing_pages'))\n            \n        except Exception as e:\n            logger.error(f\"Error creating landing page: {e}\")\n            flash('Error creating landing page', 'error')\n    \n    forms = WebForm.query.all()\n    return render_template('create_landing_page.html', forms=forms)\n\n@main_bp.route('/newsletter-archive')\ndef newsletter_archive():\n    \"\"\"Public newsletter archive\"\"\"\n    newsletters = NewsletterArchive.query.filter_by(is_public=True).order_by(NewsletterArchive.published_at.desc()).all()\n    \n    return render_template('newsletter_archive_public.html', newsletters=newsletters)\n\n@main_bp.route('/newsletter-archive/<slug>')\ndef view_newsletter(slug):\n    \"\"\"View individual newsletter\"\"\"\n    newsletter = NewsletterArchive.query.filter_by(slug=slug, is_public=True).first_or_404()\n    \n    # Increment view count\n    newsletter.view_count += 1\n    db.session.commit()\n    \n    return render_template('newsletter_view.html', newsletter=newsletter)\n\n# SMS Marketing Routes\n@main_bp.route('/sms')\n@login_required\ndef sms_campaigns():\n    \"\"\"SMS marketing campaigns dashboard\"\"\"\n    campaigns = SMSCampaign.query.order_by(SMSCampaign.created_at.desc()).all()\n    \n    from sms_service import SMSService\n    sms_service = SMSService()\n    \n    return render_template('sms_campaigns.html', \n                         campaigns=campaigns,\n                         sms_enabled=sms_service.enabled)\n\n@main_bp.route('/sms/create', methods=['GET', 'POST'])\n@login_required\ndef create_sms_campaign():\n    \"\"\"Create new SMS campaign\"\"\"\n    if request.method == 'POST':\n        try:\n            from sms_service import SMSService\n            sms_service = SMSService()\n            \n            if not sms_service.enabled:\n                flash('SMS service not configured. Please add Twilio credentials.', 'error')\n                return redirect(url_for('main.sms_campaigns'))\n            \n            name = request.form.get('name')\n            message = request.form.get('message')\n            tags = request.form.get('tags', '').split(',')\n            tags = [t.strip() for t in tags if t.strip()]\n            \n            # Validate message length (160 chars for single SMS)\n            if len(message) > 160:\n                flash('Warning: Message exceeds 160 characters and will be sent as multiple SMS', 'warning')\n            \n            # Create campaign\n            campaign = SMSCampaign()\n            campaign.name = name\n            campaign.message = message[:160]  # Truncate to SMS limit\n            campaign.status = 'draft'\n            \n            db.session.add(campaign)\n            db.session.flush()\n            \n            # Add recipients based on tags\n            if tags:\n                if 'all' in tags:\n                    contacts = Contact.query.filter_by(is_active=True).filter(Contact.phone.isnot(None)).all()\n                else:\n                    contacts = Contact.query.filter_by(is_active=True).filter(Contact.phone.isnot(None)).all()\n                    contacts = [c for c in contacts if c.tags and any(tag in c.tags for tag in tags)]\n            else:\n                contacts = Contact.query.filter_by(is_active=True).filter(Contact.phone.isnot(None)).all()\n            \n            for contact in contacts:\n                if contact.phone and sms_service.validate_phone_number(contact.phone):\n                    recipient = SMSRecipient()\n                    recipient.campaign_id = campaign.id\n                    recipient.contact_id = contact.id\n                    recipient.status = 'pending'\n                    db.session.add(recipient)\n            \n            db.session.commit()\n            \n            flash(f'SMS campaign created with {len(contacts)} recipients!', 'success')\n            return redirect(url_for('main.sms_campaigns'))\n            \n        except Exception as e:\n            logger.error(f\"Error creating SMS campaign: {e}\")\n            db.session.rollback()\n            flash('Error creating SMS campaign', 'error')\n    \n    contacts_with_phone = Contact.query.filter_by(is_active=True).filter(Contact.phone.isnot(None)).count()\n    return render_template('create_sms_campaign.html', contacts_with_phone=contacts_with_phone)\n\n@main_bp.route('/sms/<int:campaign_id>/send', methods=['POST'])\n@login_required\ndef send_sms_campaign(campaign_id):\n    \"\"\"Send SMS campaign\"\"\"\n    try:\n        from sms_service import SMSService\n        from datetime import datetime\n        \n        campaign = SMSCampaign.query.get_or_404(campaign_id)\n        \n        if campaign.status not in ['draft', 'scheduled']:\n            flash('Campaign cannot be sent in current status', 'error')\n            return redirect(url_for('main.sms_campaigns'))\n        \n        sms_service = SMSService()\n        if not sms_service.enabled:\n            flash('SMS service not configured', 'error')\n            return redirect(url_for('main.sms_campaigns'))\n        \n        # Update campaign status\n        campaign.status = 'sending'\n        campaign.sent_at = datetime.utcnow()\n        db.session.commit()\n        \n        # Send to all pending recipients\n        recipients = SMSRecipient.query.filter_by(\n            campaign_id=campaign_id,\n            status='pending'\n        ).all()\n        \n        sent = 0\n        failed = 0\n        \n        for recipient in recipients:\n            contact = Contact.query.get(recipient.contact_id)\n            if not contact or not contact.phone:\n                recipient.status = 'failed'\n                recipient.error_message = 'No phone number'\n                failed += 1\n                continue\n            \n            result = sms_service.send_sms(contact.phone, campaign.message)\n            \n            if result['success']:\n                recipient.status = 'sent'\n                recipient.sent_at = datetime.utcnow()\n                sent += 1\n            else:\n                recipient.status = 'failed'\n                recipient.error_message = result.get('error', 'Unknown error')\n                failed += 1\n            \n            db.session.commit()\n        \n        campaign.status = 'sent'\n        db.session.commit()\n        \n        flash(f'SMS campaign sent! {sent} sent, {failed} failed', 'success' if failed == 0 else 'warning')\n        \n    except Exception as e:\n        logger.error(f\"Error sending SMS campaign: {e}\")\n        flash('Error sending SMS campaign', 'error')\n    \n    return redirect(url_for('main.sms_campaigns'))\n\n# SEO Tools Routes\n@main_bp.route('/seo')\n@login_required\ndef seo_tools():\n    \"\"\"SEO analysis and optimization tools\"\"\"\n    return render_template('seo_tools.html')\n\n@main_bp.route('/seo/analyze', methods=['POST'])\n@login_required\ndef analyze_seo():\n    \"\"\"Analyze a URL for SEO\"\"\"\n    try:\n        url = request.form.get('url')\n        \n        if not url:\n            flash('Please enter a URL to analyze', 'error')\n            return redirect(url_for('main.seo_tools'))\n        \n        # Ensure URL has a protocol\n        if not url.startswith(('http://', 'https://')):\n            url = 'https://' + url\n        \n        result = seo_service.analyze_page(url)\n        \n        if result['success']:\n            return render_template('seo_results.html', analysis=result['data'])\n        else:\n            flash(f'Error analyzing URL: {result[\"error\"]}', 'error')\n            return redirect(url_for('main.seo_tools'))\n        \n    except Exception as e:\n        logger.error(f\"Error in SEO analysis: {e}\")\n        flash('Error analyzing URL', 'error')\n        return redirect(url_for('main.seo_tools'))\n","size_bytes":89082},"monitoring.sh":{"content":"#!/bin/bash\n\n# Monitoring script for Email Marketing App\n# Can be run as a cron job to monitor application health\n\nAPP_NAME=\"email-marketing\"\nLOG_FILE=\"/var/log/$APP_NAME/monitoring.log\"\nHEALTH_URL=\"http://localhost:5000/health\"\n\n# Function to log with timestamp\nlog_message() {\n    echo \"$(date '+%Y-%m-%d %H:%M:%S') - $1\" >> \"$LOG_FILE\"\n}\n\n# Check if application is running\nif ! systemctl is-active --quiet \"$APP_NAME\"; then\n    log_message \"ERROR: Application service is not running\"\n    echo \"Application is down. Attempting to restart...\"\n    systemctl restart \"$APP_NAME\"\n    sleep 10\n    \n    if systemctl is-active --quiet \"$APP_NAME\"; then\n        log_message \"INFO: Successfully restarted application\"\n    else\n        log_message \"CRITICAL: Failed to restart application\"\n        exit 1\n    fi\nfi\n\n# Check application health endpoint\nif curl -f -s \"$HEALTH_URL\" > /dev/null; then\n    log_message \"INFO: Health check passed\"\nelse\n    log_message \"WARNING: Health check failed\"\n    echo \"Health check failed. Restarting application...\"\n    systemctl restart \"$APP_NAME\"\nfi\n\n# Check disk space (alert if over 85%)\nDISK_USAGE=$(df / | tail -1 | awk '{print $5}' | sed 's/%//')\nif [ \"$DISK_USAGE\" -gt 85 ]; then\n    log_message \"WARNING: Disk usage is ${DISK_USAGE}%\"\nfi\n\n# Check memory usage (alert if over 90%)\nMEMORY_USAGE=$(free | grep Mem | awk '{printf(\"%.0f\", $3/$2 * 100.0)}')\nif [ \"$MEMORY_USAGE\" -gt 90 ]; then\n    log_message \"WARNING: Memory usage is ${MEMORY_USAGE}%\"\nfi\n\nlog_message \"INFO: Monitoring check completed\"","size_bytes":1537},"main.py":{"content":"from app import app\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000, debug=True)\n","size_bytes":99},"deploy-to-vps.sh":{"content":"#!/bin/bash\n\n# Deployment script for lux.lucifercruz.com\n# Run this locally to deploy to your VPS\n\nVPS_IP=\"194.195.92.52\"\nDOMAIN=\"lux.lucifercruz.com\"\nPACKAGE_FILE=\"email-marketing-app-20250821_005020.tar.gz\"\n\necho \"=== Deploying Email Marketing App to lux.lucifercruz.com ===\"\necho \"\"\n\n# Check if package exists\nif [ ! -f \"$PACKAGE_FILE\" ]; then\n    echo \"Error: Package file $PACKAGE_FILE not found!\"\n    echo \"Run ./create-deployment-package.sh first\"\n    exit 1\nfi\n\necho \"Step 1: Uploading files to VPS...\"\nscp \"$PACKAGE_FILE\" \"root@$VPS_IP:/root/\"\n\necho \"\"\necho \"Step 2: Connecting to VPS and running deployment...\"\n\nssh \"root@$VPS_IP\" << 'REMOTE_SCRIPT'\ncd /root\n\n# Extract the package\necho \"Extracting deployment package...\"\ntar -xzf email-marketing-app-*.tar.gz\ncd email-marketing-app-*\n\n# Make scripts executable\nchmod +x *.sh\n\n# Run the deployment\necho \"Starting automated deployment...\"\n./deploy.sh\n\n# Configure domain\necho \"Configuring domain for lux.lucifercruz.com...\"\nsed -i 's/your_domain.com www.your_domain.com/lux.lucifercruz.com www.lux.lucifercruz.com/g' /etc/nginx/sites-available/email-marketing\n\n# Test nginx configuration\nnginx -t\n\n# Restart services\nsystemctl restart email-marketing nginx\n\necho \"\"\necho \"=== Basic Deployment Complete ===\"\necho \"\"\necho \"Next steps:\"\necho \"1. Configure API credentials in /opt/email-marketing/.env\"\necho \"2. Set up SSL certificate\"\necho \"3. Test the application\"\n\nREMOTE_SCRIPT\n\necho \"\"\necho \"=== Deployment script completed ===\"\necho \"\"\necho \"Your app should now be running at:\"\necho \"  http://lux.lucifercruz.com\"\necho \"\"\necho \"To set up SSL certificate, run:\"\necho \"  ssh root@$VPS_IP\"\necho \"  cd /root/email-marketing-app-*\"\necho \"  ./ssl-setup.sh lux.lucifercruz.com\"\necho \"\"\necho \"To configure API keys:\"\necho \"  ssh root@$VPS_IP\"\necho \"  nano /opt/email-marketing/.env\"\necho \"\"","size_bytes":1843},"deploy.sh":{"content":"#!/bin/bash\n\n# Email Marketing Automation App - Deployment Script for Debian 12\n# Run this script as root or with sudo\n\nset -e\n\nAPP_NAME=\"email-marketing\"\nAPP_USER=\"email-marketing\"\nAPP_DIR=\"/opt/$APP_NAME\"\nVENV_DIR=\"$APP_DIR/venv\"\nLOG_DIR=\"/var/log/$APP_NAME\"\n\necho \"=== Email Marketing App Deployment Script ===\"\necho \"Setting up application on Debian 12...\"\n\n# Update system packages\necho \"Updating system packages...\"\napt update && apt upgrade -y\n\n# Install required system packages\necho \"Installing system dependencies...\"\napt install -y python3 python3-pip python3-venv nginx postgresql postgresql-contrib supervisor git curl\n\n# Create application user\necho \"Creating application user...\"\nif ! id \"$APP_USER\" &>/dev/null; then\n    adduser --system --group --home \"$APP_DIR\" --disabled-password \"$APP_USER\"\nfi\n\n# Create directories\necho \"Creating directories...\"\nmkdir -p \"$APP_DIR\" \"$LOG_DIR\"\nchown \"$APP_USER:$APP_USER\" \"$APP_DIR\" \"$LOG_DIR\"\n\n# Setup PostgreSQL database\necho \"Setting up PostgreSQL database...\"\nsudo -u postgres psql -c \"CREATE USER $APP_USER WITH PASSWORD 'secure_password_change_me';\" || true\nsudo -u postgres psql -c \"CREATE DATABASE ${APP_NAME}_db OWNER $APP_USER;\" || true\nsudo -u postgres psql -c \"GRANT ALL PRIVILEGES ON DATABASE ${APP_NAME}_db TO $APP_USER;\" || true\n\n# Copy application files (assumes files are in current directory)\necho \"Copying application files...\"\ncp -r ./* \"$APP_DIR/\"\nchown -R \"$APP_USER:$APP_USER\" \"$APP_DIR\"\n\n# Create Python virtual environment\necho \"Setting up Python virtual environment...\"\nsudo -u \"$APP_USER\" python3 -m venv \"$VENV_DIR\"\nsudo -u \"$APP_USER\" \"$VENV_DIR/bin/pip\" install --upgrade pip\n\n# Install Python dependencies\necho \"Installing Python dependencies...\"\nsudo -u \"$APP_USER\" \"$VENV_DIR/bin/pip\" install -r \"$APP_DIR/deploy_requirements.txt\"\n\n# Create environment configuration\necho \"Creating environment configuration...\"\ncat > \"$APP_DIR/.env\" << EOL\n# Production Environment Configuration\nFLASK_ENV=production\nDATABASE_URL=postgresql://$APP_USER:secure_password_change_me@localhost/${APP_NAME}_db\nSESSION_SECRET=$(openssl rand -hex 32)\n\n# Microsoft Graph API Configuration (Update these with your values)\nMS_CLIENT_ID=your_client_id_here\nMS_CLIENT_SECRET=your_client_secret_here\nMS_TENANT_ID=your_tenant_id_here\n\n# OpenAI Configuration (Optional)\nOPENAI_API_KEY=your_openai_api_key_here\nEOL\n\nchown \"$APP_USER:$APP_USER\" \"$APP_DIR/.env\"\nchmod 600 \"$APP_DIR/.env\"\n\necho \"=== IMPORTANT: Update the .env file with your actual credentials ===\"\necho \"Edit $APP_DIR/.env and add your:\"\necho \"  - Microsoft Graph API credentials\"\necho \"  - OpenAI API key (optional)\"\necho \"  - Change the PostgreSQL password\"\necho \"\"\n\n# Create systemd service\necho \"Creating systemd service...\"\ncat > /etc/systemd/system/$APP_NAME.service << EOL\n[Unit]\nDescription=Email Marketing Automation App\nAfter=network.target postgresql.service\n\n[Service]\nType=exec\nUser=$APP_USER\nGroup=$APP_USER\nWorkingDirectory=$APP_DIR\nEnvironment=PATH=$VENV_DIR/bin\nEnvironmentFile=$APP_DIR/.env\nExecStart=$VENV_DIR/bin/gunicorn --config gunicorn.conf.py wsgi:app\nExecReload=/bin/kill -s HUP \\$MAINPID\nRestart=always\nRestartSec=3\n\n[Install]\nWantedBy=multi-user.target\nEOL\n\n# Configure Nginx\necho \"Configuring Nginx...\"\ncat > /etc/nginx/sites-available/$APP_NAME << EOL\nserver {\n    listen 80;\n    server_name your_domain.com www.your_domain.com;\n\n    # Security headers\n    add_header X-Frame-Options \"SAMEORIGIN\" always;\n    add_header X-XSS-Protection \"1; mode=block\" always;\n    add_header X-Content-Type-Options \"nosniff\" always;\n    add_header Referrer-Policy \"no-referrer-when-downgrade\" always;\n    add_header Content-Security-Policy \"default-src 'self' http: https: data: blob: 'unsafe-inline'\" always;\n\n    # Static files\n    location /static {\n        alias $APP_DIR/static;\n        expires 1y;\n        add_header Cache-Control \"public, immutable\";\n    }\n\n    # Application\n    location / {\n        proxy_pass http://127.0.0.1:5000;\n        proxy_set_header Host \\$host;\n        proxy_set_header X-Real-IP \\$remote_addr;\n        proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto \\$scheme;\n        proxy_connect_timeout 60s;\n        proxy_send_timeout 60s;\n        proxy_read_timeout 60s;\n    }\n\n    # Health check endpoint\n    location /health {\n        access_log off;\n        proxy_pass http://127.0.0.1:5000/health;\n    }\n}\nEOL\n\n# Enable Nginx site\nln -sf /etc/nginx/sites-available/$APP_NAME /etc/nginx/sites-enabled/\nrm -f /etc/nginx/sites-enabled/default\n\n# Test Nginx configuration\nnginx -t\n\n# Initialize database\necho \"Initializing database...\"\ncd \"$APP_DIR\"\nsudo -u \"$APP_USER\" bash -c \"source $VENV_DIR/bin/activate && source .env && python3 -c 'from app import app, db; app.app_context().push(); db.create_all()'\"\n\n# Enable and start services\necho \"Starting services...\"\nsystemctl daemon-reload\nsystemctl enable $APP_NAME\nsystemctl start $APP_NAME\nsystemctl enable nginx\nsystemctl restart nginx\n\necho \"\"\necho \"=== Deployment Complete! ===\"\necho \"\"\necho \"Your email marketing app is now running!\"\necho \"\"\necho \"Next steps:\"\necho \"1. Update $APP_DIR/.env with your API credentials\"\necho \"2. Update /etc/nginx/sites-available/$APP_NAME with your domain\"\necho \"3. Restart services: systemctl restart $APP_NAME nginx\"\necho \"4. Set up SSL certificate with certbot (recommended)\"\necho \"\"\necho \"Default admin login:\"\necho \"  Username: admin\"\necho \"  Password: admin123\"\necho \"\"\necho \"Service management:\"\necho \"  Start: systemctl start $APP_NAME\"\necho \"  Stop: systemctl stop $APP_NAME\"\necho \"  Restart: systemctl restart $APP_NAME\"\necho \"  Status: systemctl status $APP_NAME\"\necho \"  Logs: journalctl -u $APP_NAME -f\"\necho \"\"\necho \"Application logs: $LOG_DIR/\"\necho \"\"","size_bytes":5770},"direct_sync_deploy.sh":{"content":"#!/bin/bash\n\n# Direct Sync Deployment - No downloads needed\n# Run this on your LOCAL machine to sync current Replit files to VPS\n\nVPS_HOST=\"194.195.92.52\"\nVPS_USER=\"root\"\nVPS_PATH=\"/var/www/lux-marketing\"\n\necho \"🚀 Direct Sync Deployment to VPS\"\necho \"Checking what's currently on VPS vs what should be there...\"\n\n# First, let's check what login template is currently on VPS\necho \"📋 Current VPS login template:\"\nssh $VPS_USER@$VPS_HOST \"head -20 $VPS_PATH/templates/login.html 2>/dev/null || echo 'File not found'\"\n\necho \"\"\necho \"This should show 'LUX Marketing' branding if deployment worked...\"\necho \"\"\nread -p \"Press Enter to continue with force sync...\"\n\n# Force clear and redeploy\nssh $VPS_USER@$VPS_HOST << 'EOF'\n    set -e\n    \n    echo \"🛑 Stopping services...\"\n    systemctl stop lux-marketing 2>/dev/null || true\n    systemctl stop nginx 2>/dev/null || true\n    \n    echo \"📁 Backing up and clearing deployment directory...\"\n    if [ -d \"/var/www/lux-marketing\" ]; then\n        cp -r /var/www/lux-marketing /var/backups/lux-old-$(date +%Y%m%d_%H%M%S) 2>/dev/null || true\n    fi\n    \n    # Completely clear the directory\n    rm -rf /var/www/lux-marketing\n    mkdir -p /var/www/lux-marketing\n    chown luxapp:www-data /var/www/lux-marketing\n    \n    echo \"✅ VPS directory cleared and ready for new files\"\nEOF\n\necho \"\"\necho \"📤 Now we need to get your current files to VPS...\"\necho \"\"\necho \"OPTION 1 - Use the tar file you downloaded:\"\necho \"If you have current-lux-replit.tar.gz on your local machine:\"\necho \"scp current-lux-replit.tar.gz $VPS_USER@$VPS_HOST:/tmp/\"\necho \"\"\necho \"OPTION 2 - Download directly to VPS (if you have the Replit URL):\"\necho \"ssh $VPS_USER@$VPS_HOST 'cd /tmp && wget https://YOUR-REPL-URL.replit.dev/current-lux-replit.tar.gz'\"\necho \"\"\nread -p \"Which option? (1 or 2): \" option\n\nif [ \"$option\" = \"1\" ]; then\n    echo \"📤 Uploading tar file to VPS...\"\n    if [ -f \"current-lux-replit.tar.gz\" ]; then\n        scp current-lux-replit.tar.gz $VPS_USER@$VPS_HOST:/tmp/\n        echo \"✅ File uploaded\"\n    else\n        echo \"❌ current-lux-replit.tar.gz not found in current directory\"\n        echo \"Please download it from Replit first, then run this script from the same directory\"\n        exit 1\n    fi\nelif [ \"$option\" = \"2\" ]; then\n    echo \"Enter your Replit workspace URL (e.g., https://your-repl.replit.dev):\"\n    read repl_url\n    ssh $VPS_USER@$VPS_HOST \"cd /tmp && wget $repl_url/current-lux-replit.tar.gz\"\nelse\n    echo \"Invalid option\"\n    exit 1\nfi\n\n# Extract and setup on VPS\necho \"🔧 Extracting and setting up on VPS...\"\nssh $VPS_USER@$VPS_HOST << 'EOF'\n    set -e\n    cd /var/www/lux-marketing\n    \n    echo \"📦 Extracting files...\"\n    tar xzf /tmp/current-lux-replit.tar.gz\n    \n    echo \"🔐 Setting permissions...\"\n    chown -R luxapp:www-data /var/www/lux-marketing\n    chmod -R 755 /var/www/lux-marketing\n    \n    echo \"🐍 Setting up Python environment...\"\n    sudo -u luxapp python3 -m venv venv\n    sudo -u luxapp venv/bin/pip install flask gunicorn flask-sqlalchemy flask-login flask-wtf\n    sudo -u luxapp venv/bin/pip install psycopg2-binary msal openai requests twilio apscheduler\n    sudo -u luxapp venv/bin/pip install email-validator itsdangerous werkzeug jinja2\n    \n    echo \"📁 Creating required directories...\"\n    mkdir -p static/uploads instance logs\n    chown -R luxapp:www-data static/uploads instance logs\n    \n    echo \"🗄️ Initializing database...\"\n    sudo -u luxapp -H bash -c \"\n        cd /var/www/lux-marketing\n        source venv/bin/activate\n        export DATABASE_URL='postgresql://luxuser:LuxPass2024!@localhost/lux_marketing'\n        export SESSION_SECRET='lux-secret-2024'\n        python3 -c \\\"\nfrom app import app, db\nwith app.app_context():\n    db.create_all()\n    print('Database initialized')\n\\\"\n    \"\n    \n    echo \"🔄 Starting services...\"\n    systemctl start nginx\n    systemctl start lux-marketing\n    \n    echo \"✅ Deployment complete!\"\n    echo \"\"\n    echo \"📋 Verifying login template has LUX branding:\"\n    grep -i \"lux marketing\" /var/www/lux-marketing/templates/login.html || echo \"⚠️ LUX branding not found!\"\n    \n    echo \"\"\n    echo \"📋 Current template files:\"\n    ls -la /var/www/lux-marketing/templates/ | grep -E \"(login|automation|forms)\"\n    \n    # Cleanup\n    rm -f /tmp/current-lux-replit.tar.gz\nEOF\n\necho \"\"\necho \"🎉 Direct sync deployment complete!\"\necho \"Visit: http://lux.lucifercruz.com\"\necho \"\"\necho \"The login page should now show 'LUX Marketing' branding\"","size_bytes":4513},"DEPLOYMENT_INSTRUCTIONS.md":{"content":"# LUX Email Marketing Bot - VPS Deployment Fix\n\n## Quick Fix for Your VPS Issue\n\nYour VPS is failing because of a corrupted `routes.py` file with duplicate route definitions. This package contains the fixed files.\n\n## Files to Download from Replit:\n\n1. **lux-email-app-fixed.tar.gz** - Complete fixed application package  \n2. **vps-fix-deployment.sh** - Automated deployment script  \n\n## Step-by-Step Fix:\n\n### 1. Download Files\n- In Replit file browser, right-click each file → Download\n- Save both files to the same folder on your computer\n\n### 2. Run Deployment Script\n```bash\nchmod +x vps-fix-deployment.sh\n./vps-fix-deployment.sh\n```\n\n### 3. What the Script Does:\n- Connects to your VPS at 194.195.92.52\n- Backs up your current installation  \n- Replaces corrupted files with fixed versions\n- Restarts the service properly\n- Tests both backend (port 5000) and domain (HTTPS)\n\n### 4. Expected Result:\n```\n✅ Backend is responding!\n✅ Domain is accessible via HTTPS!\n```\n\n## After Successful Deployment:\n\n🌐 **Access your app:** https://lux.lucifercruz.com  \n🔐 **Login:** admin / admin123  \n🔧 **Configure:** Add Microsoft Graph API and OpenAI keys  \n\n## If You Need Help:\n\nCheck service status:\n```bash\nssh root@194.195.92.52 'systemctl status lux'\n```\n\nView logs:\n```bash  \nssh root@194.195.92.52 'journalctl -u lux -f'\n```\n\nThe deployment script will automatically fix the route conflict error that's preventing your app from starting.","size_bytes":1451},"wsgi.py":{"content":"#!/usr/bin/env python3\n\"\"\"\nWSGI entry point for production deployment\n\"\"\"\nfrom app import app\n\nif __name__ == \"__main__\":\n    app.run()","size_bytes":135},"scheduler.py":{"content":"import logging\nfrom datetime import datetime\nfrom apscheduler.schedulers.background import BackgroundScheduler\nfrom apscheduler.jobstores.sqlalchemy import SQLAlchemyJobStore\nfrom apscheduler.executors.pool import ThreadPoolExecutor\nfrom app import db\nfrom models import Campaign\nfrom email_service import EmailService\n\nscheduler = None\n\ndef send_scheduled_campaign(campaign_id):\n    \"\"\"Send a scheduled campaign\"\"\"\n    try:\n        campaign = Campaign.query.get(campaign_id)\n        if not campaign:\n            logging.error(f\"Campaign {campaign_id} not found\")\n            return\n        \n        if campaign.status != 'scheduled':\n            logging.warning(f\"Campaign {campaign_id} is not in scheduled status\")\n            return\n        \n        logging.info(f\"Sending scheduled campaign: {campaign.name}\")\n        \n        email_service = EmailService()\n        result = email_service.send_campaign(campaign)\n        \n        logging.info(f\"Scheduled campaign {campaign_id} completed: {result}\")\n        \n    except Exception as e:\n        logging.error(f\"Error sending scheduled campaign {campaign_id}: {str(e)}\")\n        \n        # Update campaign status to failed\n        campaign = Campaign.query.get(campaign_id)\n        if campaign:\n            campaign.status = 'failed'\n            db.session.commit()\n\ndef schedule_campaign(campaign):\n    \"\"\"Schedule a campaign to be sent at specified time\"\"\"\n    if not campaign.scheduled_at:\n        return\n    \n    job_id = f\"campaign_{campaign.id}\"\n    \n    try:\n        # Remove existing job if it exists\n        try:\n            scheduler.remove_job(job_id)\n        except:\n            pass\n        \n        # Schedule new job\n        scheduler.add_job(\n            func=send_scheduled_campaign,\n            trigger=\"date\",\n            run_date=campaign.scheduled_at,\n            args=[campaign.id],\n            id=job_id,\n            name=f\"Send campaign: {campaign.name}\",\n            misfire_grace_time=300  # 5 minutes\n        )\n        \n        logging.info(f\"Scheduled campaign {campaign.id} for {campaign.scheduled_at}\")\n        \n    except Exception as e:\n        logging.error(f\"Error scheduling campaign {campaign.id}: {str(e)}\")\n\ndef init_scheduler(app):\n    \"\"\"Initialize the background scheduler\"\"\"\n    global scheduler\n    \n    if scheduler is not None:\n        return scheduler\n    \n    # Configure job store\n    jobstores = {\n        'default': SQLAlchemyJobStore(url=app.config['SQLALCHEMY_DATABASE_URI'])\n    }\n    \n    executors = {\n        'default': ThreadPoolExecutor(20)\n    }\n    \n    job_defaults = {\n        'coalesce': False,\n        'max_instances': 3\n    }\n    \n    scheduler = BackgroundScheduler(\n        jobstores=jobstores,\n        executors=executors,\n        job_defaults=job_defaults,\n        timezone='UTC'\n    )\n    \n    # Start scheduler\n    scheduler.start()\n    \n    # Schedule any existing campaigns that are due\n    with app.app_context():\n        scheduled_campaigns = Campaign.query.filter_by(status='scheduled').all()\n        for campaign in scheduled_campaigns:\n            if campaign.scheduled_at and campaign.scheduled_at > datetime.utcnow():\n                schedule_campaign(campaign)\n            else:\n                # Past due, mark as failed\n                campaign.status = 'failed'\n                db.session.commit()\n    \n    logging.info(\"Email scheduler initialized\")\n    return scheduler\n\ndef shutdown_scheduler():\n    \"\"\"Shutdown the scheduler\"\"\"\n    global scheduler\n    if scheduler:\n        scheduler.shutdown()\n        scheduler = None\n","size_bytes":3561},"static/css/custom.css":{"content":"/* LUX Marketing - Sophisticated Color Scheme */\n:root {\n  /* LUX Marketing Color Palette */\n  --lux-onyx-black: #0a0a0a;         /* Softer primary background */\n  --lux-polished-silver: #C0C0C0;    /* Logo, accents */\n  --lux-emerald-abyss: #013220;      /* Sophisticated highlight */\n  --lux-amethyst-night: #301934;     /* Secondary tone */\n  --lux-pearl-white: #F5F5F5;        /* Text and clean contrast */\n  \n  /* Refined dark background for better contrast */\n  --lux-dark-bg: #1a1a1a;\n  --lux-card-bg: #2a2a2a;\n}\n\n/* Override Bootstrap dark theme with LUX colors */\nhtml[data-bs-theme=\"dark\"] {\n  --bs-body-bg: var(--lux-dark-bg);\n  --bs-body-color: var(--lux-pearl-white);\n  --bs-primary: var(--lux-emerald-abyss);\n  --bs-primary-rgb: 1, 50, 32;\n  --bs-secondary: var(--lux-amethyst-night);\n  --bs-light: var(--lux-polished-silver);\n  --bs-dark: var(--lux-onyx-black);\n  --bs-border-color: rgba(192, 192, 192, 0.15);\n  --bs-tertiary-bg: rgba(48, 25, 52, 0.2);\n  --bs-link-color: var(--lux-polished-silver);\n  --bs-link-hover-color: var(--lux-pearl-white);\n}\n\n/* Ensure body styling is properly applied */\nbody {\n  background: linear-gradient(145deg, var(--lux-dark-bg) 0%, var(--lux-onyx-black) 100%);\n  color: var(--lux-pearl-white);\n  min-height: 100vh;\n}\n\n/* Navigation Bar - Elegant LUX Branding */\n.navbar {\n  background: linear-gradient(135deg, var(--lux-card-bg) 0%, var(--lux-amethyst-night) 50%, var(--lux-emerald-abyss) 100%);\n  border-bottom: 2px solid var(--lux-emerald-abyss);\n  backdrop-filter: blur(10px);\n  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.3);\n}\n\n.navbar-brand {\n  font-weight: 700;\n  font-size: 1.4rem;\n  color: var(--lux-polished-silver) !important;\n  text-shadow: 0 2px 4px rgba(0, 0, 0, 0.5);\n  display: flex;\n  align-items: center;\n}\n\n.navbar-brand i {\n  margin-right: 0.75rem;\n  color: var(--lux-emerald-abyss);\n  filter: drop-shadow(0 0 4px rgba(1, 50, 32, 0.6));\n}\n\n.navbar-brand:hover {\n  color: var(--lux-pearl-white) !important;\n  text-shadow: 0 0 8px rgba(1, 50, 32, 0.8);\n}\n\n.nav-link {\n  color: var(--lux-polished-silver) !important;\n  font-weight: 500;\n  display: flex;\n  align-items: center;\n  transition: all 0.3s ease;\n  padding: 0.75rem 1rem;\n}\n\n.nav-link:hover {\n  color: var(--lux-emerald-abyss) !important;\n  background: rgba(1, 50, 32, 0.1);\n  border-radius: 6px;\n}\n\n.nav-link i {\n  margin-right: 0.5rem;\n  width: 1rem;\n  height: 1rem;\n}\n\n/* Cards - Sophisticated Design */\n.card {\n  background: linear-gradient(145deg, var(--lux-card-bg) 0%, rgba(48, 25, 52, 0.4) 100%);\n  border: 1px solid rgba(192, 192, 192, 0.1);\n  border-radius: 12px;\n  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);\n  backdrop-filter: blur(10px);\n  transition: all 0.3s ease;\n}\n\n.card:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 12px 48px rgba(0, 0, 0, 0.3), 0 0 24px rgba(1, 50, 32, 0.1);\n  border-color: rgba(1, 50, 32, 0.3);\n}\n\n.card-header {\n  background: linear-gradient(135deg, var(--lux-amethyst-night) 0%, rgba(1, 50, 32, 0.2) 100%);\n  border-bottom: 1px solid rgba(192, 192, 192, 0.1);\n  border-radius: 12px 12px 0 0;\n  color: var(--lux-pearl-white);\n  font-weight: 600;\n  padding: 1rem 1.5rem;\n}\n\n.card-title {\n  color: var(--lux-polished-silver);\n  font-weight: 600;\n  margin-bottom: 0.5rem;\n}\n\n.card-body {\n  color: var(--lux-pearl-white);\n  padding: 1.5rem;\n}\n\n/* Buttons - Professional Styling */\n.btn-primary {\n  background: linear-gradient(135deg, var(--lux-emerald-abyss) 0%, rgba(1, 50, 32, 0.9) 100%);\n  border: 2px solid var(--lux-emerald-abyss);\n  color: var(--lux-pearl-white);\n  font-weight: 600;\n  padding: 0.75rem 1.5rem;\n  border-radius: 8px;\n  transition: all 0.3s ease;\n  box-shadow: 0 4px 16px rgba(1, 50, 32, 0.2);\n}\n\n.btn-primary:hover {\n  background: linear-gradient(135deg, rgba(1, 50, 32, 1) 0%, var(--lux-emerald-abyss) 100%);\n  transform: translateY(-1px);\n  box-shadow: 0 8px 24px rgba(1, 50, 32, 0.3);\n  border-color: var(--lux-polished-silver);\n  color: var(--lux-pearl-white);\n}\n\n.btn-secondary {\n  background: linear-gradient(135deg, var(--lux-amethyst-night) 0%, rgba(48, 25, 52, 0.9) 100%);\n  border: 2px solid var(--lux-amethyst-night);\n  color: var(--lux-polished-silver);\n  font-weight: 500;\n}\n\n.btn-outline-primary {\n  border: 2px solid var(--lux-emerald-abyss);\n  color: var(--lux-emerald-abyss);\n  background: transparent;\n}\n\n.btn-outline-primary:hover {\n  background: var(--lux-emerald-abyss);\n  color: var(--lux-pearl-white);\n  border-color: var(--lux-emerald-abyss);\n}\n\n/* Form Controls - Enhanced Inputs */\n.form-control {\n  background-color: rgba(42, 42, 42, 0.8);\n  border: 2px solid rgba(192, 192, 192, 0.15);\n  color: var(--lux-pearl-white);\n  border-radius: 8px;\n  padding: 0.75rem 1rem;\n}\n\n.form-control:focus {\n  background-color: rgba(42, 42, 42, 1);\n  border-color: var(--lux-emerald-abyss);\n  box-shadow: 0 0 0 0.25rem rgba(1, 50, 32, 0.25);\n  color: var(--lux-pearl-white);\n}\n\n.form-control::placeholder {\n  color: rgba(192, 192, 192, 0.6);\n}\n\n.form-select {\n  background-color: rgba(42, 42, 42, 0.8);\n  border: 2px solid rgba(192, 192, 192, 0.15);\n  color: var(--lux-pearl-white);\n  border-radius: 8px;\n}\n\n.form-select:focus {\n  border-color: var(--lux-emerald-abyss);\n  box-shadow: 0 0 0 0.25rem rgba(1, 50, 32, 0.25);\n  color: var(--lux-pearl-white);\n}\n\n.form-label {\n  color: var(--lux-polished-silver);\n  font-weight: 500;\n  margin-bottom: 0.5rem;\n}\n\n/* Input Groups */\n.input-group-text {\n  background: linear-gradient(135deg, var(--lux-amethyst-night) 0%, rgba(48, 25, 52, 0.7) 100%);\n  border: 2px solid rgba(192, 192, 192, 0.15);\n  color: var(--lux-polished-silver);\n  border-radius: 8px 0 0 8px;\n}\n\n/* Tables - Clean Professional Look */\n.table {\n  color: var(--lux-pearl-white);\n  background-color: transparent;\n}\n\n.table thead th {\n  background: linear-gradient(135deg, var(--lux-amethyst-night) 0%, rgba(48, 25, 52, 0.8) 100%);\n  color: var(--lux-polished-silver);\n  border-color: rgba(192, 192, 192, 0.1);\n  font-weight: 600;\n  padding: 1rem;\n  border-bottom: 2px solid rgba(1, 50, 32, 0.3);\n}\n\n.table tbody td {\n  border-color: rgba(192, 192, 192, 0.08);\n  padding: 1rem;\n  color: var(--lux-pearl-white);\n}\n\n.table-hover tbody tr:hover {\n  background-color: rgba(1, 50, 32, 0.15);\n}\n\n/* Badges - Status Indicators */\n.badge {\n  font-size: 0.8em;\n  font-weight: 600;\n  padding: 0.5rem 1rem;\n  border-radius: 6px;\n}\n\n.badge.bg-secondary {\n  background: linear-gradient(135deg, var(--lux-amethyst-night) 0%, rgba(48, 25, 52, 0.8) 100%) !important;\n  color: var(--lux-pearl-white);\n}\n\n.badge.bg-success {\n  background: linear-gradient(135deg, var(--lux-emerald-abyss) 0%, rgba(1, 50, 32, 0.8) 100%) !important;\n  color: var(--lux-pearl-white);\n}\n\n/* Login Page Specific */\n.login-container {\n  min-height: 100vh;\n  background: radial-gradient(ellipse at center, rgba(48, 25, 52, 0.2) 0%, var(--lux-dark-bg) 70%);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n/* Dashboard Statistics Cards */\n.stats-card {\n  background: linear-gradient(135deg, rgba(1, 50, 32, 0.6) 0%, rgba(48, 25, 52, 0.4) 100%);\n  border: 2px solid rgba(192, 192, 192, 0.1);\n  border-radius: 12px;\n  padding: 2rem;\n  text-align: center;\n  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);\n  transition: all 0.3s ease;\n}\n\n.stats-card:hover {\n  transform: translateY(-4px);\n  box-shadow: 0 16px 48px rgba(0, 0, 0, 0.3);\n  border-color: var(--lux-emerald-abyss);\n}\n\n.stats-card h3 {\n  color: var(--lux-polished-silver);\n  font-size: 2.5rem;\n  font-weight: 700;\n  margin-bottom: 0.5rem;\n  text-shadow: 0 2px 4px rgba(0, 0, 0, 0.5);\n}\n\n.stats-card p {\n  color: rgba(192, 192, 192, 0.8);\n  font-size: 1.1rem;\n  font-weight: 500;\n  margin: 0;\n}\n\n/* Progress Bars */\n.progress {\n  background-color: rgba(48, 25, 52, 0.3);\n  height: 1.5rem;\n  border-radius: 8px;\n  overflow: hidden;\n}\n\n.progress-bar {\n  background: linear-gradient(135deg, var(--lux-emerald-abyss) 0%, rgba(1, 50, 32, 0.9) 100%);\n  font-size: 0.875rem;\n  font-weight: 600;\n  color: var(--lux-pearl-white);\n}\n\n/* Modals */\n.modal-content {\n  background: linear-gradient(145deg, var(--lux-card-bg) 0%, var(--lux-dark-bg) 100%);\n  border: 2px solid rgba(192, 192, 192, 0.15);\n  border-radius: 12px;\n  box-shadow: 0 16px 64px rgba(0, 0, 0, 0.4);\n}\n\n.modal-header {\n  border-bottom: 2px solid rgba(192, 192, 192, 0.1);\n  background: linear-gradient(135deg, rgba(1, 50, 32, 0.2) 0%, rgba(48, 25, 52, 0.2) 100%);\n}\n\n.modal-title {\n  color: var(--lux-polished-silver);\n  font-weight: 600;\n}\n\n/* Alerts */\n.alert {\n  border: 2px solid;\n  border-radius: 8px;\n  backdrop-filter: blur(10px);\n  color: var(--lux-pearl-white);\n}\n\n.alert-info {\n  background: linear-gradient(135deg, rgba(1, 50, 32, 0.2) 0%, rgba(48, 25, 52, 0.2) 100%);\n  border-color: var(--lux-emerald-abyss);\n}\n\n.alert-warning {\n  background: linear-gradient(135deg, rgba(255, 193, 7, 0.2) 0%, rgba(48, 25, 52, 0.2) 100%);\n  border-color: #ffc107;\n}\n\n/* Campaign Status Colors */\n.campaign-status-draft { color: var(--lux-polished-silver); }\n.campaign-status-scheduled { color: #ffc107; }\n.campaign-status-sending { color: #17a2b8; }\n.campaign-status-sent { color: var(--lux-emerald-abyss); }\n.campaign-status-failed { color: #dc3545; }\n\n/* Pagination */\n.pagination .page-link {\n  background-color: rgba(42, 42, 42, 0.8);\n  border-color: rgba(192, 192, 192, 0.15);\n  color: var(--lux-polished-silver);\n  padding: 0.75rem 1rem;\n  border-radius: 6px;\n  margin: 0 0.25rem;\n}\n\n.pagination .page-link:hover {\n  background-color: var(--lux-emerald-abyss);\n  border-color: var(--lux-emerald-abyss);\n  color: var(--lux-pearl-white);\n}\n\n.pagination .page-item.active .page-link {\n  background-color: var(--lux-emerald-abyss);\n  border-color: var(--lux-emerald-abyss);\n  color: var(--lux-pearl-white);\n}\n\n/* Dropdown Menus */\n.dropdown-menu {\n  background: linear-gradient(145deg, var(--lux-card-bg) 0%, var(--lux-dark-bg) 100%);\n  border: 2px solid rgba(192, 192, 192, 0.15);\n  border-radius: 8px;\n  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);\n}\n\n.dropdown-item {\n  color: var(--lux-polished-silver);\n  display: flex;\n  align-items: center;\n  padding: 0.75rem 1rem;\n}\n\n.dropdown-item:hover {\n  background-color: rgba(1, 50, 32, 0.2);\n  color: var(--lux-pearl-white);\n}\n\n/* Text and Typography */\nh1, h2, h3, h4, h5, h6 {\n  color: var(--lux-polished-silver);\n}\n\np, span, div {\n  color: var(--lux-pearl-white);\n}\n\n.text-muted {\n  color: rgba(192, 192, 192, 0.7) !important;\n}\n\n/* Custom Scrollbar */\n::-webkit-scrollbar {\n  width: 12px;\n  height: 12px;\n}\n\n::-webkit-scrollbar-track {\n  background: var(--lux-dark-bg);\n  border-radius: 6px;\n}\n\n::-webkit-scrollbar-thumb {\n  background: linear-gradient(135deg, var(--lux-amethyst-night) 0%, var(--lux-emerald-abyss) 100%);\n  border-radius: 6px;\n  border: 2px solid var(--lux-dark-bg);\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background: linear-gradient(135deg, var(--lux-emerald-abyss) 0%, var(--lux-amethyst-night) 100%);\n}\n\n/* Mobile Responsive */\n@media (max-width: 768px) {\n  .navbar-brand {\n    font-size: 1.2rem;\n  }\n  \n  .card {\n    border-radius: 8px;\n  }\n  \n  .btn {\n    padding: 0.5rem 1rem;\n    font-size: 0.9rem;\n  }\n  \n  .stats-card {\n    padding: 1.5rem;\n  }\n  \n  .stats-card h3 {\n    font-size: 2rem;\n  }\n}","size_bytes":11165},"static/js/main.js":{"content":"// Main JavaScript file for Email Marketing Automation Bot\n// Handles client-side interactions and UI enhancements\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    // Initialize tooltips\n    initializeTooltips();\n    \n    // Initialize form validations\n    initializeFormValidation();\n    \n    // Initialize auto-dismiss alerts\n    initializeAlerts();\n    \n    // Initialize campaign preview functionality\n    initializeCampaignPreview();\n    \n    // Initialize contact management features\n    initializeContactManagement();\n    \n    // Initialize template management\n    initializeTemplateManagement();\n    \n    // Initialize analytics charts\n    initializeAnalytics();\n    \n    // Add loading states to forms\n    initializeLoadingStates();\n});\n\n/**\n * Initialize Bootstrap tooltips\n */\nfunction initializeTooltips() {\n    const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=\"tooltip\"]'));\n    tooltipTriggerList.map(function(tooltipTriggerEl) {\n        return new bootstrap.Tooltip(tooltipTriggerEl);\n    });\n}\n\n/**\n * Initialize form validation\n */\nfunction initializeFormValidation() {\n    // Email validation\n    const emailInputs = document.querySelectorAll('input[type=\"email\"]');\n    emailInputs.forEach(function(input) {\n        input.addEventListener('blur', function() {\n            validateEmail(this);\n        });\n    });\n    \n    // Campaign form validation\n    const campaignForm = document.querySelector('form[action*=\"create_campaign\"]');\n    if (campaignForm) {\n        campaignForm.addEventListener('submit', function(e) {\n            if (!validateCampaignForm(this)) {\n                e.preventDefault();\n            }\n        });\n    }\n    \n    // Template form validation\n    const templateForm = document.querySelector('form[action*=\"create_template\"]');\n    if (templateForm) {\n        templateForm.addEventListener('submit', function(e) {\n            if (!validateTemplateForm(this)) {\n                e.preventDefault();\n            }\n        });\n    }\n}\n\n/**\n * Validate email address format\n */\nfunction validateEmail(input) {\n    const email = input.value.trim();\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    \n    if (email && !emailRegex.test(email)) {\n        input.classList.add('is-invalid');\n        showFieldError(input, 'Please enter a valid email address');\n        return false;\n    } else {\n        input.classList.remove('is-invalid');\n        hideFieldError(input);\n        return true;\n    }\n}\n\n/**\n * Validate campaign form\n */\nfunction validateCampaignForm(form) {\n    let isValid = true;\n    \n    // Check required fields\n    const requiredFields = form.querySelectorAll('[required]');\n    requiredFields.forEach(function(field) {\n        if (!field.value.trim()) {\n            field.classList.add('is-invalid');\n            showFieldError(field, 'This field is required');\n            isValid = false;\n        } else {\n            field.classList.remove('is-invalid');\n            hideFieldError(field);\n        }\n    });\n    \n    // Validate scheduled date\n    const scheduledAt = form.querySelector('#scheduled_at');\n    if (scheduledAt && scheduledAt.value) {\n        const scheduledDate = new Date(scheduledAt.value);\n        const now = new Date();\n        \n        if (scheduledDate <= now) {\n            scheduledAt.classList.add('is-invalid');\n            showFieldError(scheduledAt, 'Scheduled time must be in the future');\n            isValid = false;\n        } else {\n            scheduledAt.classList.remove('is-invalid');\n            hideFieldError(scheduledAt);\n        }\n    }\n    \n    return isValid;\n}\n\n/**\n * Validate template form\n */\nfunction validateTemplateForm(form) {\n    let isValid = true;\n    \n    // Check HTML content\n    const htmlContent = form.querySelector('#html_content');\n    if (htmlContent && htmlContent.value.trim().length < 50) {\n        htmlContent.classList.add('is-invalid');\n        showFieldError(htmlContent, 'HTML content must be at least 50 characters long');\n        isValid = false;\n    } else if (htmlContent) {\n        htmlContent.classList.remove('is-invalid');\n        hideFieldError(htmlContent);\n    }\n    \n    return isValid;\n}\n\n/**\n * Show field error message\n */\nfunction showFieldError(field, message) {\n    hideFieldError(field); // Remove existing error\n    \n    const errorDiv = document.createElement('div');\n    errorDiv.className = 'invalid-feedback';\n    errorDiv.textContent = message;\n    \n    field.parentNode.appendChild(errorDiv);\n}\n\n/**\n * Hide field error message\n */\nfunction hideFieldError(field) {\n    const existingError = field.parentNode.querySelector('.invalid-feedback');\n    if (existingError) {\n        existingError.remove();\n    }\n}\n\n/**\n * Initialize auto-dismiss alerts\n */\nfunction initializeAlerts() {\n    // Auto-dismiss alerts after 5 seconds\n    const alerts = document.querySelectorAll('.alert:not(.alert-permanent)');\n    alerts.forEach(function(alert) {\n        setTimeout(function() {\n            const bsAlert = new bootstrap.Alert(alert);\n            if (bsAlert) {\n                bsAlert.close();\n            }\n        }, 5000);\n    });\n}\n\n/**\n * Initialize campaign preview functionality\n */\nfunction initializeCampaignPreview() {\n    // Add preview buttons to campaign rows\n    const previewButtons = document.querySelectorAll('[data-action=\"preview\"]');\n    previewButtons.forEach(function(button) {\n        button.addEventListener('click', function() {\n            const campaignId = this.dataset.campaignId;\n            previewCampaign(campaignId);\n        });\n    });\n}\n\n/**\n * Preview campaign in modal\n */\nfunction previewCampaign(campaignId) {\n    // This would typically fetch preview data via AJAX\n    // For now, redirect to preview page\n    window.location.href = `/campaigns/${campaignId}/preview`;\n}\n\n/**\n * Preview template functionality\n */\nfunction previewTemplate(templateId) {\n    if (templateId) {\n        // Preview existing template\n        window.location.href = `/templates/${templateId}/preview`;\n    } else {\n        // Live preview during creation/editing\n        const subject = document.getElementById('subject')?.value || 'Preview Subject';\n        const htmlContent = document.getElementById('html_content')?.value || '';\n        \n        if (!htmlContent.trim()) {\n            alert('Please enter some HTML content to preview');\n            return;\n        }\n        \n        // Create a new window for preview\n        const previewWindow = window.open('', '_blank', 'width=800,height=600,scrollbars=yes');\n        previewWindow.document.write(`\n            <html>\n            <head>\n                <title>Template Preview</title>\n                <style>\n                    body { font-family: Arial, sans-serif; margin: 20px; background: #f8f9fa; }\n                    .email-preview { max-width: 600px; margin: 0 auto; background: white; border: 1px solid #ddd; }\n                    .email-header { padding: 15px; background: #f8f9fa; border-bottom: 1px solid #ddd; }\n                    .email-content { padding: 0; }\n                </style>\n            </head>\n            <body>\n                <h2>Email Template Preview</h2>\n                <div class=\"email-preview\">\n                    <div class=\"email-header\">\n                        <strong>Subject:</strong> ${subject}<br>\n                        <strong>To:</strong> john.doe@example.com<br>\n                        <strong>From:</strong> noreply@yourdomain.com\n                    </div>\n                    <div class=\"email-content\">\n                        ${htmlContent}\n                    </div>\n                </div>\n            </body>\n            </html>\n        `);\n        previewWindow.document.close();\n    }\n}\n\n/**\n * Initialize contact management features\n */\nfunction initializeContactManagement() {\n    // Bulk contact selection\n    const selectAllCheckbox = document.querySelector('#select-all-contacts');\n    if (selectAllCheckbox) {\n        selectAllCheckbox.addEventListener('change', function() {\n            const contactCheckboxes = document.querySelectorAll('.contact-checkbox');\n            contactCheckboxes.forEach(function(checkbox) {\n                checkbox.checked = selectAllCheckbox.checked;\n            });\n            updateBulkActions();\n        });\n    }\n    \n    // Individual contact selection\n    const contactCheckboxes = document.querySelectorAll('.contact-checkbox');\n    contactCheckboxes.forEach(function(checkbox) {\n        checkbox.addEventListener('change', updateBulkActions);\n    });\n    \n    // CSV import validation\n    const csvFileInput = document.querySelector('#file');\n    if (csvFileInput) {\n        csvFileInput.addEventListener('change', function() {\n            validateCSVFile(this);\n        });\n    }\n    \n    // Contact search with debounce\n    const searchInput = document.querySelector('input[name=\"search\"]');\n    if (searchInput) {\n        let searchTimeout;\n        searchInput.addEventListener('input', function() {\n            clearTimeout(searchTimeout);\n            searchTimeout = setTimeout(() => {\n                // Auto-submit search after 500ms of no typing\n                if (this.value.length > 2 || this.value.length === 0) {\n                    this.form.submit();\n                }\n            }, 500);\n        });\n    }\n}\n\n/**\n * Update bulk actions based on selected contacts\n */\nfunction updateBulkActions() {\n    const selectedContacts = document.querySelectorAll('.contact-checkbox:checked');\n    const bulkActionsDiv = document.querySelector('#bulk-actions');\n    \n    if (bulkActionsDiv) {\n        if (selectedContacts.length > 0) {\n            bulkActionsDiv.style.display = 'block';\n            bulkActionsDiv.querySelector('.selected-count').textContent = selectedContacts.length;\n        } else {\n            bulkActionsDiv.style.display = 'none';\n        }\n    }\n}\n\n/**\n * Validate CSV file upload\n */\nfunction validateCSVFile(input) {\n    const file = input.files[0];\n    \n    if (file) {\n        const fileName = file.name.toLowerCase();\n        const fileSize = file.size;\n        \n        // Check file extension\n        if (!fileName.endsWith('.csv')) {\n            input.classList.add('is-invalid');\n            showFieldError(input, 'Please select a CSV file');\n            return false;\n        }\n        \n        // Check file size (max 5MB)\n        if (fileSize > 5 * 1024 * 1024) {\n            input.classList.add('is-invalid');\n            showFieldError(input, 'File size must be less than 5MB');\n            return false;\n        }\n        \n        input.classList.remove('is-invalid');\n        hideFieldError(input);\n        return true;\n    }\n}\n\n/**\n * Initialize template management\n */\nfunction initializeTemplateManagement() {\n    // Template preview functionality\n    const previewButtons = document.querySelectorAll('[onclick^=\"previewTemplate\"]');\n    previewButtons.forEach(function(button) {\n        button.addEventListener('click', function(e) {\n            e.preventDefault();\n            const templateId = this.onclick.toString().match(/\\d+/)[0];\n            previewTemplate(templateId);\n        });\n    });\n    \n    // Template variable insertion\n    const variableButtons = document.querySelectorAll('[data-variable]');\n    variableButtons.forEach(function(button) {\n        button.addEventListener('click', function() {\n            const variable = this.dataset.variable;\n            const htmlContent = document.querySelector('#html_content');\n            if (htmlContent) {\n                insertAtCursor(htmlContent, `{{${variable}}}`);\n            }\n        });\n    });\n}\n\n/**\n * Insert text at cursor position in textarea\n */\nfunction insertAtCursor(textarea, text) {\n    const startPos = textarea.selectionStart;\n    const endPos = textarea.selectionEnd;\n    const textAreaValue = textarea.value;\n    \n    textarea.value = textAreaValue.substring(0, startPos) + text + textAreaValue.substring(endPos);\n    textarea.selectionStart = textarea.selectionEnd = startPos + text.length;\n    textarea.focus();\n}\n\n/**\n * Initialize analytics features\n */\nfunction initializeAnalytics() {\n    // Add click tracking for chart interactions\n    const charts = document.querySelectorAll('canvas');\n    charts.forEach(function(chart) {\n        chart.addEventListener('click', function(e) {\n            // Chart click handling would go here\n            console.log('Chart clicked:', e);\n        });\n    });\n    \n    // Auto-refresh analytics data every 30 seconds on analytics page\n    if (window.location.pathname.includes('/analytics')) {\n        setInterval(function() {\n            refreshAnalyticsData();\n        }, 30000);\n    }\n}\n\n/**\n * Refresh analytics data (placeholder for AJAX implementation)\n */\nfunction refreshAnalyticsData() {\n    // This would typically make an AJAX call to update analytics\n    console.log('Refreshing analytics data...');\n}\n\n/**\n * Initialize loading states for forms\n */\nfunction initializeLoadingStates() {\n    const forms = document.querySelectorAll('form');\n    forms.forEach(function(form) {\n        form.addEventListener('submit', function() {\n            const submitButton = form.querySelector('button[type=\"submit\"]');\n            if (submitButton) {\n                submitButton.disabled = true;\n                submitButton.innerHTML = '<span class=\"spinner-border spinner-border-sm me-2\"></span>Processing...';\n                \n                // Re-enable after 30 seconds as fallback\n                setTimeout(function() {\n                    submitButton.disabled = false;\n                    submitButton.innerHTML = submitButton.dataset.originalText || 'Submit';\n                }, 30000);\n            }\n        });\n    });\n}\n\n/**\n * Utility function to show toast notifications\n */\nfunction showToast(message, type = 'info') {\n    const toastContainer = document.querySelector('#toast-container') || createToastContainer();\n    \n    const toast = document.createElement('div');\n    toast.className = `toast align-items-center text-white bg-${type} border-0`;\n    toast.setAttribute('role', 'alert');\n    toast.innerHTML = `\n        <div class=\"d-flex\">\n            <div class=\"toast-body\">${message}</div>\n            <button type=\"button\" class=\"btn-close btn-close-white me-2 m-auto\" data-bs-dismiss=\"toast\"></button>\n        </div>\n    `;\n    \n    toastContainer.appendChild(toast);\n    \n    const bsToast = new bootstrap.Toast(toast);\n    bsToast.show();\n    \n    // Remove toast element after it's hidden\n    toast.addEventListener('hidden.bs.toast', function() {\n        toast.remove();\n    });\n}\n\n/**\n * Create toast container if it doesn't exist\n */\nfunction createToastContainer() {\n    const container = document.createElement('div');\n    container.id = 'toast-container';\n    container.className = 'toast-container position-fixed top-0 end-0 p-3';\n    container.style.zIndex = '9999';\n    document.body.appendChild(container);\n    return container;\n}\n\n/**\n * Utility function to confirm dangerous actions\n */\nfunction confirmAction(message, callback) {\n    if (confirm(message)) {\n        callback();\n    }\n}\n\n/**\n * Initialize keyboard shortcuts\n */\ndocument.addEventListener('keydown', function(e) {\n    // Ctrl+S to save forms\n    if (e.ctrlKey && e.key === 's') {\n        e.preventDefault();\n        const submitButton = document.querySelector('button[type=\"submit\"]');\n        if (submitButton) {\n            submitButton.click();\n        }\n    }\n    \n    // Escape to close modals\n    if (e.key === 'Escape') {\n        const openModal = document.querySelector('.modal.show');\n        if (openModal) {\n            const modal = bootstrap.Modal.getInstance(openModal);\n            if (modal) {\n                modal.hide();\n            }\n        }\n    }\n});\n\n// Global error handler\nwindow.addEventListener('error', function(e) {\n    console.error('JavaScript error:', e.error);\n    showToast('An unexpected error occurred. Please refresh the page.', 'danger');\n});\n\n// Global functions for template usage\nwindow.EmailMarketing = {\n    showToast: showToast,\n    confirmAction: confirmAction,\n    validateEmail: validateEmail\n};\n","size_bytes":16130},"pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"apscheduler>=3.11.0\",\n    \"email-validator>=2.2.0\",\n    \"flask-login>=0.6.3\",\n    \"flask>=3.1.1\",\n    \"flask-sqlalchemy>=3.1.1\",\n    \"flask-limiter>=3.10.0\",\n    \"gunicorn>=23.0.0\",\n    \"jinja2>=3.1.6\",\n    \"msal>=1.33.0\",\n    \"psycopg2-binary>=2.9.10\",\n    \"requests>=2.32.4\",\n    \"sqlalchemy>=2.0.42\",\n    \"werkzeug>=3.1.3\",\n    \"openai>=1.98.0\",\n    \"flask-wtf>=1.2.2\",\n    \"itsdangerous>=2.2.0\",\n    \"twilio>=9.8.1\",\n    \"pytest>=8.0.0\",\n    \"pytest-cov>=6.0.0\",\n    \"pytest-flask>=1.3.0\",\n    \"factory-boy>=3.3.0\",\n    \"beautifulsoup4>=4.14.2\",\n]\n","size_bytes":699},"utils.py":{"content":"import re\nimport logging\nfrom datetime import datetime\n\ndef validate_email(email):\n    \"\"\"Validate email address format\"\"\"\n    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'\n    return re.match(pattern, email) is not None\n\ndef format_datetime(dt):\n    \"\"\"Format datetime for display\"\"\"\n    if not dt:\n        return 'N/A'\n    return dt.strftime('%Y-%m-%d %H:%M:%S')\n\ndef format_date(dt):\n    \"\"\"Format date for display\"\"\"\n    if not dt:\n        return 'N/A'\n    return dt.strftime('%Y-%m-%d')\n\ndef calculate_open_rate(sent_count, opened_count):\n    \"\"\"Calculate email open rate percentage\"\"\"\n    if sent_count == 0:\n        return 0\n    return round((opened_count / sent_count) * 100, 2)\n\ndef calculate_click_rate(sent_count, clicked_count):\n    \"\"\"Calculate email click rate percentage\"\"\"\n    if sent_count == 0:\n        return 0\n    return round((clicked_count / sent_count) * 100, 2)\n\ndef sanitize_filename(filename):\n    \"\"\"Sanitize filename for safe storage\"\"\"\n    # Remove unsafe characters\n    filename = re.sub(r'[^\\w\\s-]', '', filename)\n    # Replace spaces with underscores\n    filename = re.sub(r'[-\\s]+', '_', filename)\n    return filename.strip('_')\n\ndef log_activity(user_id, action, details=None):\n    \"\"\"Log user activity\"\"\"\n    logging.info(f\"User {user_id}: {action} - {details or ''}\")\n\ndef parse_tags(tags_string):\n    \"\"\"Parse comma-separated tags string\"\"\"\n    if not tags_string:\n        return []\n    return [tag.strip() for tag in tags_string.split(',') if tag.strip()]\n\ndef tags_to_string(tags_list):\n    \"\"\"Convert tags list to comma-separated string\"\"\"\n    if not tags_list:\n        return ''\n    return ', '.join(tags_list)\n\ndef get_campaign_status_color(status):\n    \"\"\"Get Bootstrap color class for campaign status\"\"\"\n    status_colors = {\n        'draft': 'secondary',\n        'scheduled': 'warning',\n        'sending': 'info',\n        'sent': 'success',\n        'failed': 'danger',\n        'paused': 'dark',\n        'partial': 'warning'\n    }\n    return status_colors.get(status, 'secondary')\n\ndef truncate_text(text, max_length=50):\n    \"\"\"Truncate text to specified length\"\"\"\n    if not text:\n        return ''\n    if len(text) <= max_length:\n        return text\n    return text[:max_length-3] + '...'\n","size_bytes":2252},"create-deployment-package.sh":{"content":"#!/bin/bash\n\n# Script to create a deployment package for VPS upload\n# This creates a tar.gz file with all necessary files\n\nPACKAGE_NAME=\"email-marketing-app-$(date +%Y%m%d_%H%M%S)\"\nTEMP_DIR=\"/tmp/$PACKAGE_NAME\"\n\necho \"=== Creating Deployment Package ===\"\n\n# Create temporary directory\nmkdir -p \"$TEMP_DIR\"\n\n# Copy application files\necho \"Copying application files...\"\ncp -r *.py \"$TEMP_DIR/\"\ncp -r templates \"$TEMP_DIR/\"\ncp -r static \"$TEMP_DIR/\"\n\n# Copy deployment scripts\necho \"Copying deployment scripts...\"\ncp deploy_requirements.txt \"$TEMP_DIR/\"\ncp wsgi.py \"$TEMP_DIR/\"\ncp gunicorn.conf.py \"$TEMP_DIR/\"\ncp gunicorn-dev.conf.py \"$TEMP_DIR/\"\ncp deploy.sh \"$TEMP_DIR/\"\ncp ssl-setup.sh \"$TEMP_DIR/\"\ncp backup.sh \"$TEMP_DIR/\"\ncp update.sh \"$TEMP_DIR/\"\ncp monitoring.sh \"$TEMP_DIR/\"\ncp README-DEPLOYMENT.md \"$TEMP_DIR/\"\n\n# Copy documentation\ncp replit.md \"$TEMP_DIR/\"\n\n# Make scripts executable\nchmod +x \"$TEMP_DIR\"/*.sh\n\n# Create the archive\necho \"Creating archive...\"\ncd /tmp\ntar -czf \"$PACKAGE_NAME.tar.gz\" \"$PACKAGE_NAME\"\n\n# Move to current directory\nmv \"$PACKAGE_NAME.tar.gz\" \"$OLDPWD/\"\n\n# Cleanup\nrm -rf \"$TEMP_DIR\"\n\necho \"\"\necho \"=== Package Created Successfully! ===\"\necho \"\"\necho \"Package file: $PACKAGE_NAME.tar.gz\"\necho \"Size: $(du -h $PACKAGE_NAME.tar.gz | cut -f1)\"\necho \"\"\necho \"To upload to your VPS:\"\necho \"  scp $PACKAGE_NAME.tar.gz root@your-vps-ip:/root/\"\necho \"\"\necho \"To extract on VPS:\"\necho \"  cd /root\"\necho \"  tar -xzf $PACKAGE_NAME.tar.gz\"\necho \"  cd $PACKAGE_NAME\"\necho \"  chmod +x deploy.sh\"\necho \"  ./deploy.sh\"\necho \"\"","size_bytes":1547},"vps-fix-deployment.sh":{"content":"#!/bin/bash\n# Fixed LUX Email Marketing App VPS Deployment Script\n# Run this on your local machine to upload and fix your VPS\n\nset -e  # Exit on any error\n\n# Configuration\nVPS_IP=\"194.195.92.52\"\nVPS_USER=\"root\"\nDOMAIN=\"lux.lucifercruz.com\"\nAPP_DIR=\"/root/lux-email-bot/LUX-Email-Marketing-Bot\"\nSERVICE_NAME=\"lux\"\n\n# Colors for output\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nNC='\\033[0m' # No Color\n\necho -e \"${GREEN}🚀 LUX Email Marketing Bot - VPS Fix Deployment${NC}\"\necho \"==================================\"\necho \"Target VPS: $VPS_IP\"\necho \"Domain: $DOMAIN\"\necho \"App Directory: $APP_DIR\"\necho \"\"\n\n# Check if the fixed package exists\nif [ ! -f \"lux-email-app-fixed.tar.gz\" ]; then\n    echo -e \"${RED}❌ Error: lux-email-app-fixed.tar.gz not found!${NC}\"\n    echo \"Please ensure you have downloaded the fixed package from your Replit project.\"\n    exit 1\nfi\n\necho -e \"${YELLOW}📁 Uploading fixed application files...${NC}\"\nscp lux-email-app-fixed.tar.gz $VPS_USER@$VPS_IP:/tmp/\n\necho -e \"${YELLOW}🔧 Connecting to VPS and applying fixes...${NC}\"\nssh $VPS_USER@$VPS_IP << 'EOF'\n    set -e\n    \n    echo \"Stopping LUX service...\"\n    systemctl stop lux || true\n    \n    echo \"Creating backup of current installation...\"\n    cp -r /root/lux-email-bot /root/lux-email-bot.backup.$(date +%Y%m%d_%H%M%S) || true\n    \n    echo \"Extracting fixed application files...\"\n    cd /root/lux-email-bot\n    rm -rf LUX-Email-Marketing-Bot.old || true\n    mv LUX-Email-Marketing-Bot LUX-Email-Marketing-Bot.old || true\n    mkdir -p LUX-Email-Marketing-Bot\n    cd LUX-Email-Marketing-Bot\n    tar -xzf /tmp/lux-email-app-fixed.tar.gz\n    \n    echo \"Setting correct permissions...\"\n    chown -R lux-user:lux-user /root/lux-email-bot/LUX-Email-Marketing-Bot || true\n    chmod +x wsgi.py || true\n    \n    echo \"Activating virtual environment and installing dependencies...\"\n    cd /root/lux-email-bot\n    source venv/bin/activate\n    cd LUX-Email-Marketing-Bot\n    pip install -r requirements.txt\n    \n    echo \"Resetting any failed systemd attempts...\"\n    systemctl reset-failed lux || true\n    \n    echo \"Starting LUX service...\"\n    systemctl start lux\n    \n    echo \"Enabling service for auto-start...\"\n    systemctl enable lux\n    \n    sleep 5\n    \n    echo \"Checking service status...\"\n    systemctl status lux --no-pager -l\n    \n    echo \"Testing application...\"\n    echo \"Testing backend health...\"\n    if curl -sSf http://127.0.0.1:5000/ > /dev/null 2>&1; then\n        echo \"✅ Backend is responding!\"\n    else\n        echo \"❌ Backend not responding, checking logs...\"\n        journalctl -u lux -n 20 --no-pager\n        exit 1\n    fi\n    \n    echo \"Testing domain access...\"\n    if curl -k -sSf https://lux.lucifercruz.com/ > /dev/null 2>&1; then\n        echo \"✅ Domain is accessible via HTTPS!\"\n    else\n        echo \"⚠️  Domain not accessible via HTTPS (SSL might need setup)\"\n    fi\n    \n    echo \"Cleaning up...\"\n    rm -f /tmp/lux-email-app-fixed.tar.gz\n    \nEOF\n\necho \"\"\necho -e \"${GREEN}✅ Deployment completed successfully!${NC}\"\necho \"\"\necho \"🌐 Your LUX Email Marketing app should now be accessible at:\"\necho \"   https://$DOMAIN\"\necho \"\"\necho \"📊 To check the application status:\"\necho \"   ssh $VPS_USER@$VPS_IP 'systemctl status lux'\"\necho \"\"\necho \"📱 To view logs:\"\necho \"   ssh $VPS_USER@$VPS_IP 'journalctl -u lux -f'\"\necho \"\"\necho \"🔧 Next steps:\"\necho \"   1. Visit https://$DOMAIN to test the application\"\necho \"   2. Log in with: admin / admin123\"\necho \"   3. Configure your Microsoft Graph API credentials\"\necho \"   4. Add your OpenAI API key for LUX AI features\"\necho \"\"","size_bytes":3620},"ssl-setup.sh":{"content":"#!/bin/bash\n\n# SSL Certificate Setup Script using Let's Encrypt\n# Run this after updating your domain in the Nginx configuration\n\nAPP_NAME=\"email-marketing\"\nDOMAIN=\"\"\n\necho \"=== SSL Certificate Setup ===\"\necho \"\"\n\n# Check if domain is provided\nif [ -z \"$1\" ]; then\n    echo \"Usage: $0 your_domain.com\"\n    echo \"Example: $0 example.com\"\n    exit 1\nfi\n\nDOMAIN=\"$1\"\n\necho \"Setting up SSL certificate for domain: $DOMAIN\"\n\n# Install certbot\necho \"Installing certbot...\"\napt update\napt install -y certbot python3-certbot-nginx\n\n# Update Nginx configuration with the domain\necho \"Updating Nginx configuration...\"\nsed -i \"s/your_domain.com www.your_domain.com/$DOMAIN www.$DOMAIN/g\" /etc/nginx/sites-available/$APP_NAME\n\n# Test Nginx configuration\nnginx -t\n\n# Reload Nginx\nsystemctl reload nginx\n\n# Obtain SSL certificate\necho \"Obtaining SSL certificate...\"\ncertbot --nginx -d \"$DOMAIN\" -d \"www.$DOMAIN\" --non-interactive --agree-tos --email admin@$DOMAIN\n\n# Set up automatic renewal\necho \"Setting up automatic certificate renewal...\"\nsystemctl enable certbot.timer\nsystemctl start certbot.timer\n\necho \"\"\necho \"=== SSL Setup Complete! ===\"\necho \"\"\necho \"Your site is now available at:\"\necho \"  https://$DOMAIN\"\necho \"  https://www.$DOMAIN\"\necho \"\"\necho \"Certificate will auto-renew. Check status with:\"\necho \"  certbot certificates\"\necho \"  systemctl status certbot.timer\"\necho \"\"","size_bytes":1374},"direct_vps_deploy.sh":{"content":"#!/bin/bash\n\n# Direct VPS Deployment - Copy Current Files from Replit to VPS\n# Run this from your LOCAL machine where you have access to both Replit and VPS\n\nset -e\n\nVPS_HOST=\"194.195.92.52\"\nVPS_USER=\"root\"\nVPS_PATH=\"/var/www/lux-marketing\"\nBACKUP_PATH=\"/var/backups/lux-$(date +%Y%m%d_%H%M%S)\"\n\necho \"🚀 Direct VPS Deployment from Current Replit\"\necho \"=============================================\"\n\n# Step 1: SSH into VPS and prepare\necho \"📋 Preparing VPS environment...\"\nssh $VPS_USER@$VPS_HOST << 'EOF'\n    # Backup current deployment\n    if [ -d \"/var/www/lux-marketing\" ]; then\n        mkdir -p /var/backups\n        cp -r /var/www/lux-marketing /var/backups/lux-$(date +%Y%m%d_%H%M%S) 2>/dev/null || true\n    fi\n    \n    # Stop service\n    systemctl stop lux-marketing 2>/dev/null || true\n    \n    # Clear old files\n    rm -rf /var/www/lux-marketing/*\n    mkdir -p /var/www/lux-marketing\n    \n    echo \"VPS prepared for new deployment\"\nEOF\n\necho \"✅ VPS prepared\"\n\n# Step 2: Get current files from Replit\necho \"📥 Downloading current files from Replit...\"\n\n# Create a temporary directory\nTEMP_DIR=\"/tmp/lux-replit-$(date +%s)\"\nmkdir -p \"$TEMP_DIR\"\n\n# This is where you need to put the Replit files\necho \"📝 IMPORTANT: Copy your Replit files to: $TEMP_DIR\"\necho \"\"\necho \"Run these commands in your Replit terminal:\"\necho \"cd /home/runner/\\$(basename \\$PWD)\"\necho \"tar czf /tmp/current-lux.tar.gz --exclude='*.tar.gz' --exclude='.git*' --exclude='__pycache__' --exclude='*.pyc' --exclude='instance/*.db' --exclude='venv*' .\"\necho \"\"\necho \"Then download the tar.gz file and extract it to: $TEMP_DIR\"\necho \"\"\nread -p \"Press Enter when you've copied the current Replit files to $TEMP_DIR...\"\n\n# Step 3: Upload to VPS\necho \"📤 Uploading current files to VPS...\"\nrsync -avz --progress \\\n    --exclude='*.tar.gz' \\\n    --exclude='.git*' \\\n    --exclude='__pycache__' \\\n    --exclude='*.pyc' \\\n    --exclude='venv*' \\\n    --exclude='instance/*.db' \\\n    --exclude='*.log' \\\n    \"$TEMP_DIR/\" $VPS_USER@$VPS_HOST:$VPS_PATH/\n\necho \"✅ Files uploaded\"\n\n# Step 4: Configure VPS\necho \"⚙️ Configuring VPS...\"\nssh $VPS_USER@$VPS_HOST << 'EOF'\n    cd /var/www/lux-marketing\n    \n    # Set permissions\n    chown -R luxapp:www-data /var/www/lux-marketing\n    chmod -R 755 /var/www/lux-marketing\n    \n    # Create virtual environment\n    sudo -u luxapp python3 -m venv venv\n    sudo -u luxapp venv/bin/pip install --upgrade pip\n    \n    # Install dependencies\n    sudo -u luxapp venv/bin/pip install flask gunicorn flask-sqlalchemy flask-login flask-wtf\n    sudo -u luxapp venv/bin/pip install psycopg2-binary msal openai requests twilio apscheduler\n    sudo -u luxapp venv/bin/pip install email-validator itsdangerous werkzeug jinja2\n    \n    # Create directories\n    mkdir -p static/uploads instance logs\n    chown -R luxapp:www-data static/uploads instance logs\n    \n    # Initialize database\n    sudo -u luxapp -H bash -c \"\n        cd /var/www/lux-marketing\n        source venv/bin/activate\n        export DATABASE_URL='postgresql://luxuser:LuxPass2024!@localhost/lux_marketing'\n        export SESSION_SECRET='lux-secret-2024'\n        python3 -c \\\"\nfrom app import app, db\nwith app.app_context():\n    db.create_all()\n    print('Database initialized')\n\\\"\n    \"\n    \n    # Start service\n    systemctl start lux-marketing\n    systemctl status lux-marketing --no-pager\n    \n    echo \"✅ VPS configuration complete\"\nEOF\n\n# Cleanup\nrm -rf \"$TEMP_DIR\"\n\necho \"\"\necho \"🎉 Deployment Complete!\"\necho \"Visit: http://lux.lucifercruz.com\"\necho \"\"\necho \"To verify your current templates are deployed:\"\necho \"ssh $VPS_USER@$VPS_HOST 'ls -la /var/www/lux-marketing/templates/'\"","size_bytes":3671},"gunicorn-dev.conf.py":{"content":"# Gunicorn configuration file for development\n\n# Server socket\nbind = \"0.0.0.0:5000\"\n\n# Worker processes (fewer for development)\nworkers = 2\nworker_class = \"sync\"\ntimeout = 30\n\n# Logging (stdout/stderr for development)\naccesslog = \"-\"\nerrorlog = \"-\"\nloglevel = \"info\"\n\n# Development settings\nreload = True\npreload_app = False","size_bytes":325},"models.py":{"content":"from datetime import datetime\nfrom app import db\nfrom flask_login import UserMixin\nfrom sqlalchemy import JSON, Text\n\nclass User(UserMixin, db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(64), unique=True, nullable=False)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    password_hash = db.Column(db.String(256))\n    is_admin = db.Column(db.Boolean, default=False)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    def __repr__(self):\n        return f'<User {self.username}>'\n\nclass Contact(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), nullable=False)\n    first_name = db.Column(db.String(64))\n    last_name = db.Column(db.String(64))\n    company = db.Column(db.String(120))\n    phone = db.Column(db.String(20))\n    tags = db.Column(db.String(255))  # Comma-separated tags\n    custom_fields = db.Column(JSON)  # Additional custom data\n    engagement_score = db.Column(db.Float, default=0.0)\n    last_activity = db.Column(db.DateTime)\n    source = db.Column(db.String(50))  # web_form, manual, import, api\n    is_active = db.Column(db.Boolean, default=True)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\n    \n    # Relationships\n    campaign_recipients = db.relationship('CampaignRecipient', backref='contact', lazy='dynamic')\n    segment_members = db.relationship('SegmentMember', backref='contact', lazy='dynamic')\n    \n    def __repr__(self):\n        return f'<Contact {self.email}>'\n    \n    @property\n    def full_name(self):\n        if self.first_name and self.last_name:\n            return f\"{self.first_name} {self.last_name}\"\n        return self.first_name or self.last_name or self.email\n\nclass EmailTemplate(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(120), nullable=False)\n    subject = db.Column(db.String(255), nullable=False)\n    html_content = db.Column(Text, nullable=False)\n    template_type = db.Column(db.String(20), default='custom')  # custom, automation, branded\n    brandkit_id = db.Column(db.Integer, db.ForeignKey('brand_kit.id'))\n    is_active = db.Column(db.Boolean, default=True)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\n    \n    # Relationships\n    campaigns = db.relationship('Campaign', backref='template', lazy='dynamic')\n    components = db.relationship('EmailComponent', backref='template', lazy='dynamic', cascade='all, delete-orphan')\n    \n    def __repr__(self):\n        return f'<EmailTemplate {self.name}>'\n\nclass Campaign(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(120), nullable=False)\n    subject = db.Column(db.String(255), nullable=False)\n    template_id = db.Column(db.Integer, db.ForeignKey('email_template.id'))\n    automation_id = db.Column(db.Integer, db.ForeignKey('automation.id'))\n    ab_test_id = db.Column(db.Integer, db.ForeignKey('ab_test.id'))\n    status = db.Column(db.String(20), default='draft')  # draft, scheduled, sending, sent, paused\n    scheduled_at = db.Column(db.DateTime)\n    sent_at = db.Column(db.DateTime)\n    revenue_generated = db.Column(db.Float, default=0.0)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\n    \n    # Relationships\n    recipients = db.relationship('CampaignRecipient', backref='campaign', lazy='dynamic', cascade='all, delete-orphan')\n    \n    def __repr__(self):\n        return f'<Campaign {self.name}>'\n    \n    @property\n    def total_recipients(self):\n        return self.recipients.count()\n    \n    @property\n    def sent_count(self):\n        return self.recipients.filter_by(status='sent').count()\n    \n    @property\n    def failed_count(self):\n        return self.recipients.filter_by(status='failed').count()\n    \n    @property\n    def pending_count(self):\n        return self.recipients.filter_by(status='pending').count()\n\nclass CampaignRecipient(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    campaign_id = db.Column(db.Integer, db.ForeignKey('campaign.id'), nullable=False)\n    contact_id = db.Column(db.Integer, db.ForeignKey('contact.id'), nullable=False)\n    variant = db.Column(db.String(1))  # For A/B testing: 'A' or 'B'\n    status = db.Column(db.String(20), default='pending')  # pending, sent, failed, bounced\n    sent_at = db.Column(db.DateTime)\n    opened_at = db.Column(db.DateTime)\n    clicked_at = db.Column(db.DateTime)\n    error_message = db.Column(Text)\n    \n    def __repr__(self):\n        return f'<CampaignRecipient {self.campaign_id}:{self.contact_id}>'\n\nclass EmailTracking(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    campaign_id = db.Column(db.Integer, db.ForeignKey('campaign.id'), nullable=False)\n    contact_id = db.Column(db.Integer, db.ForeignKey('contact.id'), nullable=False)\n    event_type = db.Column(db.String(20), nullable=False)  # sent, delivered, opened, clicked, bounced\n    event_data = db.Column(JSON)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    def __repr__(self):\n        return f'<EmailTracking {self.event_type}>'\n\n# BrandKit System\nclass BrandKit(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(120), nullable=False)\n    logo_url = db.Column(db.String(255))\n    primary_color = db.Column(db.String(7))  # Hex color\n    secondary_color = db.Column(db.String(7))\n    accent_color = db.Column(db.String(7))\n    primary_font = db.Column(db.String(50))\n    secondary_font = db.Column(db.String(50))\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    is_default = db.Column(db.Boolean, default=False)\n    \n    def __repr__(self):\n        return f'<BrandKit {self.name}>'\n\n# Automation Templates & Advanced Features\nclass AutomationTemplate(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(120), nullable=False)\n    description = db.Column(Text)\n    category = db.Column(db.String(50))  # welcome, ecommerce, engagement, nurture\n    template_data = db.Column(JSON)  # Complete automation workflow template\n    is_predefined = db.Column(db.Boolean, default=False)  # System templates vs user-created\n    usage_count = db.Column(db.Integer, default=0)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    def __repr__(self):\n        return f'<AutomationTemplate {self.name}>'\n\nclass AutomationExecution(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    automation_id = db.Column(db.Integer, db.ForeignKey('automation.id'), nullable=False)\n    contact_id = db.Column(db.Integer, db.ForeignKey('contact.id'), nullable=False)\n    current_step = db.Column(db.Integer, default=0)\n    status = db.Column(db.String(20), default='active')  # active, completed, paused, failed\n    started_at = db.Column(db.DateTime, default=datetime.utcnow)\n    completed_at = db.Column(db.DateTime)\n    next_action_at = db.Column(db.DateTime)\n    \n    def __repr__(self):\n        return f'<AutomationExecution {self.automation_id}:{self.contact_id}>'\n\nclass AutomationAction(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    execution_id = db.Column(db.Integer, db.ForeignKey('automation_execution.id'), nullable=False)\n    step_id = db.Column(db.Integer, db.ForeignKey('automation_step.id'), nullable=False)\n    action_type = db.Column(db.String(50))  # email_sent, sms_sent, wait_completed, condition_met\n    status = db.Column(db.String(20), default='pending')  # pending, completed, failed, skipped\n    executed_at = db.Column(db.DateTime)\n    result_data = db.Column(JSON)\n    error_message = db.Column(Text)\n    \n    def __repr__(self):\n        return f'<AutomationAction {self.action_type}>'\n\n# Landing Pages & Enhanced Web Forms  \nclass LandingPage(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(120), nullable=False)\n    title = db.Column(db.String(200))\n    slug = db.Column(db.String(100), unique=True)  # URL-friendly name\n    html_content = db.Column(Text)\n    css_styles = db.Column(Text)\n    meta_description = db.Column(db.String(160))\n    form_id = db.Column(db.Integer, db.ForeignKey('web_form.id'))\n    is_published = db.Column(db.Boolean, default=False)\n    page_views = db.Column(db.Integer, default=0)\n    conversions = db.Column(db.Integer, default=0)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    published_at = db.Column(db.DateTime)\n    \n    # Relationships\n    form = db.relationship('WebForm', backref='landing_pages')\n    \n    def __repr__(self):\n        return f'<LandingPage {self.name}>'\n\nclass NewsletterArchive(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    campaign_id = db.Column(db.Integer, db.ForeignKey('campaign.id'), nullable=False)\n    title = db.Column(db.String(200))\n    slug = db.Column(db.String(100), unique=True)\n    html_content = db.Column(Text)\n    published_at = db.Column(db.DateTime, default=datetime.utcnow)\n    view_count = db.Column(db.Integer, default=0)\n    is_public = db.Column(db.Boolean, default=True)\n    \n    # Relationships\n    campaign = db.relationship('Campaign', backref='archive_entry')\n    \n    def __repr__(self):\n        return f'<NewsletterArchive {self.title}>'\n\n# Enhanced Email Automation Features\nclass NonOpenerResend(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    original_campaign_id = db.Column(db.Integer, db.ForeignKey('campaign.id'), nullable=False)\n    resend_campaign_id = db.Column(db.Integer, db.ForeignKey('campaign.id'))\n    hours_after_original = db.Column(db.Integer, default=24)\n    new_subject_line = db.Column(db.String(255))\n    status = db.Column(db.String(20), default='scheduled')  # scheduled, sent, cancelled\n    scheduled_at = db.Column(db.DateTime)\n    sent_at = db.Column(db.DateTime)\n    recipient_count = db.Column(db.Integer, default=0)\n    \n    # Relationships\n    original_campaign = db.relationship('Campaign', foreign_keys=[original_campaign_id], backref='non_opener_resends')\n    resend_campaign = db.relationship('Campaign', foreign_keys=[resend_campaign_id])\n    \n    def __repr__(self):\n        return f'<NonOpenerResend {self.original_campaign_id}>'\n\n# Drag & Drop Email Builder\nclass EmailComponent(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    template_id = db.Column(db.Integer, db.ForeignKey('email_template.id'))\n    component_type = db.Column(db.String(50), nullable=False)  # text, image, button, divider, social\n    content = db.Column(JSON)  # Component configuration and content\n    position = db.Column(db.Integer, default=0)  # Order in template\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    def __repr__(self):\n        return f'<EmailComponent {self.component_type}>'\n\n# Polls & Surveys\nclass Poll(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    campaign_id = db.Column(db.Integer, db.ForeignKey('campaign.id'))\n    question = db.Column(db.String(500), nullable=False)\n    poll_type = db.Column(db.String(20), default='multiple_choice')  # multiple_choice, rating, text\n    options = db.Column(JSON)  # Poll options\n    is_active = db.Column(db.Boolean, default=True)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    # Relationships\n    responses = db.relationship('PollResponse', backref='poll', lazy='dynamic')\n    \n    def __repr__(self):\n        return f'<Poll {self.question[:50]}>'\n\nclass PollResponse(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    poll_id = db.Column(db.Integer, db.ForeignKey('poll.id'), nullable=False)\n    contact_id = db.Column(db.Integer, db.ForeignKey('contact.id'), nullable=False)\n    response_data = db.Column(JSON)  # Answer data\n    submitted_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    def __repr__(self):\n        return f'<PollResponse {self.poll_id}:{self.contact_id}>'\n\n# A/B Testing\nclass ABTest(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    campaign_id = db.Column(db.Integer, db.ForeignKey('campaign.id'), nullable=False)\n    test_type = db.Column(db.String(20), default='subject_line')  # subject_line, content, send_time\n    variant_a = db.Column(Text)  # First variant\n    variant_b = db.Column(Text)  # Second variant\n    split_ratio = db.Column(db.Float, default=0.5)  # 50/50 split\n    winner = db.Column(db.String(1))  # 'A', 'B', or NULL if undecided\n    status = db.Column(db.String(20), default='draft')  # draft, running, completed\n    started_at = db.Column(db.DateTime)\n    ended_at = db.Column(db.DateTime)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    def __repr__(self):\n        return f'<ABTest {self.test_type}>'\n\n# Automation Workflows\nclass Automation(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(120), nullable=False)\n    description = db.Column(Text)\n    trigger_type = db.Column(db.String(50))  # signup, purchase, birthday, custom\n    trigger_conditions = db.Column(JSON)\n    is_active = db.Column(db.Boolean, default=True)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    # Relationships\n    steps = db.relationship('AutomationStep', backref='automation', lazy='dynamic', cascade='all, delete-orphan')\n    \n    def __repr__(self):\n        return f'<Automation {self.name}>'\n\nclass AutomationStep(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    automation_id = db.Column(db.Integer, db.ForeignKey('automation.id'), nullable=False)\n    step_type = db.Column(db.String(20))  # email, sms, wait, condition\n    step_order = db.Column(db.Integer, default=0)\n    template_id = db.Column(db.Integer, db.ForeignKey('email_template.id'))\n    delay_hours = db.Column(db.Integer, default=0)\n    conditions = db.Column(JSON)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    def __repr__(self):\n        return f'<AutomationStep {self.step_type}>'\n\n# SMS Marketing\nclass SMSCampaign(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(120), nullable=False)\n    message = db.Column(db.String(160), nullable=False)  # SMS character limit\n    status = db.Column(db.String(20), default='draft')\n    scheduled_at = db.Column(db.DateTime)\n    sent_at = db.Column(db.DateTime)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    # Relationships\n    recipients = db.relationship('SMSRecipient', backref='campaign', lazy='dynamic', cascade='all, delete-orphan')\n    \n    def __repr__(self):\n        return f'<SMSCampaign {self.name}>'\n\nclass SMSRecipient(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    campaign_id = db.Column(db.Integer, db.ForeignKey('sms_campaign.id'), nullable=False)\n    contact_id = db.Column(db.Integer, db.ForeignKey('contact.id'), nullable=False)\n    status = db.Column(db.String(20), default='pending')\n    sent_at = db.Column(db.DateTime)\n    delivered_at = db.Column(db.DateTime)\n    error_message = db.Column(Text)\n    \n    def __repr__(self):\n        return f'<SMSRecipient {self.campaign_id}:{self.contact_id}>'\n\n# Social Media Marketing\nclass SocialPost(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    content = db.Column(Text, nullable=False)\n    platforms = db.Column(JSON)  # ['facebook', 'instagram', 'linkedin']\n    media_urls = db.Column(JSON)  # Image/video URLs\n    status = db.Column(db.String(20), default='draft')  # draft, scheduled, published, failed\n    scheduled_at = db.Column(db.DateTime)\n    published_at = db.Column(db.DateTime)\n    engagement_data = db.Column(JSON)  # Likes, shares, comments\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    def __repr__(self):\n        return f'<SocialPost {self.content[:50]}>'\n\n# Contact Segmentation\nclass Segment(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(120), nullable=False)\n    description = db.Column(Text)\n    segment_type = db.Column(db.String(20), default='behavioral')  # behavioral, demographic, engagement\n    conditions = db.Column(JSON)  # Segmentation rules\n    is_dynamic = db.Column(db.Boolean, default=True)  # Auto-update based on conditions\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    # Relationships\n    members = db.relationship('SegmentMember', backref='segment', lazy='dynamic', cascade='all, delete-orphan')\n    \n    def __repr__(self):\n        return f'<Segment {self.name}>'\n\nclass SegmentMember(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    segment_id = db.Column(db.Integer, db.ForeignKey('segment.id'), nullable=False)\n    contact_id = db.Column(db.Integer, db.ForeignKey('contact.id'), nullable=False)\n    added_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    def __repr__(self):\n        return f'<SegmentMember {self.segment_id}:{self.contact_id}>'\n\n# Web Signup Forms\nclass WebForm(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(120), nullable=False)\n    title = db.Column(db.String(200))\n    description = db.Column(Text)\n    fields = db.Column(JSON)  # Form field configuration\n    success_message = db.Column(Text)\n    redirect_url = db.Column(db.String(255))\n    is_active = db.Column(db.Boolean, default=True)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    # Relationships\n    submissions = db.relationship('FormSubmission', backref='form', lazy='dynamic')\n    \n    def __repr__(self):\n        return f'<WebForm {self.name}>'\n\nclass FormSubmission(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    form_id = db.Column(db.Integer, db.ForeignKey('web_form.id'), nullable=False)\n    contact_id = db.Column(db.Integer, db.ForeignKey('contact.id'))\n    form_data = db.Column(JSON)  # Submitted form data\n    ip_address = db.Column(db.String(45))\n    user_agent = db.Column(db.String(500))\n    submitted_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    def __repr__(self):\n        return f'<FormSubmission {self.form_id}>'\n\n# Events & Registration\nclass Event(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(200), nullable=False)\n    description = db.Column(Text)\n    start_date = db.Column(db.DateTime, nullable=False)\n    end_date = db.Column(db.DateTime)\n    location = db.Column(db.String(255))\n    max_attendees = db.Column(db.Integer)\n    price = db.Column(db.Float, default=0.0)\n    is_active = db.Column(db.Boolean, default=True)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    # Relationships\n    registrations = db.relationship('EventRegistration', backref='event', lazy='dynamic')\n    \n    def __repr__(self):\n        return f'<Event {self.name}>'\n\nclass EventRegistration(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    event_id = db.Column(db.Integer, db.ForeignKey('event.id'), nullable=False)\n    contact_id = db.Column(db.Integer, db.ForeignKey('contact.id'), nullable=False)\n    status = db.Column(db.String(20), default='registered')  # registered, attended, cancelled\n    payment_status = db.Column(db.String(20), default='pending')  # pending, paid, refunded\n    registered_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    def __repr__(self):\n        return f'<EventRegistration {self.event_id}:{self.contact_id}>'\n\n# Products & Services\nclass Product(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(200), nullable=False)\n    description = db.Column(Text)\n    price = db.Column(db.Float, nullable=False)\n    sku = db.Column(db.String(50))\n    category = db.Column(db.String(100))\n    image_url = db.Column(db.String(255))\n    is_active = db.Column(db.Boolean, default=True)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    # Relationships\n    orders = db.relationship('Order', backref='product', lazy='dynamic')\n    \n    def __repr__(self):\n        return f'<Product {self.name}>'\n\n# Revenue Tracking\nclass Order(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    contact_id = db.Column(db.Integer, db.ForeignKey('contact.id'), nullable=False)\n    product_id = db.Column(db.Integer, db.ForeignKey('product.id'))\n    campaign_id = db.Column(db.Integer, db.ForeignKey('campaign.id'))  # Attribution\n    order_number = db.Column(db.String(50), unique=True)\n    total_amount = db.Column(db.Float, nullable=False)\n    status = db.Column(db.String(20), default='pending')  # pending, completed, refunded\n    payment_method = db.Column(db.String(50))\n    stripe_payment_id = db.Column(db.String(100))\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    def __repr__(self):\n        return f'<Order {self.order_number}>'\n\n# Marketing Calendar\nclass CalendarEvent(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    title = db.Column(db.String(200), nullable=False)\n    description = db.Column(Text)\n    event_type = db.Column(db.String(20))  # campaign, social_post, event, task\n    start_date = db.Column(db.DateTime, nullable=False)\n    end_date = db.Column(db.DateTime)\n    campaign_id = db.Column(db.Integer, db.ForeignKey('campaign.id'))\n    social_post_id = db.Column(db.Integer, db.ForeignKey('social_post.id'))\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    def __repr__(self):\n        return f'<CalendarEvent {self.title}>'","size_bytes":21696},"backup.sh":{"content":"#!/bin/bash\n\n# Backup script for Email Marketing App\n# Creates backups of database and application files\n\nAPP_NAME=\"email-marketing\"\nAPP_DIR=\"/opt/$APP_NAME\"\nBACKUP_DIR=\"/var/backups/$APP_NAME\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\necho \"=== Email Marketing App Backup Script ===\"\n\n# Create backup directory\nmkdir -p \"$BACKUP_DIR\"\n\n# Backup database\necho \"Backing up database...\"\nsudo -u postgres pg_dump \"${APP_NAME}_db\" > \"$BACKUP_DIR/database_$DATE.sql\"\n\n# Backup application files\necho \"Backing up application files...\"\ntar -czf \"$BACKUP_DIR/app_files_$DATE.tar.gz\" -C \"$APP_DIR\" .\n\n# Backup environment configuration\necho \"Backing up configuration...\"\ncp \"$APP_DIR/.env\" \"$BACKUP_DIR/env_$DATE.backup\"\n\n# Clean old backups (keep last 7 days)\necho \"Cleaning old backups...\"\nfind \"$BACKUP_DIR\" -type f -mtime +7 -delete\n\n# Set permissions\nchown -R root:root \"$BACKUP_DIR\"\nchmod 600 \"$BACKUP_DIR\"/*\n\necho \"Backup completed successfully!\"\necho \"Files saved to: $BACKUP_DIR\"\necho \"\"\necho \"Latest backups:\"\nls -la \"$BACKUP_DIR\" | tail -5","size_bytes":1027},"replit.md":{"content":"# Email Marketing Automation Bot\n\n## Overview\n\nThis is a comprehensive email marketing automation platform built with Flask. The system enables users to manage contacts, create email templates, design marketing campaigns, and track email performance analytics. It integrates with Microsoft Graph API for email delivery and provides a complete workflow from contact management to campaign execution and analytics.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Template Engine**: Jinja2 templates with Bootstrap 5 dark theme\n- **Static Assets**: Custom CSS and JavaScript for enhanced user experience\n- **UI Components**: Responsive design with Feather icons and Bootstrap components\n- **Page Structure**: Modular template inheritance with base.html as foundation\n\n### Backend Architecture\n- **Framework**: Flask web framework with Blueprint-based modular routing\n- **Authentication**: Flask-Login for session management with password hashing\n- **Database ORM**: SQLAlchemy with declarative base for database operations\n- **Background Tasks**: APScheduler for campaign scheduling and automated email sending\n- **Email Service**: Dedicated EmailService class handling Microsoft Graph API integration\n\n### Data Storage Solutions\n- **Primary Database**: SQLite (configurable to other databases via SQLAlchemy)\n- **Schema Design**: Relational model with Users, Contacts, EmailTemplates, Campaigns, CampaignRecipients, and EmailTracking tables\n- **Connection Management**: Connection pooling with health checks and automatic reconnection\n\n### Authentication and Authorization\n- **User Management**: Flask-Login with secure password hashing using Werkzeug\n- **Session Security**: Configurable session secrets with secure cookie handling\n- **Access Control**: Login required decorators protecting all main functionality\n- **User Registration**: Admin-only user creation system\n\n### Email Delivery System\n- **Provider**: Microsoft Graph API for enterprise-grade email delivery\n- **Authentication**: MSAL (Microsoft Authentication Library) with client credentials flow\n- **Template Processing**: Jinja2 template rendering with contact personalization\n- **Tracking**: Open and click tracking with unique tracking pixels and links\n\n### Campaign Management\n- **Scheduling**: Background scheduler for automated campaign execution\n- **Status Tracking**: Comprehensive campaign status management (draft, scheduled, sending, sent, failed, paused)\n- **Recipient Management**: Tag-based contact filtering and bulk operations\n- **Analytics**: Real-time tracking of delivery, opens, clicks, and engagement metrics\n\n## External Dependencies\n\n### Microsoft Graph API Integration\n- **Service**: Microsoft 365 email delivery service\n- **Authentication**: OAuth 2.0 with tenant-specific configuration\n- **Required Credentials**: Client ID, Client Secret, and Tenant ID\n- **Permissions**: Mail.Send application permission for sending emails\n\n### OpenAI Integration (LUX AI Agent)\n- **Service**: OpenAI GPT-4o for automated email marketing intelligence\n- **Authentication**: API key-based authentication\n- **Features**: Campaign generation, content optimization, audience analysis\n- **Agent Name**: LUX - Automated Email Marketing Assistant\n- **DALL-E Integration**: Automatic image generation for email campaigns\n- **WooCommerce Integration**: Product-focused campaigns with live product data\n\n### Python Libraries\n- **Flask**: Web framework with SQLAlchemy, Login, and other extensions\n- **MSAL**: Microsoft Authentication Library for Graph API access\n- **APScheduler**: Background task scheduling for automated campaigns\n- **Jinja2**: Template engine for email content personalization\n- **Werkzeug**: WSGI utilities and security functions\n- **OpenAI**: AI-powered content generation and optimization\n- **Twilio**: SMS marketing and communication platform\n\n### Frontend Dependencies\n- **Bootstrap 5**: UI framework with dark theme support\n- **Feather Icons**: Lightweight icon set for consistent UI\n- **Custom CSS/JS**: Enhanced user experience and form validations\n\n### Database Configuration\n- **SQLAlchemy**: ORM supporting multiple database backends\n- **Default**: SQLite for development (easily configurable for PostgreSQL, MySQL)\n- **Features**: Connection pooling, health checks, and migration support\n\n## Production Deployment (October 21, 2025)\n\n### VPS Deployment Details\n- **Server**: Hostinger VPS at 194.195.92.52\n- **Domain**: https://lux.lucifercruz.com\n- **Application Path**: /var/www/lux-marketing\n- **System User**: luxapp:www-data\n- **Database**: PostgreSQL (luxuser@localhost/lux_marketing)\n\n### Production Stack\n- **Web Server**: Nginx 1.22.1 with SSL/TLS (Let's Encrypt)\n- **Application Server**: Gunicorn with 4 workers\n- **Process Manager**: systemd (lux-marketing.service)\n- **Python Environment**: Virtual environment at /var/www/lux-marketing/venv\n- **Log Location**: /var/log/lux-marketing/ and journalctl\n\n### Security Configuration\n- **Environment Variables**: /etc/lux/lux-marketing.env (640 permissions, root:luxapp)\n- **Systemd Hardening**: ProtectSystem=strict, ProtectHome=true, NoNewPrivileges=true\n- **SSL/TLS**: Full HTTPS with automatic HTTP→HTTPS redirect\n- **Admin Account**: Initial admin user (password must be changed on first deployment)\n\n### Service Management\n- **Start**: systemctl start lux-marketing.service\n- **Stop**: systemctl stop lux-marketing.service\n- **Restart**: systemctl restart lux-marketing.service\n- **Status**: systemctl status lux-marketing.service\n- **Logs**: journalctl -u lux-marketing.service -f\n\n### Database Schema\nAll tables successfully created:\n- User (with admin authentication)\n- Contact (email marketing contacts)\n- EmailTemplate (reusable email templates)\n- Campaign (marketing campaigns)\n- CampaignRecipient (campaign delivery tracking)\n- EmailTracking (analytics events)\n- BrandKit (branding configurations)\n- Automation (workflow automation)\n- AutomationStep (workflow steps)\n- Segment (contact segments)\n- SegmentMember (segment membership)\n- ABTest (A/B testing campaigns)\n- EmailComponent (template components)\n\n### Recent Changes (October 21, 2025)\n- Fixed circular dependency between Campaign and ABTest models\n- Deployed complete application to production VPS\n- Configured systemd service with security hardening\n- Set up Nginx reverse proxy with SSL\n- Initialized PostgreSQL database with all schemas\n- Configured OpenAI API key for LUX AI agent\n- Added SMS Marketing feature with Twilio integration (campaigns, compliance, delivery tracking)\n- Added Social Media Marketing feature (Facebook, Instagram, LinkedIn, Twitter scheduling with AI captions)\n- Fixed A/B Testing template error (preview_campaign link)\n- Verified Automations dashboard functionality","size_bytes":6810},"user_management.py":{"content":"from flask import Blueprint, render_template, request, flash, redirect, url_for, jsonify\nfrom flask_login import login_required, current_user\nfrom werkzeug.security import generate_password_hash, check_password_hash\nfrom app import db\nfrom models import User\nfrom utils import validate_email\n\nuser_bp = Blueprint('user', __name__)\n\n@user_bp.route('/profile')\n@login_required\ndef profile():\n    \"\"\"User profile page\"\"\"\n    return render_template('user_profile.html', user=current_user)\n\n@user_bp.route('/change-password', methods=['GET', 'POST'])\n@login_required\ndef change_password():\n    \"\"\"Change user password\"\"\"\n    if request.method == 'POST':\n        current_password = request.form.get('current_password', '')\n        new_password = request.form.get('new_password', '')\n        confirm_password = request.form.get('confirm_password', '')\n        \n        if not all([current_password, new_password, confirm_password]):\n            flash('All fields are required', 'error')\n            return render_template('change_password.html')\n        \n        # Verify current password\n        if not check_password_hash(current_user.password_hash, current_password):\n            flash('Current password is incorrect', 'error')\n            return render_template('change_password.html')\n        \n        # Validate new password\n        if len(new_password) < 6:\n            flash('New password must be at least 6 characters long', 'error')\n            return render_template('change_password.html')\n        \n        if new_password != confirm_password:\n            flash('New passwords do not match', 'error')\n            return render_template('change_password.html')\n        \n        # Update password\n        current_user.password_hash = generate_password_hash(new_password)\n        db.session.commit()\n        \n        flash('Password updated successfully', 'success')\n        return redirect(url_for('user.profile'))\n    \n    return render_template('change_password.html')\n\n@user_bp.route('/manage-users')\n@login_required\ndef manage_users():\n    \"\"\"Manage all users (admin function)\"\"\"\n    users = User.query.order_by(User.created_at.desc()).all()\n    return render_template('manage_users.html', users=users)\n\n@user_bp.route('/add-user', methods=['GET', 'POST'])\n@login_required\ndef add_user():\n    \"\"\"Add a new user\"\"\"\n    if request.method == 'POST':\n        username = request.form.get('username', '').strip()\n        email = request.form.get('email', '').strip()\n        password = request.form.get('password', '')\n        confirm_password = request.form.get('confirm_password', '')\n        is_admin = bool(request.form.get('is_admin'))\n        \n        if not all([username, email, password, confirm_password]):\n            flash('All fields are required', 'error')\n            return render_template('add_user.html')\n        \n        # Validate email\n        if not validate_email(email):\n            flash('Invalid email format', 'error')\n            return render_template('add_user.html')\n        \n        # Validate password\n        if len(password) < 6:\n            flash('Password must be at least 6 characters long', 'error')\n            return render_template('add_user.html')\n        \n        if password != confirm_password:\n            flash('Passwords do not match', 'error')\n            return render_template('add_user.html')\n        \n        # Check if user already exists\n        if User.query.filter_by(username=username).first():\n            flash('Username already exists', 'error')\n            return render_template('add_user.html')\n        \n        if User.query.filter_by(email=email).first():\n            flash('Email already exists', 'error')\n            return render_template('add_user.html')\n        \n        # Create new user\n        user = User()\n        user.username = username\n        user.email = email\n        user.password_hash = generate_password_hash(password)\n        user.is_admin = is_admin\n        \n        db.session.add(user)\n        db.session.commit()\n        \n        flash(f'User \"{username}\" created successfully', 'success')\n        return redirect(url_for('user.manage_users'))\n    \n    return render_template('add_user.html')\n\n@user_bp.route('/delete-user/<int:user_id>', methods=['POST'])\n@login_required\ndef delete_user(user_id):\n    \"\"\"Delete a user\"\"\"\n    if user_id == current_user.id:\n        flash('Cannot delete your own account', 'error')\n        return redirect(url_for('user.manage_users'))\n    \n    user = User.query.get_or_404(user_id)\n    username = user.username\n    \n    db.session.delete(user)\n    db.session.commit()\n    \n    flash(f'User \"{username}\" deleted successfully', 'success')\n    return redirect(url_for('user.manage_users'))\n\n@user_bp.route('/edit-user/<int:user_id>', methods=['GET', 'POST'])\n@login_required\ndef edit_user(user_id):\n    \"\"\"Edit user details\"\"\"\n    user = User.query.get_or_404(user_id)\n    \n    if request.method == 'POST':\n        username = request.form.get('username', '').strip()\n        email = request.form.get('email', '').strip()\n        new_password = request.form.get('new_password', '')\n        is_admin = bool(request.form.get('is_admin'))\n        \n        if not all([username, email]):\n            flash('Username and email are required', 'error')\n            return render_template('edit_user.html', user=user)\n        \n        # Validate email\n        if not validate_email(email):\n            flash('Invalid email format', 'error')\n            return render_template('edit_user.html', user=user)\n        \n        # Check for duplicates (excluding current user)\n        existing_username = User.query.filter(User.username == username, User.id != user_id).first()\n        if existing_username:\n            flash('Username already exists', 'error')\n            return render_template('edit_user.html', user=user)\n        \n        existing_email = User.query.filter(User.email == email, User.id != user_id).first()\n        if existing_email:\n            flash('Email already exists', 'error')\n            return render_template('edit_user.html', user=user)\n        \n        # Update user details\n        user.username = username\n        user.email = email\n        user.is_admin = is_admin\n        \n        # Update password if provided\n        if new_password:\n            if len(new_password) < 6:\n                flash('Password must be at least 6 characters long', 'error')\n                return render_template('edit_user.html', user=user)\n            user.password_hash = generate_password_hash(new_password)\n        \n        db.session.commit()\n        \n        flash(f'User \"{username}\" updated successfully', 'success')\n        return redirect(url_for('user.manage_users'))\n    \n    return render_template('edit_user.html', user=user)","size_bytes":6762},"tracking.py":{"content":"\"\"\"\nEmail tracking utilities for opens, clicks, and engagement metrics\n\"\"\"\nimport base64\nfrom datetime import datetime\nfrom urllib.parse import urlencode\nfrom flask import request, url_for\nfrom models import EmailTracking, CampaignRecipient, db\nimport logging\n\nlogger = logging.getLogger(__name__)\n\ndef generate_tracking_pixel(campaign_id, contact_id):\n    \"\"\"Generate a tracking pixel URL for email opens\"\"\"\n    # Encode campaign and contact IDs\n    tracking_data = f\"{campaign_id}:{contact_id}\"\n    encoded_data = base64.urlsafe_b64encode(tracking_data.encode()).decode()\n    \n    return url_for('main.track_open', tracking_id=encoded_data, _external=True)\n\ndef generate_tracking_link(original_url, campaign_id, contact_id):\n    \"\"\"Generate a tracking link for email clicks\"\"\"\n    # Encode campaign and contact IDs\n    tracking_data = f\"{campaign_id}:{contact_id}\"\n    encoded_data = base64.urlsafe_b64encode(tracking_data.encode()).decode()\n    \n    params = {\n        'tracking_id': encoded_data,\n        'url': original_url\n    }\n    \n    return url_for('main.track_click', **params, _external=True)\n\ndef decode_tracking_data(tracking_id):\n    \"\"\"Decode tracking data from tracking ID\"\"\"\n    try:\n        decoded = base64.urlsafe_b64decode(tracking_id.encode()).decode()\n        campaign_id, contact_id = decoded.split(':')\n        return int(campaign_id), int(contact_id)\n    except Exception as e:\n        logger.error(f\"Error decoding tracking data: {e}\")\n        return None, None\n\ndef record_email_event(campaign_id, contact_id, event_type, event_data=None):\n    \"\"\"Record an email tracking event\"\"\"\n    try:\n        # Create tracking record\n        tracking = EmailTracking(\n            campaign_id=campaign_id,\n            contact_id=contact_id,\n            event_type=event_type,\n            event_data=event_data or {}\n        )\n        db.session.add(tracking)\n        \n        # Update campaign recipient record\n        recipient = CampaignRecipient.query.filter_by(\n            campaign_id=campaign_id,\n            contact_id=contact_id\n        ).first()\n        \n        if recipient:\n            now = datetime.utcnow()\n            if event_type == 'opened' and not recipient.opened_at:\n                recipient.opened_at = now\n            elif event_type == 'clicked' and not recipient.clicked_at:\n                recipient.clicked_at = now\n        \n        db.session.commit()\n        logger.info(f\"Recorded {event_type} event for campaign {campaign_id}, contact {contact_id}\")\n        \n    except Exception as e:\n        logger.error(f\"Error recording email event: {e}\")\n        db.session.rollback()\n\ndef process_email_content(html_content, campaign_id, contact_id):\n    \"\"\"Process email HTML content to add tracking pixels and links\"\"\"\n    try:\n        # Add tracking pixel (invisible 1x1 image)\n        tracking_pixel_url = generate_tracking_pixel(campaign_id, contact_id)\n        tracking_pixel = f'<img src=\"{tracking_pixel_url}\" width=\"1\" height=\"1\" style=\"display:none;\" alt=\"\">'\n        \n        # Add tracking pixel before closing body tag\n        if '</body>' in html_content:\n            html_content = html_content.replace('</body>', f'{tracking_pixel}</body>')\n        else:\n            html_content += tracking_pixel\n        \n        # Process links for click tracking (basic implementation)\n        # Note: For production, use a proper HTML parser like BeautifulSoup\n        import re\n        \n        def replace_link(match):\n            full_tag = match.group(0)\n            href_match = re.search(r'href=\"([^\"]+)\"', full_tag)\n            if href_match:\n                original_url = href_match.group(1)\n                # Skip mailto links and already tracked links\n                if not original_url.startswith('mailto:') and 'track_click' not in original_url:\n                    tracking_url = generate_tracking_link(original_url, campaign_id, contact_id)\n                    return full_tag.replace(f'href=\"{original_url}\"', f'href=\"{tracking_url}\"')\n            return full_tag\n        \n        # Replace all <a> tags with tracking links\n        html_content = re.sub(r'<a[^>]*href=\"[^\"]*\"[^>]*>', replace_link, html_content)\n        \n        return html_content\n        \n    except Exception as e:\n        logger.error(f\"Error processing email content for tracking: {e}\")\n        return html_content\n\ndef get_campaign_analytics(campaign_id):\n    \"\"\"Get detailed analytics for a specific campaign\"\"\"\n    try:\n        from models import Campaign, CampaignRecipient\n        \n        campaign = Campaign.query.get(campaign_id)\n        if not campaign:\n            return None\n        \n        # Basic counts\n        total_recipients = campaign.recipients.count()\n        sent_count = campaign.recipients.filter_by(status='sent').count()\n        failed_count = campaign.recipients.filter_by(status='failed').count()\n        bounced_count = campaign.recipients.filter_by(status='bounced').count()\n        \n        # Engagement counts\n        opened_count = campaign.recipients.filter(CampaignRecipient.opened_at.isnot(None)).count()\n        clicked_count = campaign.recipients.filter(CampaignRecipient.clicked_at.isnot(None)).count()\n        \n        # Calculate rates\n        delivery_rate = (sent_count / total_recipients * 100) if total_recipients > 0 else 0\n        open_rate = (opened_count / sent_count * 100) if sent_count > 0 else 0\n        click_rate = (clicked_count / sent_count * 100) if sent_count > 0 else 0\n        bounce_rate = (bounced_count / (sent_count + bounced_count) * 100) if (sent_count + bounced_count) > 0 else 0\n        \n        # Event breakdown\n        events = db.session.query(\n            EmailTracking.event_type,\n            db.func.count(EmailTracking.id).label('count')\n        ).filter_by(campaign_id=campaign_id).group_by(EmailTracking.event_type).all()\n        \n        event_counts = {event.event_type: event.count for event in events}\n        \n        return {\n            'campaign': campaign,\n            'total_recipients': total_recipients,\n            'sent_count': sent_count,\n            'failed_count': failed_count,\n            'bounced_count': bounced_count,\n            'opened_count': opened_count,\n            'clicked_count': clicked_count,\n            'delivery_rate': delivery_rate,\n            'open_rate': open_rate,\n            'click_rate': click_rate,\n            'bounce_rate': bounce_rate,\n            'event_counts': event_counts\n        }\n        \n    except Exception as e:\n        logger.error(f\"Error getting campaign analytics: {e}\")\n        return None","size_bytes":6566},"gunicorn.conf.py":{"content":"# Gunicorn configuration file for production deployment\n\n# Server socket\nbind = \"0.0.0.0:5000\"\nbacklog = 2048\n\n# Worker processes\nworkers = 4\nworker_class = \"sync\"\nworker_connections = 1000\ntimeout = 30\nkeepalive = 2\n\n# Restart workers after this many requests, to help prevent memory leaks\nmax_requests = 1000\nmax_requests_jitter = 100\n\n# Logging\naccesslog = \"-\"  # Log to stdout\nerrorlog = \"-\"   # Log to stderr\nloglevel = \"info\"\naccess_log_format = '%(h)s %(l)s %(u)s %(t)s \"%(r)s\" %(s)s %(b)s \"%(f)s\" \"%(a)s\"'\n\n# Process naming\nproc_name = \"email-marketing-app\"\n\n# Daemon mode\ndaemon = False\n\n# Security (commented out for development)\n# user = \"www-data\"\n# group = \"www-data\"\n\n# Preload app for better performance\npreload_app = True\n\n# Enable auto-reload in development (disable in production)\nreload = False","size_bytes":813},"DEPLOYMENT_GUIDE.md":{"content":"# LUX Marketing VPS Deployment Guide\n\n## Quick Deployment\n\n### 1. Run the Deployment Script\n```bash\n# Make the script executable\nchmod +x deploy_to_vps.sh\n\n# Run the deployment\n./deploy_to_vps.sh\n```\n\n### 2. Complete Post-Deployment Setup\n```bash\n# SSH into your VPS\nssh root@194.195.92.52\n\n# Update API keys in environment file\nnano /etc/environment\n\n# Replace with your actual keys:\n# OPENAI_API_KEY=sk-your-actual-openai-key\n# Add other keys as needed\n\n# Start the application\nsystemctl start lux-marketing\nsystemctl status lux-marketing\n\n# Setup SSL certificate\napt install certbot python3-certbot-nginx -y\ncertbot --nginx -d lux.lucifercruz.com -d www.lux.lucifercruz.com\n```\n\n## Manual Setup (Alternative)\n\n### Step 1: Prepare VPS\n```bash\nssh root@194.195.92.52\n\n# Update system\napt update && apt upgrade -y\n\n# Install dependencies\napt install -y python3 python3-pip python3-venv nginx postgresql postgresql-contrib\n\n# Create application user\nuseradd -m -s /bin/bash luxapp\nmkdir -p /var/www/lux-marketing\nchown luxapp:www-data /var/www/lux-marketing\n```\n\n### Step 2: Upload Application\n```bash\n# From your local machine (in the LUX Marketing directory):\nrsync -avz --progress \\\n    --exclude='.git*' \\\n    --exclude='__pycache__' \\\n    --exclude='*.pyc' \\\n    --exclude='venv*' \\\n    --exclude='tmp' \\\n    ./ root@194.195.92.52:/var/www/lux-marketing/\n```\n\n### Step 3: Setup Python Environment\n```bash\n# SSH back to VPS\nssh root@194.195.92.52\n\ncd /var/www/lux-marketing\n\n# Create virtual environment\npython3 -m venv venv\nsource venv/bin/activate\n\n# Install dependencies\npip install --upgrade pip\npip install flask gunicorn flask-sqlalchemy flask-login flask-wtf\npip install psycopg2-binary msal openai requests twilio apscheduler\npip install email-validator itsdangerous werkzeug jinja2\n```\n\n### Step 4: Setup Database\n```bash\n# Create PostgreSQL database and user\nsudo -u postgres psql -c \"CREATE DATABASE lux_marketing;\"\nsudo -u postgres psql -c \"CREATE USER luxuser WITH PASSWORD 'luxpass123';\"\nsudo -u postgres psql -c \"GRANT ALL PRIVILEGES ON DATABASE lux_marketing TO luxuser;\"\n```\n\n### Step 5: Configure Environment\n```bash\n# Create environment variables file\ncat > /etc/environment << 'EOF'\nDATABASE_URL=postgresql://luxuser:luxpass123@localhost/lux_marketing\nSESSION_SECRET=lux-super-secret-key-production-2024\nOPENAI_API_KEY=your-openai-key-here\nFLASK_ENV=production\nFLASK_DEBUG=False\nEOF\n```\n\n### Step 6: Create Systemd Service\n```bash\n# Create service file\ntee /etc/systemd/system/lux-marketing.service > /dev/null << 'EOF'\n[Unit]\nDescription=LUX Marketing Flask Application\nAfter=network.target postgresql.service\nRequires=postgresql.service\n\n[Service]\nUser=luxapp\nGroup=www-data\nWorkingDirectory=/var/www/lux-marketing\nEnvironment=PATH=/var/www/lux-marketing/venv/bin\nEnvironmentFile=/etc/environment\nExecStart=/var/www/lux-marketing/venv/bin/gunicorn --config gunicorn.conf.py main:app\nExecReload=/bin/kill -s HUP $MAINPID\nRestart=always\nRestartSec=5\nStandardOutput=append:/var/log/lux-marketing/access.log\nStandardError=append:/var/log/lux-marketing/error.log\n\n[Install]\nWantedBy=multi-user.target\nEOF\n```\n\n### Step 7: Create Gunicorn Configuration\n```bash\ncd /var/www/lux-marketing\n\ntee gunicorn.conf.py > /dev/null << 'EOF'\nimport multiprocessing\n\nbind = \"127.0.0.1:8000\"\nworkers = multiprocessing.cpu_count() * 2 + 1\nworker_class = \"sync\"\ntimeout = 30\nkeepalive = 2\nmax_requests = 1000\nmax_requests_jitter = 50\nuser = \"luxapp\"\ngroup = \"www-data\"\ntmp_upload_dir = None\nEOF\n```\n\n### Step 8: Configure Nginx\n```bash\n# Create Nginx site configuration\ntee /etc/nginx/sites-available/lux-marketing > /dev/null << 'EOF'\nserver {\n    listen 80;\n    server_name lux.lucifercruz.com www.lux.lucifercruz.com;\n    \n    client_max_body_size 10M;\n    \n    location / {\n        proxy_pass http://127.0.0.1:8000;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_redirect off;\n    }\n    \n    location /static {\n        alias /var/www/lux-marketing/static;\n        expires 1y;\n        add_header Cache-Control \"public, immutable\";\n    }\n    \n    # Security headers\n    add_header X-Frame-Options \"SAMEORIGIN\" always;\n    add_header X-XSS-Protection \"1; mode=block\" always;\n    add_header X-Content-Type-Options \"nosniff\" always;\n}\nEOF\n\n# Enable site\nln -sf /etc/nginx/sites-available/lux-marketing /etc/nginx/sites-enabled/\nrm -f /etc/nginx/sites-enabled/default\n\n# Test and restart nginx\nnginx -t\nsystemctl restart nginx\nsystemctl enable nginx\n```\n\n### Step 9: Start Services\n```bash\n# Set up logging directory\nmkdir -p /var/log/lux-marketing\nchown luxapp:www-data /var/log/lux-marketing\n\n# Set permissions\nchown -R luxapp:www-data /var/www/lux-marketing\nchmod -R 755 /var/www/lux-marketing\n\n# Enable and start services\nsystemctl daemon-reload\nsystemctl enable lux-marketing\nsystemctl start lux-marketing\n```\n\n## Testing Your Deployment\n\n### 1. Check Service Status\n```bash\nsystemctl status lux-marketing\nsystemctl status nginx\nsystemctl status postgresql\n```\n\n### 2. Check Logs\n```bash\n# Application logs\njournalctl -u lux-marketing -f\n\n# Nginx logs\ntail -f /var/log/nginx/access.log\ntail -f /var/log/nginx/error.log\n\n# Application-specific logs\ntail -f /var/log/lux-marketing/access.log\ntail -f /var/log/lux-marketing/error.log\n```\n\n### 3. Test Application Access\n```bash\n# Test local access (on VPS)\ncurl -I http://127.0.0.1:8000\n\n# Test nginx proxy (on VPS)\ncurl -I http://localhost\n\n# Test from external (your local machine)\ncurl -I http://194.195.92.52\n```\n\n### 4. Database Connection Test\n```bash\n# On VPS, test database connection\ncd /var/www/lux-marketing\nsource venv/bin/activate\npython3 -c \"\nimport os\nos.environ['DATABASE_URL'] = 'postgresql://luxuser:luxpass123@localhost/lux_marketing'\nfrom app import app, db\nwith app.app_context():\n    db.create_all()\n    print('✅ Database connection successful!')\n\"\n```\n\n## SSL Certificate Setup\n\n### Install Certbot\n```bash\napt install certbot python3-certbot-nginx -y\n```\n\n### Get SSL Certificate\n```bash\n# Make sure your domain points to your VPS IP first\ncertbot --nginx -d lux.lucifercruz.com -d www.lux.lucifercruz.com\n\n# Auto-renewal (already set up by certbot)\nsystemctl enable certbot.timer\n```\n\n## Troubleshooting\n\n### Common Issues:\n\n1. **Service won't start**:\n   ```bash\n   journalctl -u lux-marketing --no-pager -l\n   ```\n\n2. **Permission errors**:\n   ```bash\n   chown -R luxapp:www-data /var/www/lux-marketing\n   chmod -R 755 /var/www/lux-marketing\n   ```\n\n3. **Database connection issues**:\n   ```bash\n   sudo -u postgres psql lux_marketing\n   \\du  # Check users\n   \\l   # Check databases\n   ```\n\n4. **Nginx errors**:\n   ```bash\n   nginx -t  # Test config\n   tail -f /var/log/nginx/error.log\n   ```\n\n### Restart Services:\n```bash\nsystemctl restart lux-marketing\nsystemctl restart nginx\nsystemctl restart postgresql\n```\n\n## Production Optimizations\n\n### 1. Firewall Setup\n```bash\nufw enable\nufw allow 22    # SSH\nufw allow 80    # HTTP\nufw allow 443   # HTTPS\n```\n\n### 2. Log Rotation\n```bash\ntee /etc/logrotate.d/lux-marketing > /dev/null << 'EOF'\n/var/log/lux-marketing/*.log {\n    daily\n    missingok\n    rotate 52\n    compress\n    delaycompress\n    notifempty\n    create 644 luxapp www-data\n    postrotate\n        systemctl reload lux-marketing\n    endscript\n}\nEOF\n```\n\n### 3. Performance Monitoring\n```bash\n# Install htop for monitoring\napt install htop\n\n# Monitor processes\nhtop\n\n# Monitor disk usage\ndf -h\n\n# Monitor memory usage\nfree -m\n```\n\nYour LUX Marketing platform should now be live at: https://lux.lucifercruz.com","size_bytes":7677},"complete_vps_update.sh":{"content":"#!/bin/bash\n\n# Complete VPS Update Script - Deploy Current Replit App\n# This will completely replace your VPS app with the current version\n\nVPS_HOST=\"194.195.92.52\"\nVPS_USER=\"root\"\nVPS_PATH=\"/var/www/lux-marketing\"\n\necho \"🚀 Complete VPS Update - Deploy Current LUX Marketing App\"\necho \"=========================================================\"\n\n# Check if we have the current deployment package\nif [ ! -f \"current-lux-complete.tar.gz\" ]; then\n    echo \"❌ Current deployment package not found!\"\n    echo \"Please make sure current-lux-complete.tar.gz exists in the current directory\"\n    exit 1\nfi\n\necho \"📦 Found deployment package: $(ls -lh current-lux-complete.tar.gz)\"\necho \"\"\n\n# Upload the current app to VPS\necho \"📤 Uploading current app to VPS...\"\nscp current-lux-complete.tar.gz $VPS_USER@$VPS_HOST:/tmp/\n\n# Deploy on VPS\necho \"🔧 Deploying on VPS...\"\nssh $VPS_USER@$VPS_HOST << 'EOF'\n    set -e\n    \n    echo \"🛑 Stopping services...\"\n    systemctl stop lux-marketing 2>/dev/null || true\n    \n    echo \"💾 Creating backup of current deployment...\"\n    if [ -d \"/var/www/lux-marketing\" ]; then\n        cp -r /var/www/lux-marketing /var/backups/lux-backup-$(date +%Y%m%d_%H%M%S) 2>/dev/null || true\n        echo \"Backup created\"\n    fi\n    \n    echo \"🗑️ Clearing old deployment...\"\n    rm -rf /var/www/lux-marketing/*\n    rm -rf /var/www/lux-marketing/.[^.]*\n    \n    echo \"📦 Extracting current app...\"\n    cd /var/www/lux-marketing\n    tar xzf /tmp/current-lux-complete.tar.gz\n    \n    echo \"🔐 Setting permissions...\"\n    chown -R luxapp:www-data /var/www/lux-marketing\n    chmod -R 755 /var/www/lux-marketing\n    \n    echo \"🐍 Setting up Python environment...\"\n    sudo -u luxapp python3 -m venv venv\n    sudo -u luxapp venv/bin/pip install --upgrade pip\n    \n    # Install all required packages\n    sudo -u luxapp venv/bin/pip install flask gunicorn flask-sqlalchemy flask-login flask-wtf\n    sudo -u luxapp venv/bin/pip install psycopg2-binary msal openai requests twilio apscheduler\n    sudo -u luxapp venv/bin/pip install email-validator itsdangerous werkzeug jinja2\n    \n    echo \"📁 Creating required directories...\"\n    mkdir -p static/uploads instance logs\n    chown -R luxapp:www-data static/uploads instance logs\n    \n    echo \"⚙️ Creating environment configuration...\"\n    cat > /etc/lux.env << 'ENVFILE'\nDATABASE_URL=postgresql://luxuser:LuxPass2024!@localhost/lux_marketing\nSESSION_SECRET=lux-marketing-super-secret-key-production-2024\nFLASK_ENV=production\nFLASK_DEBUG=False\nOPENAI_API_KEY=your-openai-key-here\nMS_CLIENT_ID=your-ms-client-id\nMS_CLIENT_SECRET=your-ms-client-secret\nMS_TENANT_ID=your-ms-tenant-id\nTWILIO_ACCOUNT_SID=your-twilio-sid\nTWILIO_AUTH_TOKEN=your-twilio-token\nTWILIO_PHONE_NUMBER=your-twilio-phone\nENVFILE\n\n    echo \"🗄️ Initializing database with current models...\"\n    sudo -u luxapp -H bash -c \"\n        cd /var/www/lux-marketing\n        source venv/bin/activate\n        export \\$(cat /etc/lux.env | xargs)\n        python3 -c \\\"\nfrom app import app, db\nwith app.app_context():\n    db.create_all()\n    \n    # Create admin user if doesn't exist\n    from models import User\n    from werkzeug.security import generate_password_hash\n    \n    admin = User.query.filter_by(username='admin').first()\n    if not admin:\n        admin = User(\n            username='admin',\n            email='admin@lux.local',\n            password_hash=generate_password_hash('LuxAdmin2024!'),\n            is_admin=True\n        )\n        db.session.add(admin)\n        db.session.commit()\n        print('Admin user created - Username: admin, Password: LuxAdmin2024!')\n    else:\n        print('Admin user already exists')\n    \n    print('Database initialized successfully')\n\\\"\n    \"\n    \n    echo \"🔧 Updating Gunicorn configuration...\"\n    cat > gunicorn.conf.py << 'GUNICORNCONF'\nimport multiprocessing\n\nbind = \"127.0.0.1:5000\"\nworkers = multiprocessing.cpu_count() * 2 + 1\nworker_class = \"sync\"\ntimeout = 60\nkeepalive = 2\nmax_requests = 1000\nmax_requests_jitter = 50\nuser = \"luxapp\"\ngroup = \"www-data\"\ndaemon = False\npidfile = \"/var/run/gunicorn/lux-marketing.pid\"\nGUNICORNCONF\n\n    echo \"🌐 Updating Nginx configuration...\"\n    cat > /etc/nginx/sites-available/lux-marketing << 'NGINXCONF'\nserver {\n    listen 80;\n    server_name lux.lucifercruz.com www.lux.lucifercruz.com;\n    \n    client_max_body_size 50M;\n    \n    location / {\n        proxy_pass http://127.0.0.1:5000;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_redirect off;\n        \n        proxy_connect_timeout 30;\n        proxy_send_timeout 60;\n        proxy_read_timeout 60;\n    }\n    \n    location /static {\n        alias /var/www/lux-marketing/static;\n        expires 1y;\n        add_header Cache-Control \"public, immutable\";\n    }\n    \n    # Security headers\n    add_header X-Frame-Options \"SAMEORIGIN\" always;\n    add_header X-XSS-Protection \"1; mode=block\" always;\n    add_header X-Content-Type-Options \"nosniff\" always;\n    add_header Referrer-Policy \"strict-origin-when-cross-origin\" always;\n}\nNGINXCONF\n\n    # Test Nginx config\n    nginx -t\n    \n    echo \"🚀 Starting services...\"\n    systemctl daemon-reload\n    systemctl restart nginx\n    systemctl start lux-marketing\n    \n    echo \"✅ Deployment completed successfully!\"\n    \n    # Verify the deployment\n    echo \"\"\n    echo \"📋 Verification:\"\n    echo \"Current files in /var/www/lux-marketing:\"\n    ls -la /var/www/lux-marketing/ | grep -E \"(app\\.py|main\\.py|templates|static)\"\n    \n    echo \"\"\n    echo \"Template files:\"\n    ls -la /var/www/lux-marketing/templates/ | head -10\n    \n    echo \"\"\n    echo \"Service status:\"\n    systemctl status lux-marketing --no-pager -l | head -10\n    \n    # Cleanup\n    rm -f /tmp/current-lux-complete.tar.gz\n    \n    echo \"\"\n    echo \"🎉 VPS updated with current LUX Marketing app!\"\n    echo \"Visit: https://lux.lucifercruz.com\"\nEOF\n\necho \"\"\necho \"🎉 VPS Update Complete!\"\necho \"======================================\"\necho \"\"\necho \"Your VPS now has the current version of LUX Marketing\"\necho \"Visit: https://lux.lucifercruz.com\"\necho \"\"\necho \"Login credentials:\"\necho \"Username: admin\"\necho \"Password: LuxAdmin2024!\"\necho \"\"\necho \"The app should now match the design and features from your current Replit environment\"","size_bytes":6429},"app.py":{"content":"import os\nimport logging\nfrom flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\nfrom flask_login import LoginManager\nfrom flask_wtf.csrf import CSRFProtect\nfrom sqlalchemy.orm import DeclarativeBase\nfrom werkzeug.middleware.proxy_fix import ProxyFix\n\n# Configure logging\nlogging.basicConfig(level=logging.DEBUG)\n\nclass Base(DeclarativeBase):\n    pass\n\ndb = SQLAlchemy(model_class=Base)\n\n# Create the app\napp = Flask(__name__)\napp.secret_key = os.environ.get(\"SESSION_SECRET\")\napp.wsgi_app = ProxyFix(app.wsgi_app, x_proto=1, x_host=1)\n\n# Configure the database\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = os.environ.get(\"DATABASE_URL\", \"sqlite:///email_marketing.db\")\napp.config[\"SQLALCHEMY_ENGINE_OPTIONS\"] = {\n    \"pool_recycle\": 300,\n    \"pool_pre_ping\": True,\n}\n\n# Microsoft Graph API configuration\napp.config[\"MS_CLIENT_ID\"] = os.environ.get(\"MS_CLIENT_ID\", \"\")\napp.config[\"MS_CLIENT_SECRET\"] = os.environ.get(\"MS_CLIENT_SECRET\", \"\")\napp.config[\"MS_TENANT_ID\"] = os.environ.get(\"MS_TENANT_ID\", \"\")\n\n# Initialize extensions\ndb.init_app(app)\n\n# Setup CSRF Protection\ncsrf = CSRFProtect(app)\n\n# Setup Flask-Login\nlogin_manager = LoginManager()\nlogin_manager.init_app(app)\nlogin_manager.login_view = 'auth.login'  # type: ignore\nlogin_manager.login_message = 'Please log in to access this page.'\n\n@login_manager.user_loader\ndef load_user(user_id):\n    from models import User\n    return User.query.get(int(user_id))\n\n# Register blueprints\nfrom routes import main_bp\nfrom auth import auth_bp\nfrom user_management import user_bp\n\napp.register_blueprint(main_bp)\napp.register_blueprint(auth_bp, url_prefix='/auth')\napp.register_blueprint(user_bp, url_prefix='/user')\n\nwith app.app_context():\n    # Import models to ensure tables are created\n    import models\n    db.create_all()\n\n# Add Jinja2 filters\n@app.template_filter('campaign_status_color')\ndef campaign_status_color_filter(status):\n    color_mapping = {\n        'draft': 'secondary',\n        'scheduled': 'warning',\n        'sending': 'info',\n        'sent': 'success',\n        'failed': 'danger',\n        'paused': 'dark'\n    }\n    return color_mapping.get(status, 'secondary')\n\n# Initialize scheduler\nfrom scheduler import init_scheduler\ninit_scheduler(app)\n","size_bytes":2220},"update_vps_files.sh":{"content":"#!/bin/bash\n# Update VPS files from local machine (Mac) to VPS\n\n# VPS connection details\nVPS_USER=\"root\"\nVPS_HOST=\"194.195.92.52\"\nVPS_PATH=\"/var/www/lux-marketing/\"\n\n# Local project path (your Replit export or local folder)\nLOCAL_PATH=\"/Users/lukeshawver/Downloads/LUX-Email-Marketing-Bot/\"\n\necho \"🚀 Deploying files from $LOCAL_PATH to $VPS_USER@$VPS_HOST:$VPS_PATH\"\n\n# Use rsync for efficient sync (preserves permissions, only copies changes)\nrsync -avz --delete \"$LOCAL_PATH\" \"$VPS_USER@$VPS_HOST:$VPS_PATH\"\n\necho \"✅ Deployment complete!\"","size_bytes":545},"vps-final-deployment.sh":{"content":"#!/bin/bash\n# LUX Email Marketing Bot - Final VPS Deployment with OpenAI API Key\n# Run this on your local machine to upload and deploy to your VPS\n\nset -e  # Exit on any error\n\n# Configuration\nVPS_IP=\"194.195.92.52\"\nVPS_USER=\"root\"\nDOMAIN=\"lux.lucifercruz.com\"\nAPP_DIR=\"/root/lux-email-bot/LUX-Email-Marketing-Bot\"\nSERVICE_NAME=\"lux\"\n\n# Colors for output\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nBLUE='\\033[0;34m'\nNC='\\033[0m' # No Color\n\necho -e \"${GREEN}🚀 LUX Email Marketing Bot - Final Deployment${NC}\"\necho \"==================================\"\necho \"Target VPS: $VPS_IP\"\necho \"Domain: $DOMAIN\"\necho \"App Directory: $APP_DIR\"\necho \"\"\n\n# Check if the final package exists\nif [ ! -f \"lux-email-app-final.tar.gz\" ]; then\n    echo -e \"${RED}❌ Error: lux-email-app-final.tar.gz not found!${NC}\"\n    echo \"Please ensure you have downloaded the final package from your Replit project.\"\n    exit 1\nfi\n\n# Prompt for OpenAI API key\necho -e \"${YELLOW}🤖 OpenAI API Key Setup${NC}\"\necho \"Your LUX AI agent needs an OpenAI API key to function.\"\necho \"Please enter your OpenAI API key (starts with 'sk-'):\"\nread -s OPENAI_API_KEY\n\nif [[ ! $OPENAI_API_KEY =~ ^sk- ]]; then\n    echo -e \"${RED}❌ Invalid API key format. It should start with 'sk-'${NC}\"\n    exit 1\nfi\n\necho -e \"${GREEN}✅ API key accepted${NC}\"\necho \"\"\n\necho -e \"${YELLOW}📁 Uploading final application files...${NC}\"\nscp lux-email-app-final.tar.gz $VPS_USER@$VPS_IP:/tmp/\n\necho -e \"${YELLOW}🔧 Connecting to VPS and deploying...${NC}\"\nssh $VPS_USER@$VPS_IP << EOF\n    set -e\n    \n    echo \"Stopping LUX service...\"\n    systemctl stop lux || true\n    \n    echo \"Creating backup of current installation...\"\n    cp -r /root/lux-email-bot /root/lux-email-bot.backup.\\$(date +%Y%m%d_%H%M%S) || true\n    \n    echo \"Extracting final application files...\"\n    cd /root/lux-email-bot\n    rm -rf LUX-Email-Marketing-Bot.old || true\n    mv LUX-Email-Marketing-Bot LUX-Email-Marketing-Bot.old || true\n    mkdir -p LUX-Email-Marketing-Bot\n    cd LUX-Email-Marketing-Bot\n    tar -xzf /tmp/lux-email-app-final.tar.gz\n    \n    echo \"Setting up environment variables...\"\n    # Create or update environment file with SQLite configuration\n    cat > /root/lux-email-bot/.env << 'ENVEOF'\nSESSION_SECRET=\\$(openssl rand -hex 32)\nOPENAI_API_KEY=$OPENAI_API_KEY\nMS_CLIENT_ID=\nMS_CLIENT_SECRET=\nMS_TENANT_ID=\nENVEOF\n    \n    echo \"Setting correct permissions...\"\n    chown -R root:root /root/lux-email-bot/LUX-Email-Marketing-Bot || true\n    chmod +x wsgi.py || true\n    chmod 600 /root/lux-email-bot/.env\n    \n    echo \"Activating virtual environment and installing dependencies...\"\n    cd /root/lux-email-bot\n    source venv/bin/activate\n    cd LUX-Email-Marketing-Bot\n    \n    # Install dependencies (avoiding WooCommerce libraries)\n    echo \"Uninstalling any existing WooCommerce libraries...\"\n    pip uninstall -y woocommerce WooCommerce python-woocommerce || true\n    \n    if [ -f \"deploy_requirements.txt\" ]; then\n        echo \"Installing from deploy_requirements.txt...\"\n        pip install -r deploy_requirements.txt\n    else\n        echo \"Installing core dependencies...\"\n        pip install Flask==3.0.0 Flask-SQLAlchemy==3.1.1 Flask-Login==0.6.3 gunicorn==21.2.0 psycopg2-binary==2.9.9 APScheduler==3.10.4 msal==1.24.1 openai==1.3.7 requests==2.31.0 email-validator==2.1.0 Jinja2==3.1.2 werkzeug==3.0.1\n    fi\n    \n    echo \"Ensuring no WooCommerce libraries are installed...\"\n    pip list | grep -i woo || echo \"No WooCommerce libraries found - good!\"\n    \n    echo \"Updating systemd service to use environment file...\"\n    # Update the systemd service file to include environment file\n    cat > /etc/systemd/system/lux.service << 'SERVICEEOF'\n[Unit]\nDescription=Gunicorn instance for LUX Email Bot\nAfter=network.target\n\n[Service]\nUser=root\nGroup=root\nWorkingDirectory=/root/lux-email-bot/LUX-Email-Marketing-Bot\nEnvironmentFile=/root/lux-email-bot/.env\nExecStart=/root/lux-email-bot/venv/bin/gunicorn --config gunicorn.conf.py wsgi:app\nExecReload=/bin/kill -s HUP \\$MAINPID\nRestart=always\nRestartSec=5\n\n[Install]\nWantedBy=multi-user.target\nSERVICEEOF\n    \n    echo \"Reloading systemd and resetting failed attempts...\"\n    systemctl daemon-reload\n    systemctl reset-failed lux || true\n    \n    echo \"Starting LUX service...\"\n    systemctl start lux\n    \n    echo \"Enabling service for auto-start...\"\n    systemctl enable lux\n    \n    echo \"Waiting for service to start...\"\n    sleep 10\n    \n    echo \"Checking service status...\"\n    systemctl status lux --no-pager -l || true\n    \n    echo \"Testing application...\"\n    echo \"Testing backend health...\"\n    if timeout 15 curl -sSf http://127.0.0.1:5000/ > /dev/null 2>&1; then\n        echo \"✅ Backend is responding!\"\n    else\n        echo \"❌ Backend not responding, checking logs...\"\n        journalctl -u lux -n 50 --no-pager\n        exit 1\n    fi\n    \n    echo \"Testing domain access...\"\n    if timeout 15 curl -k -sSf https://lux.lucifercruz.com/ > /dev/null 2>&1; then\n        echo \"✅ Domain is accessible via HTTPS!\"\n    else\n        echo \"⚠️  Domain not accessible via HTTPS (checking nginx)\"\n        systemctl status nginx --no-pager || true\n    fi\n    \n    echo \"Cleaning up...\"\n    rm -f /tmp/lux-email-app-final.tar.gz\n    \nEOF\n\necho \"\"\necho -e \"${GREEN}🎉 DEPLOYMENT SUCCESSFUL!${NC}\"\necho \"\"\necho -e \"${BLUE}🌐 Your LUX Email Marketing app is now live at:${NC}\"\necho \"   https://$DOMAIN\"\necho \"\"\necho -e \"${BLUE}🔐 Login credentials:${NC}\"\necho \"   Username: admin\"\necho \"   Password: admin123\"\necho \"\"\necho -e \"${BLUE}✨ LUX AI Features Now Available:${NC}\"\necho \"   • Automated campaign generation\"\necho \"   • Content optimization\"\necho \"   • Image creation with DALL-E\"\necho \"   • Audience analysis\"\necho \"   • Performance optimization\"\necho \"\"\necho -e \"${BLUE}📊 Management commands:${NC}\"\necho \"   Status: ssh $VPS_USER@$VPS_IP 'systemctl status lux'\"\necho \"   Logs:   ssh $VPS_USER@$VPS_IP 'journalctl -u lux -f'\"\necho \"   Restart: ssh $VPS_USER@$VPS_IP 'systemctl restart lux'\"\necho \"\"\necho -e \"${YELLOW}🔧 Next Steps:${NC}\"\necho \"   1. Visit https://$DOMAIN and log in\"\necho \"   2. Configure Microsoft Graph API for email sending\"\necho \"   3. Test the LUX AI features in the dashboard\"\necho \"   4. Import your contact lists\"\necho \"   5. Create your first marketing campaign!\"\necho \"\"","size_bytes":6355},"deploy_to_vps.sh":{"content":"#!/bin/bash\n\n# LUX Marketing VPS Deployment Script\n# Deploy to your VPS at 194.195.92.52 with domain lux.lucifercruz.com\n\nset -e  # Exit on any error\n\n# Configuration\nVPS_HOST=\"194.195.92.52\"\nVPS_USER=\"root\"\nVPS_PATH=\"/var/www/lux-marketing\"\nBACKUP_PATH=\"/var/backups/lux-marketing-$(date +%Y%m%d_%H%M%S)\"\nDOMAIN=\"lux.lucifercruz.com\"\n\n# Colors for output\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nNC='\\033[0m' # No Color\n\necho -e \"${GREEN}🚀 LUX Marketing VPS Deployment Script${NC}\"\necho \"==================================================\"\n\necho -e \"${YELLOW}📋 Deployment Configuration:${NC}\"\necho \"  VPS Host: $VPS_HOST\"\necho \"  VPS User: $VPS_USER\" \necho \"  VPS Path: $VPS_PATH\"\necho \"  Domain: $DOMAIN\"\necho \"\"\n\n# Ask for confirmation\nread -p \"Continue with deployment? (y/N): \" -n 1 -r\necho\nif [[ ! $REPLY =~ ^[Yy]$ ]]; then\n    echo \"Deployment cancelled.\"\n    exit 0\nfi\n\necho -e \"${YELLOW}🔍 Testing VPS connection...${NC}\"\nif ! ssh -o ConnectTimeout=10 $VPS_USER@$VPS_HOST \"echo 'Connection successful'\"; then\n    echo -e \"${RED}❌ Cannot connect to VPS. Please check:${NC}\"\n    echo \"  1. VPS is accessible: ssh $VPS_USER@$VPS_HOST\"\n    echo \"  2. User '$VPS_USER' exists (create with: useradd -m $VPS_USER)\"\n    echo \"  3. SSH keys are set up or password authentication works\"\n    exit 1\nfi\n\necho -e \"${GREEN}✅ VPS connection successful${NC}\"\n\necho -e \"${YELLOW}💾 Creating backup of existing deployment...${NC}\"\nssh $VPS_USER@$VPS_HOST \"\n    if [ -d '$VPS_PATH' ]; then\n        sudo mkdir -p /var/backups\n        sudo cp -r $VPS_PATH $BACKUP_PATH 2>/dev/null || true\n        echo 'Backup created at: $BACKUP_PATH'\n    else\n        echo 'No existing deployment found, skipping backup'\n    fi\n\"\n\necho -e \"${YELLOW}📁 Creating deployment directory...${NC}\"\nssh $VPS_USER@$VPS_HOST \"\n    sudo mkdir -p $VPS_PATH\n    sudo chown $VPS_USER:www-data $VPS_PATH\n    sudo chmod 755 $VPS_PATH\n\"\n\necho -e \"${YELLOW}📤 Uploading files to VPS...${NC}\"\n# Upload current directory (LUX Marketing platform) to VPS\nrsync -avz --progress \\\n    --exclude='.git*' \\\n    --exclude='__pycache__' \\\n    --exclude='*.pyc' \\\n    --exclude='.DS_Store' \\\n    --exclude='node_modules' \\\n    --exclude='venv*' \\\n    --exclude='.env*' \\\n    --exclude='instance' \\\n    --exclude='*.log' \\\n    --exclude='tmp' \\\n    ./ $VPS_USER@$VPS_HOST:$VPS_PATH/\n\necho -e \"${YELLOW}🔧 Setting up deployment environment...${NC}\"\nssh $VPS_USER@$VPS_HOST \"\n    cd $VPS_PATH\n    \n    # Update system and install dependencies\n    apt update\n    apt install -y python3 python3-pip python3-venv nginx postgresql postgresql-contrib\n    \n    # Create application user (if not exists)\n    useradd -m -s /bin/bash luxapp || echo 'User luxapp already exists'\n    \n    # Set proper permissions\n    chown -R luxapp:www-data $VPS_PATH\n    chmod -R 755 $VPS_PATH\n    \n    # Create necessary directories\n    mkdir -p logs static/uploads instance /var/log/lux-marketing\n    chown luxapp:www-data /var/log/lux-marketing\n    \n    # Create Python virtual environment\n    echo 'Creating Python virtual environment...'\n    python3 -m venv venv\n    source venv/bin/activate\n    pip install --upgrade pip\n    \n    # Install application dependencies\n    pip install flask gunicorn flask-sqlalchemy flask-login flask-wtf\n    pip install psycopg2-binary msal openai requests twilio apscheduler\n    pip install email-validator itsdangerous werkzeug jinja2\n    \n    echo 'Virtual environment created and dependencies installed'\n\"\n\necho -e \"${YELLOW}⚙️  Setting up production services...${NC}\"\nssh $VPS_USER@$VPS_HOST \"\n    cd $VPS_PATH\n    \n    # Setup PostgreSQL database\n    sudo -u postgres psql -c \\\"CREATE DATABASE lux_marketing;\\\" 2>/dev/null || echo 'Database may already exist'\n    sudo -u postgres psql -c \\\"CREATE USER luxuser WITH PASSWORD 'luxpass123';\\\" 2>/dev/null || echo 'User may already exist'  \n    sudo -u postgres psql -c \\\"GRANT ALL PRIVILEGES ON DATABASE lux_marketing TO luxuser;\\\" 2>/dev/null || true\n    \n    # Create environment file\n    cat > /etc/environment << 'EOF'\nDATABASE_URL=postgresql://luxuser:luxpass123@localhost/lux_marketing\nSESSION_SECRET=lux-super-secret-key-production-2024\nOPENAI_API_KEY=your-openai-key-here\nFLASK_ENV=production\nFLASK_DEBUG=False\nEOF\n    \n    # Create systemd service\n    tee /etc/systemd/system/lux-marketing.service > /dev/null << 'EOF'\n[Unit]\nDescription=LUX Marketing Flask Application\nAfter=network.target postgresql.service\nRequires=postgresql.service\n\n[Service]\nUser=luxapp\nGroup=www-data\nWorkingDirectory=/var/www/lux-marketing\nEnvironment=PATH=/var/www/lux-marketing/venv/bin\nEnvironmentFile=/etc/environment\nExecStart=/var/www/lux-marketing/venv/bin/gunicorn --config gunicorn.conf.py main:app\nExecReload=/bin/kill -s HUP \\$MAINPID\nRestart=always\nRestartSec=5\nStandardOutput=append:/var/log/lux-marketing/access.log\nStandardError=append:/var/log/lux-marketing/error.log\n\n[Install]\nWantedBy=multi-user.target\nEOF\n    \n    # Create Gunicorn configuration\n    tee gunicorn.conf.py > /dev/null << 'EOF'\nimport multiprocessing\n\nbind = \\\"127.0.0.1:8000\\\"\nworkers = multiprocessing.cpu_count() * 2 + 1\nworker_class = \\\"sync\\\"\ntimeout = 30\nkeepalive = 2\nmax_requests = 1000\nmax_requests_jitter = 50\nuser = \\\"luxapp\\\"\ngroup = \\\"www-data\\\"\ntmp_upload_dir = None\nEOF\n    \n    systemctl daemon-reload\n    systemctl enable lux-marketing\n    \n    echo 'System services configured'\n\"\n\necho -e \"${YELLOW}🌐 Configuring Nginx reverse proxy...${NC}\"\nssh $VPS_USER@$VPS_HOST \"\n    # Create Nginx configuration\n    tee /etc/nginx/sites-available/lux-marketing > /dev/null << 'EOF'\nserver {\n    listen 80;\n    server_name lux.lucifercruz.com www.lux.lucifercruz.com;\n    \n    client_max_body_size 10M;\n    \n    location / {\n        proxy_pass http://127.0.0.1:8000;\n        proxy_set_header Host \\$host;\n        proxy_set_header X-Real-IP \\$remote_addr;\n        proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto \\$scheme;\n        proxy_redirect off;\n    }\n    \n    location /static {\n        alias /var/www/lux-marketing/static;\n        expires 1y;\n        add_header Cache-Control \\\"public, immutable\\\";\n    }\n    \n    # Security headers\n    add_header X-Frame-Options \\\"SAMEORIGIN\\\" always;\n    add_header X-XSS-Protection \\\"1; mode=block\\\" always;\n    add_header X-Content-Type-Options \\\"nosniff\\\" always;\n}\nEOF\n    \n    # Enable site\n    ln -sf /etc/nginx/sites-available/lux-marketing /etc/nginx/sites-enabled/\n    rm -f /etc/nginx/sites-enabled/default\n    \n    # Test and restart nginx\n    nginx -t\n    systemctl restart nginx\n    systemctl enable nginx\n    \n    echo 'Nginx configured and started'\n\"\n\necho -e \"${GREEN}🎉 Deployment completed successfully!${NC}\"\necho \"\"\necho -e \"${YELLOW}📋 Next steps to complete setup:${NC}\"\necho \"\"\necho \"  1. Update environment variables (if needed):\"\necho \"     ssh $VPS_USER@$VPS_HOST\"\necho \"     nano /etc/environment\"\necho \"     # Add your actual API keys\"\necho \"\"\necho \"  2. Start the LUX Marketing application:\"\necho \"     ssh $VPS_USER@$VPS_HOST\"\necho \"     systemctl start lux-marketing\"\necho \"     systemctl status lux-marketing\"\necho \"\"\necho \"  3. Setup SSL certificate for production:\"\necho \"     ssh $VPS_USER@$VPS_HOST\"\necho \"     apt install certbot python3-certbot-nginx\"\necho \"     certbot --nginx -d lux.lucifercruz.com -d www.lux.lucifercruz.com\"\necho \"\"\necho \"  4. Your site will be available at: http://lux.lucifercruz.com\"\necho \"\"\necho -e \"${GREEN}✅ Your LUX Marketing platform is ready for production!${NC}\"\n\n# Optional: Test the deployment\nread -p \"Would you like to test the deployment now? (y/N): \" -n 1 -r\necho\nif [[ $REPLY =~ ^[Yy]$ ]]; then\n    echo -e \"${YELLOW}🧪 Testing deployment...${NC}\"\n    ssh $VPS_USER@$VPS_HOST \"\n        cd $VPS_PATH\n        python3 -c 'import app; print(\\\"✅ Flask app imports successfully\\\")' 2>/dev/null || echo '⚠️  Check Python dependencies'\n    \"\nfi","size_bytes":7950},"deploy_now.sh":{"content":"#!/bin/bash\n\n# Direct deployment from Replit to VPS\n# Run this script from Replit\n\nVPS_HOST=\"194.195.92.52\"\nVPS_USER=\"root\"\nVPS_PATH=\"/var/www/lux-marketing\"\n\necho \"🚀 Deploying current LUX Marketing app to VPS...\"\necho \"==================================================\"\necho \"\"\n\n# Check if tar file exists\nif [ ! -f \"current-lux-complete.tar.gz\" ]; then\n    echo \"Creating deployment package...\"\n    tar czf current-lux-complete.tar.gz \\\n        --exclude='*.tar.gz' \\\n        --exclude='.git*' \\\n        --exclude='__pycache__' \\\n        --exclude='*.pyc' \\\n        --exclude='instance/*.db' \\\n        --exclude='venv*' \\\n        --exclude='attached_assets' \\\n        --exclude='.replit*' \\\n        --exclude='replit.nix' \\\n        --exclude='uv.lock' \\\n        .\n    echo \"✅ Package created\"\nfi\n\necho \"\"\necho \"📤 Uploading to VPS...\"\nscp -o StrictHostKeyChecking=no current-lux-complete.tar.gz $VPS_USER@$VPS_HOST:/tmp/\n\necho \"\"\necho \"🔧 Deploying on VPS...\"\n\nssh -o StrictHostKeyChecking=no $VPS_USER@$VPS_HOST bash << 'ENDSSH'\nset -e\n\necho \"🛑 Stopping service...\"\nsystemctl stop lux-marketing 2>/dev/null || true\n\necho \"💾 Backing up current deployment...\"\nif [ -d \"/var/www/lux-marketing\" ]; then\n    cp -r /var/www/lux-marketing /var/backups/lux-backup-$(date +%Y%m%d_%H%M%S) 2>/dev/null || true\nfi\n\necho \"🗑️ Clearing old files...\"\nrm -rf /var/www/lux-marketing/*\nrm -rf /var/www/lux-marketing/.[^.]*\n\necho \"📦 Extracting new app...\"\ncd /var/www/lux-marketing\ntar xzf /tmp/current-lux-complete.tar.gz\n\necho \"🔐 Setting permissions...\"\nchown -R luxapp:www-data /var/www/lux-marketing\nchmod -R 755 /var/www/lux-marketing\n\necho \"🐍 Installing Python packages...\"\nif [ ! -d \"venv\" ]; then\n    sudo -u luxapp python3 -m venv venv\nfi\n\nsudo -u luxapp venv/bin/pip install --quiet --upgrade pip\nsudo -u luxapp venv/bin/pip install --quiet flask gunicorn flask-sqlalchemy flask-login flask-wtf\nsudo -u luxapp venv/bin/pip install --quiet psycopg2-binary msal openai requests twilio apscheduler\nsudo -u luxapp venv/bin/pip install --quiet email-validator itsdangerous werkzeug jinja2\n\necho \"📁 Creating directories...\"\nmkdir -p static/uploads instance logs\nchown -R luxapp:www-data static/uploads instance logs\n\necho \"🗄️ Initializing database...\"\nsudo -u luxapp -H bash -c \"\n    cd /var/www/lux-marketing\n    source venv/bin/activate\n    export DATABASE_URL='postgresql://luxuser:LuxPass2024!@localhost/lux_marketing'\n    export SESSION_SECRET='lux-marketing-super-secret-key-production-2024'\n    export FLASK_ENV='production'\n    python3 << 'EOPY'\nfrom app import app, db\nwith app.app_context():\n    db.create_all()\n    \n    from models import User\n    from werkzeug.security import generate_password_hash\n    \n    admin = User.query.filter_by(username='admin').first()\n    if not admin:\n        admin = User(\n            username='admin',\n            email='admin@lux.local',\n            password_hash=generate_password_hash('LuxAdmin2024!')\n        )\n        if hasattr(admin, 'is_admin'):\n            admin.is_admin = True\n        db.session.add(admin)\n        db.session.commit()\n        print('✅ Admin user created')\n    else:\n        print('✅ Admin user exists')\nEOPY\n\"\n\necho \"🚀 Starting service...\"\nsystemctl start lux-marketing\n\necho \"\"\necho \"✅ Deployment Complete!\"\necho \"======================\"\n\necho \"\"\necho \"📋 Verification:\"\nls -la /var/www/lux-marketing/templates/*.html | head -5\n\necho \"\"\necho \"Service status:\"\nsystemctl status lux-marketing --no-pager | head -5\n\nrm -f /tmp/current-lux-complete.tar.gz\n\nENDSSH\n\necho \"\"\necho \"🎉 VPS Updated Successfully!\"\necho \"============================\"\necho \"\"\necho \"Your site: https://lux.lucifercruz.com\"\necho \"Login: admin / LuxAdmin2024!\"\necho \"\"\n","size_bytes":3750},"VPS-DEPLOYMENT-GUIDE.md":{"content":"# Deploy to lux.lucifercruz.com - Complete Guide\n\n## 🚀 Quick Deployment (Automated)\n\nI've created an automated deployment script for your VPS. Here's how to deploy your email marketing app to **lux.lucifercruz.com**:\n\n### Option 1: Automated Deployment\n\n```bash\n# Run this from your local machine where you have the files\n./deploy-to-vps.sh\n```\n\nThis script will:\n- Upload files to your VPS (194.195.92.52)\n- Extract and install everything automatically\n- Configure nginx for lux.lucifercruz.com\n- Set up the database and services\n\n### Option 2: Manual Step-by-Step\n\nIf you prefer manual control:\n\n```bash\n# 1. Upload the package\nscp email-marketing-app-*.tar.gz root@194.195.92.52:/root/\n\n# 2. Connect to your VPS\nssh root@194.195.92.52\n\n# 3. Extract and deploy\ncd /root\ntar -xzf email-marketing-app-*.tar.gz\ncd email-marketing-app-*\nchmod +x deploy.sh\n./deploy.sh\n\n# 4. Configure your domain\nnano /etc/nginx/sites-available/email-marketing\n# Change \"your_domain.com\" to \"lux.lucifercruz.com\"\n\n# 5. Restart services\nsystemctl restart email-marketing nginx\n```\n\n## 🔧 Post-Deployment Configuration\n\n### 1. Configure API Credentials\n\n```bash\nssh root@194.195.92.52\nnano /opt/email-marketing/.env\n```\n\nUpdate these values:\n```env\n# Microsoft Graph API (required for email sending)\nMS_CLIENT_ID=your_microsoft_client_id\nMS_CLIENT_SECRET=your_microsoft_client_secret\nMS_TENANT_ID=your_microsoft_tenant_id\n\n# OpenAI API (optional, for LUX AI features)\nOPENAI_API_KEY=your_openai_api_key\n\n# Database (already configured, but you can change the password)\nDATABASE_URL=postgresql://email-marketing:your_password@localhost/email-marketing_db\n```\n\n### 2. Set Up SSL Certificate\n\n```bash\nssh root@194.195.92.52\ncd /root/email-marketing-app-*\n./ssl-setup.sh lux.lucifercruz.com\n```\n\n### 3. Restart Services After Configuration\n\n```bash\nsystemctl restart email-marketing nginx\n```\n\n## 🌐 Access Your Application\n\n**After deployment:**\n- HTTP: http://lux.lucifercruz.com\n- HTTPS: https://lux.lucifercruz.com (after SSL setup)\n\n**Default login:**\n- Username: `admin`\n- Password: `admin123`\n\n## 📊 Service Management\n\n```bash\n# Check application status\nsystemctl status email-marketing\n\n# View application logs\njournalctl -u email-marketing -f\n\n# Restart application\nsystemctl restart email-marketing\n\n# Check nginx status\nsystemctl status nginx\n\n# View nginx logs\ntail -f /var/log/nginx/error.log\n```\n\n## 🔒 Security Notes\n\n1. **Change default password** immediately after first login\n2. **Update API credentials** in the .env file\n3. **Set up SSL certificate** for HTTPS\n4. **Configure firewall** if needed:\n   ```bash\n   ufw enable\n   ufw allow 22/tcp    # SSH\n   ufw allow 80/tcp    # HTTP\n   ufw allow 443/tcp   # HTTPS\n   ```\n\n## 🔧 Troubleshooting\n\n### Application won't start\n```bash\n# Check logs\njournalctl -u email-marketing -n 50\n\n# Check if port is in use\nnetstat -tlnp | grep :5000\n\n# Restart the service\nsystemctl restart email-marketing\n```\n\n### Database connection issues\n```bash\n# Check PostgreSQL\nsystemctl status postgresql\n\n# Test database connection\nsudo -u postgres psql -c \"SELECT 1;\"\n\n# Connect to app database\nsudo -u postgres psql email-marketing_db\n```\n\n### Nginx issues\n```bash\n# Test configuration\nnginx -t\n\n# Check error logs\ntail -f /var/log/nginx/error.log\n\n# Restart nginx\nsystemctl restart nginx\n```\n\n## 📧 Email Configuration Requirements\n\nTo send emails, you need Microsoft Graph API credentials:\n\n1. **Register an app** in Azure AD\n2. **Add permissions:** Mail.Send (Application permission)\n3. **Get admin consent** for the tenant\n4. **Copy credentials** to your .env file\n\nWithout these credentials, the app will work but email sending will fail.\n\n## 🔄 Updates and Maintenance\n\n### Backup your data\n```bash\n./backup.sh\n```\n\n### Update the application\n```bash\n./update.sh\n```\n\n### Monitor health\n```bash\n./monitoring.sh\n```\n\n## 📞 Support\n\nIf you encounter issues:\n\n1. **Check service status:** `systemctl status email-marketing`\n2. **View logs:** `journalctl -u email-marketing -f`\n3. **Test health:** `curl http://localhost:5000/health`\n4. **Verify configuration:** `cat /opt/email-marketing/.env`\n\nYour email marketing app will be fully functional once deployed and configured!","size_bytes":4221},"vps-fix-deployment-v2.sh":{"content":"#!/bin/bash\n# Fixed LUX Email Marketing App VPS Deployment Script v2\n# Run this on your local machine to upload and fix your VPS\n\nset -e  # Exit on any error\n\n# Configuration\nVPS_IP=\"194.195.92.52\"\nVPS_USER=\"root\"\nDOMAIN=\"lux.lucifercruz.com\"\nAPP_DIR=\"/root/lux-email-bot/LUX-Email-Marketing-Bot\"\nSERVICE_NAME=\"lux\"\n\n# Colors for output\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nNC='\\033[0m' # No Color\n\necho -e \"${GREEN}🚀 LUX Email Marketing Bot - VPS Fix Deployment v2${NC}\"\necho \"==================================\"\necho \"Target VPS: $VPS_IP\"\necho \"Domain: $DOMAIN\"\necho \"App Directory: $APP_DIR\"\necho \"\"\n\n# Check if the fixed package exists\nif [ ! -f \"lux-email-app-fixed.tar.gz\" ]; then\n    echo -e \"${RED}❌ Error: lux-email-app-fixed.tar.gz not found!${NC}\"\n    echo \"Please ensure you have downloaded the fixed package from your Replit project.\"\n    exit 1\nfi\n\necho -e \"${YELLOW}📁 Uploading fixed application files...${NC}\"\nscp lux-email-app-fixed.tar.gz $VPS_USER@$VPS_IP:/tmp/\n\necho -e \"${YELLOW}🔧 Connecting to VPS and applying fixes...${NC}\"\nssh $VPS_USER@$VPS_IP << 'EOF'\n    set -e\n    \n    echo \"Stopping LUX service...\"\n    systemctl stop lux || true\n    \n    echo \"Creating backup of current installation...\"\n    cp -r /root/lux-email-bot /root/lux-email-bot.backup.$(date +%Y%m%d_%H%M%S) || true\n    \n    echo \"Extracting fixed application files...\"\n    cd /root/lux-email-bot\n    rm -rf LUX-Email-Marketing-Bot.old || true\n    mv LUX-Email-Marketing-Bot LUX-Email-Marketing-Bot.old || true\n    mkdir -p LUX-Email-Marketing-Bot\n    cd LUX-Email-Marketing-Bot\n    tar -xzf /tmp/lux-email-app-fixed.tar.gz\n    \n    echo \"Setting correct permissions (using root instead of lux-user)...\"\n    chown -R root:root /root/lux-email-bot/LUX-Email-Marketing-Bot || true\n    chmod +x wsgi.py || true\n    \n    echo \"Activating virtual environment and installing dependencies...\"\n    cd /root/lux-email-bot\n    source venv/bin/activate\n    cd LUX-Email-Marketing-Bot\n    \n    # Use deploy_requirements.txt if requirements.txt doesn't exist\n    if [ ! -f \"requirements.txt\" ] && [ -f \"deploy_requirements.txt\" ]; then\n        echo \"Using deploy_requirements.txt for dependencies...\"\n        pip install -r deploy_requirements.txt\n    elif [ -f \"requirements.txt\" ]; then\n        echo \"Using requirements.txt for dependencies...\"\n        pip install -r requirements.txt\n    else\n        echo \"Installing core dependencies manually...\"\n        pip install Flask==3.0.0 Flask-SQLAlchemy==3.1.1 Flask-Login==0.6.3 gunicorn==21.2.0 psycopg2-binary==2.9.9 APScheduler==3.10.4 msal==1.24.1 openai==1.3.7 requests==2.31.0 email-validator==2.1.0\n    fi\n    \n    echo \"Resetting any failed systemd attempts...\"\n    systemctl reset-failed lux || true\n    \n    echo \"Starting LUX service...\"\n    systemctl start lux\n    \n    echo \"Enabling service for auto-start...\"\n    systemctl enable lux\n    \n    echo \"Waiting for service to start...\"\n    sleep 10\n    \n    echo \"Checking service status...\"\n    systemctl status lux --no-pager -l || true\n    \n    echo \"Testing application...\"\n    echo \"Testing backend health...\"\n    if timeout 10 curl -sSf http://127.0.0.1:5000/ > /dev/null 2>&1; then\n        echo \"✅ Backend is responding!\"\n    else\n        echo \"❌ Backend not responding, checking logs...\"\n        journalctl -u lux -n 30 --no-pager\n    fi\n    \n    echo \"Testing domain access...\"\n    if timeout 10 curl -k -sSf https://lux.lucifercruz.com/ > /dev/null 2>&1; then\n        echo \"✅ Domain is accessible via HTTPS!\"\n    else\n        echo \"⚠️  Domain not accessible via HTTPS (checking nginx status)\"\n        systemctl status nginx --no-pager || true\n    fi\n    \n    echo \"Cleaning up...\"\n    rm -f /tmp/lux-email-app-fixed.tar.gz\n    \nEOF\n\necho \"\"\necho -e \"${GREEN}✅ Deployment completed!${NC}\"\necho \"\"\necho \"🌐 Your LUX Email Marketing app should now be accessible at:\"\necho \"   https://$DOMAIN\"\necho \"\"\necho \"📊 To check the application status:\"\necho \"   ssh $VPS_USER@$VPS_IP 'systemctl status lux'\"\necho \"\"\necho \"📱 To view logs:\"\necho \"   ssh $VPS_USER@$VPS_IP 'journalctl -u lux -f'\"\necho \"\"\necho \"🔧 Next steps:\"\necho \"   1. Visit https://$DOMAIN to test the application\"\necho \"   2. Log in with: admin / admin123\"\necho \"   3. Configure your Microsoft Graph API credentials\"\necho \"   4. Add your OpenAI API key for LUX AI features\"\necho \"\"","size_bytes":4388},"ai_agent.py":{"content":"\"\"\"\nLUX AI Agent - Automated Email Marketing Assistant\nPowered by OpenAI GPT-4o for intelligent email campaign management\n\"\"\"\nimport os\nimport json\nimport logging\nfrom datetime import datetime, timedelta\nfrom openai import OpenAI\n# Import only what we need at module level to avoid circular imports\n# Model imports will be done within functions where needed\nimport base64\nimport requests\nfrom urllib.parse import urljoin\n\nlogger = logging.getLogger(__name__)\n\nclass LUXAgent:\n    \"\"\"LUX - Automated Email Marketing AI Agent\"\"\"\n    \n    def __init__(self):\n        try:\n            # Ensure clean OpenAI client initialization without conflicting parameters\n            api_key = os.environ.get(\"OPENAI_API_KEY\")\n            if not api_key:\n                raise ValueError(\"OPENAI_API_KEY environment variable is required\")\n            \n            # Initialize OpenAI client with minimal parameters to avoid conflicts\n            self.client = OpenAI(api_key=api_key)\n            self.model = \"gpt-4o\"  # the newest OpenAI model is \"gpt-4o\" which was released May 13, 2024. do not change this unless explicitly requested by the user\n            self.agent_name = \"LUX\"\n            self.agent_personality = \"\"\"\n            You are LUX, an expert email marketing automation agent. You are professional, data-driven, \n            and focused on creating high-converting email campaigns. You understand marketing psychology, \n            audience segmentation, and email best practices. You always aim to maximize engagement rates \n            and conversions while maintaining brand consistency.\n            \"\"\"\n            logger.info(\"LUX AI Agent initialized successfully\")\n        except Exception as e:\n            logger.error(f\"Failed to initialize LUX AI Agent: {e}\")\n            raise\n    \n    def generate_campaign_content(self, campaign_objective, target_audience, brand_info=None):\n        \"\"\"Generate email campaign content based on objectives and audience\"\"\"\n        try:\n            prompt = f\"\"\"\n            As LUX, an email marketing expert, create a high-converting email campaign.\n            \n            Campaign Objective: {campaign_objective}\n            Target Audience: {target_audience}\n            Brand Information: {brand_info or 'Professional business'}\n            \n            Generate a complete email campaign with:\n            1. Compelling subject line (under 50 characters)\n            2. Professional HTML email content\n            3. Clear call-to-action\n            4. Personalization elements\n            \n            Respond in JSON format with:\n            {\n                \"subject\": \"email subject line\",\n                \"html_content\": \"complete HTML email content\",\n                \"campaign_name\": \"descriptive campaign name\",\n                \"recommendations\": \"optimization tips\"\n            }\n            \n            Make the content engaging, professional, and conversion-focused.\n            \"\"\"\n            \n            response = self.client.chat.completions.create(\n                model=self.model,\n                messages=[\n                    {\"role\": \"system\", \"content\": self.agent_personality},\n                    {\"role\": \"user\", \"content\": prompt}\n                ],\n                response_format={\"type\": \"json_object\"},\n                temperature=0.7\n            )\n            \n            content = response.choices[0].message.content\n            if not content:\n                logger.error(\"LUX received empty response from OpenAI\")\n                return None\n            result = json.loads(content)\n            logger.info(f\"LUX generated campaign content: {result['campaign_name']}\")\n            return result\n            \n        except Exception as e:\n            logger.error(f\"LUX error generating campaign content: {e}\")\n            return None\n    \n    def analyze_audience_segments(self, contacts):\n        \"\"\"Analyze contact data to create audience segments\"\"\"\n        try:\n            # Prepare contact data for analysis\n            contact_data = []\n            for contact in contacts[:50]:  # Limit for API efficiency\n                contact_data.append({\n                    'email': contact.email,\n                    'company': contact.company or 'Unknown',\n                    'tags': contact.tags or '',\n                    'created_at': contact.created_at.strftime('%Y-%m-%d') if contact.created_at else ''\n                })\n            \n            prompt = f\"\"\"\n            As LUX, analyze this contact data and create optimal audience segments for email marketing.\n            \n            Contact Data: {json.dumps(contact_data[:20])}  # Sample of contacts\n            Total Contacts: {len(contacts)}\n            \n            Create 3-5 audience segments based on:\n            - Company types/industries\n            - Contact behavior patterns\n            - Optimal messaging strategies\n            \n            Respond in JSON format with:\n            {{\n                \"segments\": [\n                    {{\n                        \"name\": \"segment name\",\n                        \"description\": \"who this segment includes\",\n                        \"size_estimate\": \"percentage of audience\",\n                        \"messaging_strategy\": \"how to communicate with this segment\",\n                        \"recommended_tags\": [\"tag1\", \"tag2\"]\n                    }}\n                ],\n                \"insights\": \"key findings about the audience\"\n            }}\n            \"\"\"\n            \n            response = self.client.chat.completions.create(\n                model=self.model,\n                messages=[\n                    {\"role\": \"system\", \"content\": self.agent_personality},\n                    {\"role\": \"user\", \"content\": prompt}\n                ],\n                response_format={\"type\": \"json_object\"},\n                temperature=0.3\n            )\n            \n            content = response.choices[0].message.content\n            if not content:\n                logger.error(\"LUX received empty response from OpenAI for audience analysis\")\n                return None\n            result = json.loads(content)\n            logger.info(f\"LUX analyzed audience and created {len(result['segments'])} segments\")\n            return result\n            \n        except Exception as e:\n            logger.error(f\"LUX error analyzing audience: {e}\")\n            return None\n    \n    def optimize_campaign_performance(self, campaign_id):\n        \"\"\"Analyze campaign performance and provide optimization recommendations\"\"\"\n        try:\n            # Import here to avoid circular imports\n            from tracking import get_campaign_analytics\n            \n            # Get campaign analytics\n            analytics = get_campaign_analytics(campaign_id)\n            if not analytics:\n                return None\n            \n            campaign_data = {\n                'name': analytics['campaign'].name,\n                'subject': analytics['campaign'].subject,\n                'total_recipients': analytics['total_recipients'],\n                'delivery_rate': analytics['delivery_rate'],\n                'open_rate': analytics['open_rate'],\n                'click_rate': analytics['click_rate'],\n                'bounce_rate': analytics['bounce_rate']\n            }\n            \n            prompt = f\"\"\"\n            As LUX, analyze this email campaign performance and provide optimization recommendations.\n            \n            Campaign Data: {json.dumps(campaign_data)}\n            \n            Industry Benchmarks:\n            - Average Open Rate: 21.33%\n            - Average Click Rate: 2.62%\n            - Average Bounce Rate: 0.58%\n            \n            Provide actionable recommendations to improve performance.\n            \n            Respond in JSON format with:\n            {\n                \"performance_assessment\": \"overall performance evaluation\",\n                \"strengths\": [\"what's working well\"],\n                \"improvements\": [\n                    {\n                        \"area\": \"specific area to improve\",\n                        \"recommendation\": \"specific action to take\",\n                        \"expected_impact\": \"predicted improvement\"\n                    }\n                ],\n                \"next_campaign_suggestions\": \"ideas for follow-up campaigns\"\n            }\n            \"\"\"\n            \n            response = self.client.chat.completions.create(\n                model=self.model,\n                messages=[\n                    {\"role\": \"system\", \"content\": self.agent_personality},\n                    {\"role\": \"user\", \"content\": prompt}\n                ],\n                response_format={\"type\": \"json_object\"},\n                temperature=0.3\n            )\n            \n            result = json.loads(response.choices[0].message.content)\n            logger.info(f\"LUX analyzed campaign {campaign_id} performance\")\n            return result\n            \n        except Exception as e:\n            logger.error(f\"LUX error optimizing campaign: {e}\")\n            return None\n    \n    def create_automated_campaign(self, campaign_brief, template_id=None):\n        \"\"\"Automatically create and schedule a complete email campaign\"\"\"\n        try:\n            # Import here to avoid circular imports\n            from models import Campaign, EmailTemplate, Contact, CampaignRecipient, db\n            from email_service import EmailService\n            \n            # Generate campaign content\n            content = self.generate_campaign_content(\n                campaign_brief.get('objective', 'Engage audience'),\n                campaign_brief.get('target_audience', 'All contacts'),\n                campaign_brief.get('brand_info', 'Professional business')\n            )\n            \n            if not content:\n                return None\n            \n            # Create email template if not provided\n            if not template_id:\n                template = EmailTemplate(\n                    name=f\"LUX Generated - {content['campaign_name']}\",\n                    subject=content['subject'],\n                    html_content=content['html_content']\n                )\n                db.session.add(template)\n                db.session.flush()\n                template_id = template.id\n            \n            # Create campaign\n            campaign = Campaign(\n                name=content['campaign_name'],\n                subject=content['subject'],\n                template_id=template_id,\n                status='draft'\n            )\n            \n            # Schedule if requested\n            if campaign_brief.get('schedule_time'):\n                campaign.scheduled_at = campaign_brief['schedule_time']\n                campaign.status = 'scheduled'\n            \n            db.session.add(campaign)\n            db.session.flush()\n            \n            # Add recipients based on targeting\n            contacts_query = Contact.query.filter_by(is_active=True)\n            \n            # Apply audience filtering if specified\n            if campaign_brief.get('target_tags'):\n                tags = campaign_brief['target_tags']\n                tag_conditions = []\n                for tag in tags:\n                    tag_conditions.append(Contact.tags.contains(tag))\n                if tag_conditions:\n                    from sqlalchemy import or_\n                    contacts_query = contacts_query.filter(or_(*tag_conditions))\n            \n            contacts = contacts_query.all()\n            \n            # Add recipients\n            for contact in contacts:\n                recipient = CampaignRecipient(\n                    campaign_id=campaign.id,\n                    contact_id=contact.id\n                )\n                db.session.add(recipient)\n            \n            db.session.commit()\n            \n            result = {\n                'campaign_id': campaign.id,\n                'campaign_name': campaign.name,\n                'recipients_count': len(contacts),\n                'recommendations': content.get('recommendations', ''),\n                'status': campaign.status\n            }\n            \n            logger.info(f\"LUX created automated campaign: {campaign.name} with {len(contacts)} recipients\")\n            return result\n            \n        except Exception as e:\n            logger.error(f\"LUX error creating automated campaign: {e}\")\n            db.session.rollback()\n            return None\n    \n    def generate_subject_line_variants(self, campaign_objective, original_subject=None):\n        \"\"\"Generate multiple subject line variants for A/B testing\"\"\"\n        try:\n            prompt = f\"\"\"\n            As LUX, generate 5 high-converting email subject line variants for A/B testing.\n            \n            Campaign Objective: {campaign_objective}\n            Original Subject: {original_subject or 'Not provided'}\n            \n            Create subject lines that use different psychological triggers:\n            - Urgency\n            - Curiosity\n            - Benefit-focused\n            - Personalization\n            - Social proof\n            \n            Respond in JSON format with:\n            {\n                \"variants\": [\n                    {\n                        \"subject\": \"subject line text\",\n                        \"strategy\": \"psychological trigger used\",\n                        \"predicted_performance\": \"high/medium/low\"\n                    }\n                ],\n                \"testing_recommendations\": \"how to test these effectively\"\n            }\n            \n            Keep all subject lines under 50 characters for mobile optimization.\n            \"\"\"\n            \n            response = self.client.chat.completions.create(\n                model=self.model,\n                messages=[\n                    {\"role\": \"system\", \"content\": self.agent_personality},\n                    {\"role\": \"user\", \"content\": prompt}\n                ],\n                response_format={\"type\": \"json_object\"},\n                temperature=0.8\n            )\n            \n            result = json.loads(response.choices[0].message.content)\n            logger.info(f\"LUX generated {len(result['variants'])} subject line variants\")\n            return result\n            \n        except Exception as e:\n            logger.error(f\"LUX error generating subject lines: {e}\")\n            return None\n    \n    def get_campaign_recommendations(self, campaign_data=None, total_contacts=0):\n        \"\"\"Get AI-powered recommendations for new campaigns based on provided data\"\"\"\n        try:\n            # Accept data as parameters to avoid circular imports\n            if campaign_data is None:\n                campaign_data = []\n            \n            prompt = f\"\"\"\n            As LUX, analyze the current email marketing situation and recommend new campaign strategies.\n            \n            Current Data:\n            - Total Active Contacts: {total_contacts}\n            - Recent Campaigns: {json.dumps(campaign_data)}\n            - Current Date: {datetime.now().strftime('%Y-%m-%d')}\n            \n            Provide strategic recommendations for upcoming campaigns considering:\n            - Seasonal opportunities\n            - Performance trends\n            - Audience engagement patterns\n            - Industry best practices\n            \n            Respond in JSON format with:\n            {{\n                \"recommended_campaigns\": [\n                    {{\n                        \"campaign_type\": \"type of campaign\",\n                        \"objective\": \"primary goal\", \n                        \"timing\": \"when to send\",\n                        \"expected_results\": \"predicted performance\",\n                        \"priority\": \"high/medium/low\"\n                    }}\n                ],\n                \"strategic_insights\": \"key observations and next steps\"\n            }}\n            \"\"\"\n            \n            response = self.client.chat.completions.create(\n                model=self.model,\n                messages=[\n                    {\"role\": \"system\", \"content\": self.agent_personality},\n                    {\"role\": \"user\", \"content\": prompt}\n                ],\n                response_format={\"type\": \"json_object\"},\n                temperature=0.4\n            )\n            \n            result = json.loads(response.choices[0].message.content)\n            logger.info(f\"LUX generated {len(result['recommended_campaigns'])} campaign recommendations\")\n            return result\n            \n        except Exception as e:\n            logger.error(f\"LUX error getting recommendations: {e}\")\n            return None\n    \n    def generate_email_content(self, prompt, content_type=\"email_content\"):\n        \"\"\"Generate email content using OpenAI\"\"\"\n        try:\n            system_prompt = f\"\"\"\n            You are LUX, an expert email marketing content generator. Generate compelling {content_type} \n            based on the user's requirements. Always provide 3-5 different options that are:\n            - Engaging and professional\n            - Action-oriented when appropriate\n            - Brand-consistent\n            - Optimized for email marketing\n            \"\"\"\n            \n            response = self.client.chat.completions.create(\n                model=\"gpt-4o\",\n                messages=[\n                    {\"role\": \"system\", \"content\": system_prompt},\n                    {\"role\": \"user\", \"content\": f\"Generate {content_type} for: {prompt}\"}\n                ],\n                max_tokens=1000,\n                temperature=0.8\n            )\n            \n            content = response.choices[0].message.content.strip()\n            \n            # Split into multiple options\n            if \"1.\" in content or \"Option 1\" in content:\n                options = [opt.strip() for opt in content.split('\\n') if opt.strip() and any(c.isalnum() for c in opt)]\n                return options[:5]\n            else:\n                # If not formatted as list, create variations\n                return [\n                    content,\n                    content.replace(\".\", \"!\"),\n                    content + \" Act now!\",\n                    content.replace(\"your\", \"our\") if \"your\" in content else content + \" Don't miss out!\"\n                ]\n                \n        except Exception as e:\n            logger.error(f\"Error generating email content: {e}\")\n            return [\"Error generating content. Please try again.\"]\n    \n    def generate_subject_lines(self, campaign_type, audience=\"\"):\n        \"\"\"Generate email subject line suggestions\"\"\"\n        try:\n            system_prompt = \"\"\"\n            You are LUX, an expert email marketing strategist. Generate compelling email subject lines \n            that maximize open rates. Focus on:\n            - Creating urgency and curiosity\n            - Keeping under 50 characters when possible\n            - Using action words\n            - Avoiding spam trigger words\n            - Personalizing when appropriate\n            \"\"\"\n            \n            audience_context = f\" for {audience}\" if audience else \"\"\n            \n            response = self.client.chat.completions.create(\n                model=\"gpt-4o\",\n                messages=[\n                    {\"role\": \"system\", \"content\": system_prompt},\n                    {\"role\": \"user\", \"content\": f\"Generate 8 compelling subject lines for a {campaign_type} campaign{audience_context}\"}\n                ],\n                max_tokens=500,\n                temperature=0.9\n            )\n            \n            content = response.choices[0].message.content.strip()\n            \n            # Extract subject lines\n            lines = [line.strip() for line in content.split('\\n') if line.strip() and len(line.strip()) > 5]\n            # Clean up formatting (remove numbers, bullets, etc.)\n            cleaned_lines = []\n            for line in lines:\n                cleaned = line.split('. ', 1)[-1].split('- ', 1)[-1].strip(' \"\\'')\n                if len(cleaned) > 5:\n                    cleaned_lines.append(cleaned)\n                    \n            return cleaned_lines[:8]\n            \n        except Exception as e:\n            logger.error(f\"Error generating subject lines: {e}\")\n            return [\"Error generating subject lines. Please try again.\"]\n    \n    def generate_campaign_image(self, campaign_description, style=\"professional marketing\"):\n        \"\"\"Generate marketing images using DALL-E\"\"\"\n        try:\n            if not self.client:\n                logger.error(\"OpenAI client not initialized for image generation\")\n                return None\n                \n            prompt = f\"\"\"\n            Create a professional marketing image for: {campaign_description}\n            \n            Style: {style}\n            Requirements:\n            - High-quality, professional marketing design\n            - Suitable for email marketing campaigns\n            - Clear, engaging visual that supports the campaign message\n            - Modern, clean aesthetic\n            - Brand-friendly colors and composition\n            \"\"\"\n            \n            # Use explicit parameters to avoid any conflicts\n            response = self.client.images.generate(\n                model=\"dall-e-3\",\n                prompt=prompt,\n                n=1,\n                size=\"1024x1024\",\n                quality=\"standard\"\n            )\n            \n            image_url = response.data[0].url\n            logger.info(f\"LUX generated campaign image: {campaign_description[:50]}...\")\n            \n            return {\n                'image_url': image_url,\n                'prompt_used': prompt,\n                'campaign_description': campaign_description\n            }\n            \n        except Exception as e:\n            logger.error(f\"LUX error generating image: {e}\")\n            return None\n    \n    def fetch_woocommerce_products(self, woocommerce_url, consumer_key, consumer_secret, \n                                  product_limit=10, category_filter=None):\n        \"\"\"Fetch products from WooCommerce API using pure requests - no WooCommerce library\"\"\"\n        try:\n            # Explicitly prevent any WooCommerce library imports\n            import sys\n            woo_modules = [mod for mod in sys.modules.keys() if 'woocommerce' in mod.lower()]\n            if woo_modules:\n                logger.warning(f\"Detected WooCommerce modules: {woo_modules}. Using requests only.\")\n            \n            # Always use requests library directly to avoid WooCommerce library conflicts\n            # Construct API endpoint\n            api_url = urljoin(woocommerce_url, '/wp-json/wc/v3/products')\n            \n            # Set up authentication and parameters\n            auth = (consumer_key, consumer_secret)\n            params = {\n                'per_page': product_limit,\n                'status': 'publish',\n                'stock_status': 'instock'\n            }\n            \n            if category_filter:\n                params['category'] = category_filter\n            \n            # Use requests directly to avoid any WooCommerce client library issues\n            response = requests.get(api_url, auth=auth, params=params, timeout=10)\n            \n            if response.status_code == 200:\n                products = response.json()\n                \n                # Process products for email use\n                processed_products = []\n                for product in products:\n                    processed_product = {\n                        'id': product.get('id'),\n                        'name': product.get('name', ''),\n                        'price': product.get('price', '0'),\n                        'regular_price': product.get('regular_price', '0'),\n                        'sale_price': product.get('sale_price', ''),\n                        'description': product.get('short_description', ''),\n                        'image_url': product.get('images', [{}])[0].get('src', '') if product.get('images') else '',\n                        'permalink': product.get('permalink', ''),\n                        'categories': [cat.get('name', '') for cat in product.get('categories', [])],\n                        'tags': [tag.get('name', '') for tag in product.get('tags', [])],\n                        'in_stock': product.get('stock_status') == 'instock',\n                        'featured': product.get('featured', False)\n                    }\n                    processed_products.append(processed_product)\n                \n                logger.info(f\"LUX fetched {len(processed_products)} WooCommerce products\")\n                return processed_products\n            else:\n                logger.error(f\"WooCommerce API error: {response.status_code} - {response.text}\")\n                return None\n                \n        except Exception as e:\n            logger.error(f\"LUX error fetching WooCommerce products: {e}\")\n            return None\n    \n    def create_product_campaign(self, woocommerce_config, campaign_objective, \n                               product_filter=None, include_images=True):\n        \"\"\"Create a product-focused email campaign with WooCommerce integration\"\"\"\n        try:\n            # Ensure no WooCommerce library conflicts by isolating the API call\n            logger.info(\"Starting WooCommerce product campaign creation...\")\n            \n            # Fetch products using isolated approach\n            products = self.fetch_woocommerce_products(\n                woocommerce_config['url'],\n                woocommerce_config['consumer_key'],\n                woocommerce_config['consumer_secret'],\n                product_limit=woocommerce_config.get('product_limit', 6),\n                category_filter=product_filter\n            )\n            \n            if not products:\n                return None\n            \n            # Generate campaign image if requested\n            campaign_image = None\n            if include_images:\n                image_description = f\"Product showcase for {campaign_objective} featuring {len(products)} products\"\n                campaign_image = self.generate_campaign_image(image_description, \"e-commerce product showcase\")\n            \n            # Create product-focused campaign content\n            prompt = f\"\"\"\n            As LUX, create a high-converting product email campaign.\n            \n            Campaign Objective: {campaign_objective}\n            Products to Feature: {json.dumps(products[:3])}  # Top 3 products for context\n            Total Products Available: {len(products)}\n            Campaign Image: {'Available' if campaign_image else 'Not generated'}\n            \n            Create an HTML email that:\n            1. Features the products prominently with images and prices\n            2. Includes compelling product descriptions\n            3. Has clear call-to-action buttons for each product\n            4. Uses professional e-commerce email styling\n            5. Includes the campaign image if available\n            6. Has a compelling subject line focused on the products\n            \n            Respond in JSON format with:\n            {\n                \"subject\": \"product-focused subject line\",\n                \"html_content\": \"complete HTML email with product showcase\",\n                \"campaign_name\": \"descriptive campaign name\",\n                \"featured_products\": [\"list of product names featured\"],\n                \"recommendations\": \"optimization tips for product campaigns\"\n            }\n            \n            Make it conversion-focused with clear pricing and purchase buttons.\n            \"\"\"\n            \n            response = self.client.chat.completions.create(\n                model=self.model,\n                messages=[\n                    {\"role\": \"system\", \"content\": self.agent_personality},\n                    {\"role\": \"user\", \"content\": prompt}\n                ],\n                response_format={\"type\": \"json_object\"},\n                temperature=0.7\n            )\n            \n            campaign_content = json.loads(response.choices[0].message.content)\n            \n            # Add product and image data to response\n            result = {\n                **campaign_content,\n                'products': products,\n                'campaign_image': campaign_image,\n                'product_count': len(products),\n                'woocommerce_integration': True\n            }\n            \n            logger.info(f\"LUX created product campaign with {len(products)} products\")\n            return result\n            \n        except Exception as e:\n            logger.error(f\"LUX error creating product campaign: {e}\")\n            return None\n\n# Global LUX agent instance\nlux_agent = LUXAgent()","size_bytes":28624},"health_check.py":{"content":"#!/usr/bin/env python3\n\"\"\"\nHealth check endpoint for monitoring\nAdd this to your routes.py or create a separate health check endpoint\n\"\"\"\n\nfrom flask import jsonify, current_app\nfrom datetime import datetime\ntry:\n    import psutil\nexcept ImportError:\n    psutil = None\nimport os\n\ndef health_check():\n    \"\"\"\n    Comprehensive health check endpoint\n    Returns JSON with system status\n    \"\"\"\n    try:\n        # Check database connection\n        from app import db\n        db.session.execute('SELECT 1')\n        db_status = \"healthy\"\n    except Exception as e:\n        db_status = f\"error: {str(e)}\"\n    \n    # System metrics\n    system_info = {\n        \"timestamp\": datetime.utcnow().isoformat(),\n        \"status\": \"healthy\" if db_status == \"healthy\" else \"unhealthy\",\n        \"database\": db_status,\n    }\n    \n    # Add system metrics if psutil is available\n    if psutil:\n        system_info.update({\n            \"memory_usage\": {\n                \"used\": psutil.virtual_memory().used,\n                \"total\": psutil.virtual_memory().total,\n                \"percent\": psutil.virtual_memory().percent\n            },\n            \"disk_usage\": {\n                \"used\": psutil.disk_usage('/').used,\n                \"total\": psutil.disk_usage('/').total,\n                \"percent\": psutil.disk_usage('/').percent\n            },\n            \"cpu_percent\": psutil.cpu_percent(interval=1),\n            \"load_average\": os.getloadavg(),\n        })\n    \n    system_info[\"uptime\"] = datetime.utcnow().isoformat()  # App start time would be better\n    \n    status_code = 200 if system_info[\"status\"] == \"healthy\" else 503\n    return jsonify(system_info), status_code\n\n# Add this route to your routes.py:\n# @main_bp.route('/health')\n# def health():\n#     return health_check()","size_bytes":1765},"deploy_from_local.sh":{"content":"# SSH into your VPS\nssh root@194.195.92.52\n\n# Install dependencies\napt update\napt install -y python3 python3-pip python3-venv nginx postgresql postgresql-contrib\n\n# Create application user and directories\nuseradd -m -s /bin/bash luxapp\nmkdir -p /var/log/lux-marketing\nchown -R luxapp:www-data /var/www/lux-marketing\nchown luxapp:www-data /var/log/lux-marketing`","size_bytes":361},"seo_service.py":{"content":"\"\"\"\nSEO Analysis Service\nProvides website crawling, meta analysis, and SEO recommendations.\n\"\"\"\n\nimport logging\nimport requests\nfrom bs4 import BeautifulSoup\nfrom urllib.parse import urljoin, urlparse\nimport re\n\nlogger = logging.getLogger(__name__)\n\n\nclass SEOService:\n    \"\"\"Service to handle SEO analysis and recommendations.\"\"\"\n    \n    def __init__(self):\n        self.user_agent = 'Mozilla/5.0 (compatible; LUX-SEO-Bot/1.0)'\n    \n    def analyze_page(self, url):\n        \"\"\"\n        Analyze a single page for SEO factors.\n        \n        Args:\n            url: The URL to analyze\n            \n        Returns:\n            Dictionary containing SEO analysis results\n        \"\"\"\n        try:\n            response = requests.get(url, headers={'User-Agent': self.user_agent}, timeout=10)\n            response.raise_for_status()\n            \n            soup = BeautifulSoup(response.content, 'html.parser')\n            \n            analysis = {\n                'url': url,\n                'status_code': response.status_code,\n                'title': self._get_title(soup),\n                'meta_description': self._get_meta_description(soup),\n                'headings': self._get_headings(soup),\n                'images': self._get_images(soup),\n                'links': self._get_links(soup, url),\n                'word_count': self._get_word_count(soup),\n                'recommendations': []\n            }\n            \n            # Generate recommendations\n            analysis['recommendations'] = self._generate_recommendations(analysis)\n            \n            return {\n                'success': True,\n                'data': analysis\n            }\n            \n        except requests.RequestException as e:\n            logger.error(f\"Error analyzing page {url}: {e}\")\n            return {\n                'success': False,\n                'error': str(e)\n            }\n    \n    def _get_title(self, soup):\n        \"\"\"Extract page title.\"\"\"\n        title_tag = soup.find('title')\n        if title_tag:\n            title = title_tag.get_text().strip()\n            return {\n                'text': title,\n                'length': len(title),\n                'optimal': 50 <= len(title) <= 60\n            }\n        return None\n    \n    def _get_meta_description(self, soup):\n        \"\"\"Extract meta description.\"\"\"\n        meta_desc = soup.find('meta', attrs={'name': 'description'})\n        if meta_desc and meta_desc.get('content'):\n            desc = meta_desc.get('content').strip()\n            return {\n                'text': desc,\n                'length': len(desc),\n                'optimal': 150 <= len(desc) <= 160\n            }\n        return None\n    \n    def _get_headings(self, soup):\n        \"\"\"Extract all heading tags.\"\"\"\n        headings = {\n            'h1': [],\n            'h2': [],\n            'h3': [],\n            'h4': [],\n            'h5': [],\n            'h6': []\n        }\n        \n        for level in range(1, 7):\n            tags = soup.find_all(f'h{level}')\n            headings[f'h{level}'] = [tag.get_text().strip() for tag in tags]\n        \n        return headings\n    \n    def _get_images(self, soup):\n        \"\"\"Analyze images for SEO.\"\"\"\n        images = soup.find_all('img')\n        total = len(images)\n        missing_alt = len([img for img in images if not img.get('alt')])\n        \n        return {\n            'total': total,\n            'missing_alt': missing_alt,\n            'alt_coverage': ((total - missing_alt) / total * 100) if total > 0 else 0\n        }\n    \n    def _get_links(self, soup, base_url):\n        \"\"\"Analyze links.\"\"\"\n        links = soup.find_all('a', href=True)\n        internal = 0\n        external = 0\n        \n        parsed_base = urlparse(base_url)\n        \n        for link in links:\n            href = link.get('href')\n            parsed_href = urlparse(urljoin(base_url, href))\n            \n            if parsed_href.netloc == parsed_base.netloc or not parsed_href.netloc:\n                internal += 1\n            else:\n                external += 1\n        \n        return {\n            'total': len(links),\n            'internal': internal,\n            'external': external\n        }\n    \n    def _get_word_count(self, soup):\n        \"\"\"Count words in main content.\"\"\"\n        # Remove script and style elements\n        for script in soup(['script', 'style', 'nav', 'footer', 'header']):\n            script.decompose()\n        \n        text = soup.get_text()\n        words = re.findall(r'\\b\\w+\\b', text)\n        return len(words)\n    \n    def _generate_recommendations(self, analysis):\n        \"\"\"Generate SEO recommendations based on analysis.\"\"\"\n        recommendations = []\n        \n        # Title recommendations\n        if not analysis['title']:\n            recommendations.append({\n                'type': 'error',\n                'category': 'Title',\n                'message': 'Missing page title. Add a unique, descriptive title tag.'\n            })\n        elif not analysis['title']['optimal']:\n            if analysis['title']['length'] < 50:\n                recommendations.append({\n                    'type': 'warning',\n                    'category': 'Title',\n                    'message': f\"Title is too short ({analysis['title']['length']} chars). Aim for 50-60 characters.\"\n                })\n            elif analysis['title']['length'] > 60:\n                recommendations.append({\n                    'type': 'warning',\n                    'category': 'Title',\n                    'message': f\"Title is too long ({analysis['title']['length']} chars). Keep it under 60 characters.\"\n                })\n        \n        # Meta description recommendations\n        if not analysis['meta_description']:\n            recommendations.append({\n                'type': 'error',\n                'category': 'Meta Description',\n                'message': 'Missing meta description. Add a compelling description (150-160 chars).'\n            })\n        elif not analysis['meta_description']['optimal']:\n            recommendations.append({\n                'type': 'warning',\n                'category': 'Meta Description',\n                'message': f\"Meta description length is {analysis['meta_description']['length']} chars. Aim for 150-160.\"\n            })\n        \n        # Heading recommendations\n        h1_count = len(analysis['headings']['h1'])\n        if h1_count == 0:\n            recommendations.append({\n                'type': 'error',\n                'category': 'Headings',\n                'message': 'No H1 heading found. Every page should have exactly one H1.'\n            })\n        elif h1_count > 1:\n            recommendations.append({\n                'type': 'warning',\n                'category': 'Headings',\n                'message': f'Multiple H1 headings found ({h1_count}). Use only one H1 per page.'\n            })\n        \n        # Image recommendations\n        if analysis['images']['missing_alt'] > 0:\n            recommendations.append({\n                'type': 'warning',\n                'category': 'Images',\n                'message': f\"{analysis['images']['missing_alt']} images missing alt text. Add descriptive alt attributes.\"\n            })\n        \n        # Content recommendations\n        if analysis['word_count'] < 300:\n            recommendations.append({\n                'type': 'warning',\n                'category': 'Content',\n                'message': f\"Low word count ({analysis['word_count']} words). Aim for at least 300 words.\"\n            })\n        \n        # Link recommendations\n        if analysis['links']['external'] == 0:\n            recommendations.append({\n                'type': 'info',\n                'category': 'Links',\n                'message': 'No external links found. Consider linking to authoritative sources.'\n            })\n        \n        if not recommendations:\n            recommendations.append({\n                'type': 'success',\n                'category': 'Overall',\n                'message': 'Great job! No critical SEO issues found.'\n            })\n        \n        return recommendations\n\n\n# Create global instance\nseo_service = SEOService()\n","size_bytes":8138},"wsgi_new.py":{"content":"\"\"\"WSGI entry point for new lux app factory (testing).\"\"\"\nfrom lux import create_app\n\napp = create_app()\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000, debug=True)\n","size_bytes":184},"lux/blueprints/__init__.py":{"content":"","size_bytes":0},"lux/blueprints/auth/__init__.py":{"content":"","size_bytes":0},"lux/blueprints/user/__init__.py":{"content":"","size_bytes":0},"lux/config.py":{"content":"\"\"\"Flask configuration.\"\"\"\nimport os\n\n\nclass Config:\n    \"\"\"Base configuration.\"\"\"\n\n    SECRET_KEY = os.environ.get(\"SESSION_SECRET\")\n    SQLALCHEMY_DATABASE_URI = os.environ.get(\"DATABASE_URL\", \"sqlite:///email_marketing.db\")\n    SQLALCHEMY_ENGINE_OPTIONS = {\n        \"pool_recycle\": 300,\n        \"pool_pre_ping\": True,\n    }\n    SQLALCHEMY_TRACK_MODIFICATIONS = False\n\n    # Microsoft Graph API\n    MS_CLIENT_ID = os.environ.get(\"MS_CLIENT_ID\", \"\")\n    MS_CLIENT_SECRET = os.environ.get(\"MS_CLIENT_SECRET\", \"\")\n    MS_TENANT_ID = os.environ.get(\"MS_TENANT_ID\", \"\")\n\n    # OpenAI\n    OPENAI_API_KEY = os.environ.get(\"OPENAI_API_KEY\", \"\")\n\n    # Twilio (for SMS)\n    TWILIO_ACCOUNT_SID = os.environ.get(\"TWILIO_ACCOUNT_SID\", \"\")\n    TWILIO_AUTH_TOKEN = os.environ.get(\"TWILIO_AUTH_TOKEN\", \"\")\n    TWILIO_PHONE_NUMBER = os.environ.get(\"TWILIO_PHONE_NUMBER\", \"\")\n\n    # Email Providers\n    SMTP_HOST = os.environ.get(\"SMTP_HOST\", \"\")\n    SMTP_PORT = int(os.environ.get(\"SMTP_PORT\", \"587\"))\n    SMTP_USER = os.environ.get(\"SMTP_USER\", \"\")\n    SMTP_PASS = os.environ.get(\"SMTP_PASS\", \"\")\n    SMTP_FROM = os.environ.get(\"SMTP_FROM\", \"\")\n\n    MAILGUN_API_KEY = os.environ.get(\"MAILGUN_API_KEY\", \"\")\n    MAILGUN_DOMAIN = os.environ.get(\"MAILGUN_DOMAIN\", \"\")\n    MAILGUN_FROM = os.environ.get(\"MAILGUN_FROM\", \"\")\n\n    # Social Media API Keys\n    FACEBOOK_ACCESS_TOKEN = os.environ.get(\"FACEBOOK_ACCESS_TOKEN\", \"\")\n    FACEBOOK_PAGE_ID = os.environ.get(\"FACEBOOK_PAGE_ID\", \"\")\n    LINKEDIN_ACCESS_TOKEN = os.environ.get(\"LINKEDIN_ACCESS_TOKEN\", \"\")\n\n    # WooCommerce\n    WOOCOMMERCE_URL = os.environ.get(\"WOOCOMMERCE_URL\", \"\")\n    WOOCOMMERCE_KEY = os.environ.get(\"WOOCOMMERCE_KEY\", \"\")\n    WOOCOMMERCE_SECRET = os.environ.get(\"WOOCOMMERCE_SECRET\", \"\")\n\n    # Stripe\n    STRIPE_SECRET_KEY = os.environ.get(\"STRIPE_SECRET_KEY\", \"\")\n    STRIPE_PUBLISHABLE_KEY = os.environ.get(\"STRIPE_PUBLISHABLE_KEY\", \"\")\n\n    # Google Ads\n    GOOGLE_ADS_CLIENT_ID = os.environ.get(\"GOOGLE_ADS_CLIENT_ID\", \"\")\n    GOOGLE_ADS_CLIENT_SECRET = os.environ.get(\"GOOGLE_ADS_CLIENT_SECRET\", \"\")\n    GOOGLE_ADS_DEVELOPER_TOKEN = os.environ.get(\"GOOGLE_ADS_DEVELOPER_TOKEN\", \"\")\n\n\nclass DevelopmentConfig(Config):\n    \"\"\"Development configuration.\"\"\"\n\n    DEBUG = True\n    TESTING = False\n\n\nclass ProductionConfig(Config):\n    \"\"\"Production configuration.\"\"\"\n\n    DEBUG = False\n    TESTING = False\n\n\nclass TestingConfig(Config):\n    \"\"\"Testing configuration.\"\"\"\n\n    DEBUG = True\n    TESTING = True\n    SQLALCHEMY_DATABASE_URI = \"sqlite:///:memory:\"\n    WTF_CSRF_ENABLED = False\n\n\nconfig = {\n    \"development\": DevelopmentConfig,\n    \"production\": ProductionConfig,\n    \"testing\": TestingConfig,\n    \"default\": DevelopmentConfig,\n}\n","size_bytes":2698},"lux/blueprints/main/routes.py":{"content":"\"\"\"Main blueprint routes - placeholder for dashboard and core routes.\"\"\"\nfrom flask import Blueprint, render_template\nfrom flask_login import login_required\n\nmain_bp = Blueprint('main', __name__, template_folder='../../templates')\n\n\n@main_bp.route('/')\ndef index():\n    \"\"\"Landing page.\"\"\"\n    return render_template('index.html')\n\n\n@main_bp.route('/dashboard')\n@login_required\ndef dashboard():\n    \"\"\"Main dashboard.\"\"\"\n    return render_template('dashboard.html')\n","size_bytes":466},"lux/blueprints/user/routes.py":{"content":"\"\"\"User management blueprint routes.\"\"\"\nfrom flask import Blueprint, render_template, request, flash, redirect, url_for\nfrom flask_login import login_required, current_user\nfrom werkzeug.security import generate_password_hash, check_password_hash\n\nfrom lux.extensions import db\nfrom lux.models.user import User\nfrom lux.core.utils import validate_email\n\nuser_bp = Blueprint('user', __name__, template_folder='../../templates')\n\n\n@user_bp.route('/profile')\n@login_required\ndef profile():\n    \"\"\"User profile page.\"\"\"\n    return render_template('user_profile.html', user=current_user)\n\n\n@user_bp.route('/change-password', methods=['GET', 'POST'])\n@login_required\ndef change_password():\n    \"\"\"Change user password.\"\"\"\n    if request.method == 'POST':\n        current_password = request.form.get('current_password', '')\n        new_password = request.form.get('new_password', '')\n        confirm_password = request.form.get('confirm_password', '')\n        \n        if not all([current_password, new_password, confirm_password]):\n            flash('All fields are required', 'error')\n            return render_template('change_password.html')\n        \n        if not check_password_hash(current_user.password_hash, current_password):\n            flash('Current password is incorrect', 'error')\n            return render_template('change_password.html')\n        \n        if len(new_password) < 6:\n            flash('New password must be at least 6 characters long', 'error')\n            return render_template('change_password.html')\n        \n        if new_password != confirm_password:\n            flash('New passwords do not match', 'error')\n            return render_template('change_password.html')\n        \n        current_user.password_hash = generate_password_hash(new_password)\n        db.session.commit()\n        \n        flash('Password updated successfully', 'success')\n        return redirect(url_for('user.profile'))\n    \n    return render_template('change_password.html')\n\n\n@user_bp.route('/manage-users')\n@login_required\ndef manage_users():\n    \"\"\"Manage all users (admin function).\"\"\"\n    users = User.query.order_by(User.created_at.desc()).all()\n    return render_template('manage_users.html', users=users)\n","size_bytes":2220},"lux/models/base.py":{"content":"\"\"\"Base model mixins for common functionality.\"\"\"\nfrom datetime import datetime\nfrom sqlalchemy import Column, DateTime\nfrom sqlalchemy.orm import declared_attr\n\n\nclass TimestampMixin:\n    \"\"\"Mixin to add created_at and updated_at timestamps to models.\"\"\"\n    \n    @declared_attr\n    def created_at(cls):\n        return Column(DateTime, default=datetime.utcnow, nullable=False)\n    \n    @declared_attr\n    def updated_at(cls):\n        return Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow, nullable=False)\n","size_bytes":526},"sms_service.py":{"content":"\"\"\"SMS Service for Twilio integration.\"\"\"\nimport os\nimport logging\nfrom twilio.rest import Client\nfrom twilio.base.exceptions import TwilioRestException\n\nlogger = logging.getLogger(__name__)\n\n\nclass SMSService:\n    \"\"\"Service to handle SMS operations via Twilio.\"\"\"\n    \n    def __init__(self):\n        self.account_sid = os.environ.get('TWILIO_ACCOUNT_SID')\n        self.auth_token = os.environ.get('TWILIO_AUTH_TOKEN')\n        self.phone_number = os.environ.get('TWILIO_PHONE_NUMBER')\n        \n        if self.account_sid and self.auth_token and self.phone_number:\n            self.client = Client(self.account_sid, self.auth_token)\n            self.enabled = True\n        else:\n            self.client = None\n            self.enabled = False\n            logger.warning(\"Twilio credentials not fully configured. SMS features disabled. Need: TWILIO_ACCOUNT_SID, TWILIO_AUTH_TOKEN, TWILIO_PHONE_NUMBER\")\n    \n    def send_sms(self, to_number, message):\n        \"\"\"\n        Send an SMS message to a single recipient.\n        \n        Args:\n            to_number (str): Recipient phone number in E.164 format (+1234567890)\n            message (str): Message content (max 160 characters for single SMS)\n        \n        Returns:\n            dict: Result with 'success', 'message_sid', and 'error' keys\n        \"\"\"\n        if not self.enabled:\n            return {\n                'success': False,\n                'error': 'Twilio not configured. Please set TWILIO_ACCOUNT_SID, TWILIO_AUTH_TOKEN, and TWILIO_PHONE_NUMBER.'\n            }\n        \n        try:\n            # Normalize and validate phone number\n            if not self.validate_phone_number(to_number):\n                return {\n                    'success': False,\n                    'error': f'Invalid phone number format: {to_number}'\n                }\n            \n            # Clean and format to E.164\n            clean_number = to_number.replace('+', '').replace('-', '').replace(' ', '').replace('(', '').replace(')', '')\n            if not clean_number.startswith('1') and len(clean_number) == 10:\n                # Add US country code if missing\n                clean_number = '1' + clean_number\n            formatted_number = '+' + clean_number\n            \n            message_obj = self.client.messages.create(\n                body=message,\n                from_=self.phone_number,\n                to=formatted_number\n            )\n            \n            logger.info(f\"SMS sent successfully. SID: {message_obj.sid}\")\n            return {\n                'success': True,\n                'message_sid': message_obj.sid,\n                'status': message_obj.status\n            }\n            \n        except TwilioRestException as e:\n            logger.error(f\"Twilio error sending SMS to {to_number}: {e}\")\n            return {\n                'success': False,\n                'error': str(e)\n            }\n        except Exception as e:\n            logger.error(f\"Error sending SMS to {to_number}: {e}\")\n            return {\n                'success': False,\n                'error': str(e)\n    \n    def send_bulk_sms(self, recipients, message):\n        \"\"\"\n        Send SMS to multiple recipients.\n        \n        Args:\n            recipients (list): List of phone numbers in E.164 format\n            message (str): Message content\n        \n        Returns:\n            dict: Results with 'sent', 'failed', and 'results' keys\n        \"\"\"\n        if not self.enabled:\n            return {\n                'sent': 0,\n                'failed': len(recipients),\n                'error': 'Twilio not configured'\n            }\n        \n        results = {\n            'sent': 0,\n            'failed': 0,\n            'results': []\n        }\n        \n        for phone in recipients:\n            result = self.send_sms(phone, message)\n            if result['success']:\n                results['sent'] += 1\n            else:\n                results['failed'] += 1\n            results['results'].append({\n                'phone': phone,\n                'result': result\n            })\n        \n        return results\n    \n    def validate_phone_number(self, phone_number):\n        \"\"\"\n        Validate phone number format.\n        \n        Args:\n            phone_number (str): Phone number to validate\n        \n        Returns:\n            bool: True if valid, False otherwise\n        \"\"\"\n        if not phone_number:\n            return False\n        \n        # Basic validation: should be 10-15 digits with optional + prefix\n        clean = phone_number.replace('+', '').replace('-', '').replace(' ', '').replace('(', '').replace(')', '')\n        return clean.isdigit() and 10 <= len(clean) <= 15\n","size_bytes":4670},"lux/__init__.py":{"content":"\"\"\"Flask application factory.\"\"\"\nimport os\nimport logging\nfrom flask import Flask\nfrom werkzeug.middleware.proxy_fix import ProxyFix\n\nfrom lux.config import config\nfrom lux.extensions import db, login_manager, csrf, limiter\n\n\nlogging.basicConfig(level=logging.DEBUG)\nlogger = logging.getLogger(__name__)\n\n\ndef create_app(config_name=None):\n    \"\"\"Create and configure the Flask application.\"\"\"\n    if config_name is None:\n        config_name = os.environ.get(\"FLASK_ENV\", \"production\")\n\n    app = Flask(__name__, \n                template_folder='templates',\n                static_folder='static')\n    \n    # Load configuration\n    app.config.from_object(config[config_name])\n    \n    # Set up proxy fix for correct URL generation behind reverse proxy\n    app.wsgi_app = ProxyFix(app.wsgi_app, x_proto=1, x_host=1)\n\n    # Initialize extensions\n    db.init_app(app)\n    login_manager.init_app(app)\n    csrf.init_app(app)\n    limiter.init_app(app)\n\n    # Configure Flask-Login\n    login_manager.login_view = 'auth.login'\n    login_manager.login_message = 'Please log in to access this page.'\n\n    @login_manager.user_loader\n    def load_user(user_id):\n        from lux.models.user import User\n        return User.query.get(int(user_id))\n\n    # Register blueprints - Import here to avoid circular imports\n    from lux.blueprints.auth.routes import auth_bp\n    from lux.blueprints.main.routes import main_bp\n    from lux.blueprints.user.routes import user_bp\n    \n    app.register_blueprint(auth_bp, url_prefix='/auth')\n    app.register_blueprint(main_bp)\n    app.register_blueprint(user_bp, url_prefix='/user')\n\n    # Create database tables\n    with app.app_context():\n        import lux.models  # noqa: F401\n        db.create_all()\n\n    # Add Jinja2 filters\n    @app.template_filter('campaign_status_color')\n    def campaign_status_color_filter(status):\n        color_mapping = {\n            'draft': 'secondary',\n            'scheduled': 'warning',\n            'sending': 'info',\n            'sent': 'success',\n            'failed': 'danger',\n            'paused': 'dark'\n        }\n        return color_mapping.get(status, 'secondary')\n\n    # Initialize scheduler\n    from scheduler import init_scheduler\n    init_scheduler(app)\n\n    # Health check endpoint\n    @app.route('/healthz')\n    def healthz():\n        return {'status': 'ok'}, 200\n\n    logger.info(f\"LUX Marketing Platform initialized in {config_name} mode\")\n    \n    return app\n","size_bytes":2439},"lux/core/__init__.py":{"content":"","size_bytes":0},"lux/core/utils.py":{"content":"\"\"\"Utility functions.\"\"\"\nimport re\n\n\ndef validate_email(email):\n    \"\"\"Validate email address format.\"\"\"\n    email_pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'\n    return bool(re.match(email_pattern, email))\n","size_bytes":225},"lux/extensions.py":{"content":"\"\"\"Flask extensions initialization.\"\"\"\nfrom flask_sqlalchemy import SQLAlchemy\nfrom flask_login import LoginManager\nfrom flask_wtf.csrf import CSRFProtect\nfrom flask_limiter import Limiter\nfrom flask_limiter.util import get_remote_address\nfrom sqlalchemy.orm import DeclarativeBase\n\n\nclass Base(DeclarativeBase):\n    pass\n\n\ndb = SQLAlchemy(model_class=Base)\nlogin_manager = LoginManager()\ncsrf = CSRFProtect()\nlimiter = Limiter(\n    key_func=get_remote_address,\n    default_limits=[\"200 per day\", \"50 per hour\"],\n    storage_uri=\"memory://\",\n)\n","size_bytes":544},"lux/models/user.py":{"content":"\"\"\"User model.\"\"\"\nfrom flask_login import UserMixin\nfrom lux.extensions import db\nfrom lux.models.base import TimestampMixin\n\n\nclass User(UserMixin, TimestampMixin, db.Model):\n    \"\"\"User model for authentication and authorization.\"\"\"\n    \n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(64), unique=True, nullable=False, index=True)\n    email = db.Column(db.String(120), unique=True, nullable=False, index=True)\n    password_hash = db.Column(db.String(256), nullable=False)\n    is_admin = db.Column(db.Boolean, default=False, nullable=False)\n    \n    def __repr__(self):\n        return f'<User {self.username}>'\n","size_bytes":649},"lux/models/__init__.py":{"content":"\"\"\"Models package - Import all models here for easy access.\"\"\"\nfrom lux.models.user import User\n\n__all__ = ['User']\n","size_bytes":116},"lux/blueprints/main/__init__.py":{"content":"","size_bytes":0},"lux/blueprints/auth/routes.py":{"content":"\"\"\"Authentication blueprint routes.\"\"\"\nfrom flask import Blueprint, render_template, request, flash, redirect, url_for\nfrom flask_login import login_user, logout_user, login_required, current_user\nfrom werkzeug.security import check_password_hash, generate_password_hash\nfrom itsdangerous import URLSafeTimedSerializer, BadSignature, SignatureExpired\nimport os\n\nfrom lux.extensions import db\nfrom lux.models.user import User\n\nauth_bp = Blueprint('auth', __name__, template_folder='../../templates')\n\n\ndef get_serializer():\n    \"\"\"Get URL safe serializer for password reset tokens.\"\"\"\n    secret_key = os.environ.get('SESSION_SECRET') or 'dev-secret-key'\n    return URLSafeTimedSerializer(secret_key)\n\n\n@auth_bp.route('/login', methods=['GET', 'POST'])\ndef login():\n    \"\"\"User login.\"\"\"\n    if current_user.is_authenticated:\n        return redirect(url_for('main.dashboard'))\n    \n    if request.method == 'POST':\n        username = request.form.get('username', '').strip()\n        password = request.form.get('password', '')\n        remember = bool(request.form.get('remember'))\n        \n        if not username or not password:\n            flash('Username and password are required', 'error')\n            return render_template('login.html')\n        \n        user = User.query.filter_by(username=username).first()\n        \n        if user and check_password_hash(user.password_hash, password):\n            login_user(user, remember=remember)\n            next_page = request.args.get('next')\n            return redirect(next_page) if next_page else redirect(url_for('main.dashboard'))\n        else:\n            flash('Invalid username or password', 'error')\n    \n    return render_template('login.html')\n\n\n@auth_bp.route('/logout')\n@login_required\ndef logout():\n    \"\"\"User logout.\"\"\"\n    logout_user()\n    flash('You have been logged out', 'info')\n    return redirect(url_for('auth.login'))\n\n\n@auth_bp.route('/register', methods=['GET', 'POST'])\ndef register():\n    \"\"\"Register a new admin (only allowed when no admin exists).\"\"\"\n    admin_exists = User.query.filter_by(is_admin=True).first() is not None\n    \n    if admin_exists:\n        flash('Admin registration is not allowed - an admin already exists', 'error')\n        return redirect(url_for('auth.login'))\n    \n    if request.method == 'POST':\n        username = request.form.get('username', '').strip()\n        email = request.form.get('email', '').strip()\n        password = request.form.get('password', '')\n        confirm_password = request.form.get('confirm_password', '')\n        \n        if not all([username, email, password, confirm_password]):\n            flash('All fields are required', 'error')\n            return render_template('register.html')\n        \n        if password != confirm_password:\n            flash('Passwords do not match', 'error')\n            return render_template('register.html')\n        \n        if len(password) < 8:\n            flash('Password must be at least 8 characters long', 'error')\n            return render_template('register.html')\n        \n        # Validate email format\n        from lux.core.utils import validate_email\n        if not validate_email(email):\n            flash('Please enter a valid email address', 'error')\n            return render_template('register.html')\n        \n        # Check if user already exists\n        if User.query.filter_by(username=username).first():\n            flash('Username already exists', 'error')\n            return render_template('register.html')\n        \n        if User.query.filter_by(email=email).first():\n            flash('Email already exists', 'error')\n            return render_template('register.html')\n        \n        # Create new admin user\n        user = User()\n        user.username = username\n        user.email = email\n        user.password_hash = generate_password_hash(password)\n        user.is_admin = True\n        \n        db.session.add(user)\n        db.session.commit()\n        \n        login_user(user)\n        flash('Admin account created successfully! Welcome to LUX Marketing.', 'success')\n        return redirect(url_for('main.dashboard'))\n    \n    return render_template('register.html', is_admin_registration=True)\n","size_bytes":4198}},"version":2}