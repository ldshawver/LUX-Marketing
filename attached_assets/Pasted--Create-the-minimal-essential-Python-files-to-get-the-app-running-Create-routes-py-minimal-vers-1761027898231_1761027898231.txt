# Create the minimal essential Python files to get the app running

# Create routes.py (minimal version)
cat > routes.py << 'EOF'
from flask import Blueprint, render_template, redirect, url_for
from flask_login import login_required, current_user
from app import db
from models import Campaign, Contact, CampaignRecipient, EmailTemplate

main_bp = Blueprint('main', __name__)

@main_bp.route('/')
@login_required
def dashboard():
    total_campaigns = Campaign.query.count()
    total_contacts = Contact.query.count()
    total_sent = CampaignRecipient.query.filter_by(status='sent').count()
    total_templates = EmailTemplate.query.count()
    
    recent_campaigns = Campaign.query.order_by(Campaign.created_at.desc()).limit(5).all()
    
    return render_template('dashboard.html',
                         total_campaigns=total_campaigns,
                         total_contacts=total_contacts,
                         total_sent=total_sent,
                         total_templates=total_templates,
                         recent_campaigns=recent_campaigns)

@main_bp.route('/campaigns')
@login_required
def campaigns():
    campaigns = Campaign.query.order_by(Campaign.created_at.desc()).all()
    return render_template('campaigns.html', campaigns=campaigns)

@main_bp.route('/contacts')
@login_required
def contacts():
    contacts = Contact.query.order_by(Contact.created_at.desc()).all()
    return render_template('contacts.html', contacts=contacts)

@main_bp.route('/templates')
@login_required
def templates():
    templates = EmailTemplate.query.order_by(EmailTemplate.created_at.desc()).all()
    return render_template('templates.html', templates=templates)
EOF

# Create auth.py
cat > auth.py << 'EOF'
from flask import Blueprint, render_template, redirect, url_for, flash, request
from flask_login import login_user, logout_user, current_user
from werkzeug.security import check_password_hash, generate_password_hash
from app import db
from models import User

auth_bp = Blueprint('auth', __name__)

@auth_bp.route('/login', methods=['GET', 'POST'])
def login():
    if current_user.is_authenticated:
        return redirect(url_for('main.dashboard'))
    
    if request.method == 'POST':
        username = request.form.get('username')
        password = request.form.get('password')
        
        user = User.query.filter_by(username=username).first()
        
        if user and check_password_hash(user.password_hash, password):
            login_user(user)
            next_page = request.args.get('next')
            return redirect(next_page) if next_page else redirect(url_for('main.dashboard'))
        else:
            flash('Invalid username or password', 'danger')
    
    return render_template('login.html')

@auth_bp.route('/logout')
def logout():
    logout_user()
    return redirect(url_for('auth.login'))
EOF

# Create user_management.py
cat > user_management.py << 'EOF'
from flask import Blueprint
from flask_login import login_required

user_bp = Blueprint('user', __name__)

@user_bp.route('/profile')
@login_required
def profile():
    return "User Profile (Coming Soon)"
EOF

# Create scheduler.py
cat > scheduler.py << 'EOF'
from apscheduler.schedulers.background import BackgroundScheduler
import logging

logger = logging.getLogger(__name__)

def init_scheduler(app):
    scheduler = BackgroundScheduler()
    scheduler.start()
    logger.info("Email scheduler initialized")
    return scheduler
EOF

# Create email_service.py
cat > email_service.py << 'EOF'
import logging

logger = logging.getLogger(__name__)

class EmailService:
    def __init__(self):
        pass
    
    def send_email(self, to, subject, body):
        logger.info(f"Email service: Sending to {to}")
        return True
EOF

# Create ai_agent.py
cat > ai_agent.py << 'EOF'
import os
import logging

logger = logging.getLogger(__name__)

class LUXAgent:
    def __init__(self):
        self.api_key = os.environ.get('OPENAI_API_KEY')
        logger.info("LUX AI Agent initialized successfully")
    
    def generate_campaign(self, prompt):
        return {"status": "AI feature ready"}

lux_agent = LUXAgent()
EOF

# Create tracking.py
cat > tracking.py << 'EOF'
from flask import Blueprint

tracking_bp = Blueprint('tracking', __name__)

@tracking_bp.route('/track/<tracking_id>')
def track_open(tracking_id):
    return '', 204
EOF

# Create utils.py
cat > utils.py << 'EOF'
import hashlib
from datetime import datetime

def generate_tracking_id(campaign_id, contact_id):
    data = f"{campaign_id}:{contact_id}:{datetime.utcnow().isoformat()}"
    return hashlib.md5(data.encode()).hexdigest()
EOF

echo "âœ“ All Python application files created"
ls -la *.py