Perfect ‚Äî since your LUX Marketing platform is already running on Flask + Python + SQLAlchemy + Jinja2 (deployed at lux.lucifercruz.com), we‚Äôll tailor the Replit prompt to extend and upgrade your existing architecture, not replace it with Node/Next.

This optimized prompt ensures Replit outputs fully working, production-ready code with zero syntax or runtime errors, automated testing, and clean integration into your current Flask ecosystem.

‚∏ª

üß† Your Optimized Replit Prompt

Role:
You are a senior Flask full-stack engineering team (Backend, Frontend, QA, DevOps, and AI Integration Lead) tasked with delivering tested, production-ready feature upgrades for the LUX Marketing Platform, currently built with Flask, SQLAlchemy, and Jinja2, deployed at https://lux.lucifercruz.com.

The output must be complete, functional, and bug-free ‚Äî with zero dependency or syntax errors. Every feature must be immediately runnable within the existing Flask structure.

‚∏ª

üéØ Objective

Expand the existing LUX Marketing automation system into a comprehensive AI-powered marketing suite that automates:
	‚Ä¢	Email campaigns
	‚Ä¢	Social media marketing
	‚Ä¢	SMS marketing
	‚Ä¢	Ads & SEO
	‚Ä¢	Blog and newsletter publishing
	‚Ä¢	Ecommerce integrations
	‚Ä¢	Reporting, analytics, and revenue tracking

This app must be fully operational and self-tested before Replit returns the result.

‚∏ª

‚öôÔ∏è Current Stack (do not replace)
	‚Ä¢	Backend: Flask (Python 3.11+)
	‚Ä¢	Database: SQLAlchemy (PostgreSQL)
	‚Ä¢	Frontend: Jinja2 templates, Bootstrap 5, Vanilla JS/AJAX
	‚Ä¢	Auth: Flask-Login, Flask-Security (or similar)
	‚Ä¢	Background Jobs: Celery + Redis (already configured)
	‚Ä¢	Email Provider: SMTP (Mailgun/SendGrid)
	‚Ä¢	Deployment: Gunicorn + Nginx on VPS (Ubuntu 22.04)
	‚Ä¢	CI/CD: GitHub Actions ‚Üí auto-deploy to /var/www/lux.lucifercruz.com

Replit must output Flask Blueprints for new modules, SQLAlchemy models, HTML templates, and test suites that seamlessly merge with the current system.

‚∏ª

üöÄ Feature Upgrades to Implement

1. üì® Email Marketing
	‚Ä¢	Drag-and-drop email editor (HTML canvas or JS library like GrapesJS)
	‚Ä¢	AI-generated email copy and subject lines (OpenAI API integration)
	‚Ä¢	Dynamic content and personalization tokens (e.g., {{ contact.first_name }})
	‚Ä¢	Email scheduling (Celery tasks)
	‚Ä¢	A/B subject testing
	‚Ä¢	Engagement reports: open rate, click rate, conversions
	‚Ä¢	Heatmap visualization (matplotlib/Plotly in dashboard)
	‚Ä¢	Newsletter archive viewer

2. üì± SMS Marketing
	‚Ä¢	SMS campaigns using Twilio API
	‚Ä¢	Text-to-join keywords
	‚Ä¢	Automated welcome texts
	‚Ä¢	Unsubscribe compliance (STOP/HELP keywords)
	‚Ä¢	Delivery & engagement reporting

3. üí¨ Social Media Automation
	‚Ä¢	Schedule and post to Facebook, Instagram, LinkedIn via APIs
	‚Ä¢	AI caption generator & hashtag recommender
	‚Ä¢	Auto-short video upload if API supported
	‚Ä¢	Social calendar view (Flask Blueprint: /social)
	‚Ä¢	Reporting: likes, shares, engagement

4. üß† AI-Driven Automation
	‚Ä¢	Custom automation builder with drag-and-drop triggers and actions:
	‚Ä¢	Triggers: new signup, purchase, abandoned cart, custom date
	‚Ä¢	Actions: send email/SMS, post social, add to segment
	‚Ä¢	Templates: ‚ÄúWelcome Series‚Äù, ‚ÄúRe-engagement‚Äù, ‚ÄúBirthday Offer‚Äù
	‚Ä¢	Auto-resend to non-openers after 48h

5. üõçÔ∏è Ecommerce + Payments
	‚Ä¢	WooCommerce + Stripe integration
	‚Ä¢	Import products and customers
	‚Ä¢	Abandoned cart automation
	‚Ä¢	Track sales revenue from campaigns
	‚Ä¢	Purchase-triggered automations

6. üìä Reporting & Analytics
	‚Ä¢	Campaign dashboard by channel (email, SMS, social, SEO)
	‚Ä¢	Drilldown reports
	‚Ä¢	Revenue attribution (first-touch, last-touch)
	‚Ä¢	Marketing calendar with color-coded events
	‚Ä¢	Export reports as CSV or PDF

7. üß≠ SEO & Ads
	‚Ä¢	Built-in SEO audit tool (crawl pages, analyze meta tags)
	‚Ä¢	Recommendations and scores
	‚Ä¢	Google Ads integration + budget tracking
	‚Ä¢	Facebook Lookalike audience targeting

8. üë• Contact Management
	‚Ä¢	CRUD for contacts
	‚Ä¢	Web signup forms with reCAPTCHA
	‚Ä¢	Segment by engagement, tags, or ecommerce behavior
	‚Ä¢	Import/export CSV
	‚Ä¢	Contact timeline of actions (email opens, purchases, etc.)

9. üìÜ Events & Campaign Calendar
	‚Ä¢	Event registration forms with Stripe payments
	‚Ä¢	Ticket management
	‚Ä¢	Add events/campaigns to marketing calendar view
	‚Ä¢	Calendar filters by channel (Email, SMS, Social)

10. ‚öôÔ∏è Admin + Brand Tools
	‚Ä¢	BrandKit: logo, color palette, fonts
	‚Ä¢	AI content recommendations per brand style
	‚Ä¢	Campaign Builder with AI plan suggestions
	‚Ä¢	SEO keyword assistant
	‚Ä¢	Team user roles (Admin, Marketer, Viewer)

‚∏ª

üß© Architecture Requirements
	‚Ä¢	Each feature = Flask Blueprint module (e.g., /email, /sms, /social, /seo)
	‚Ä¢	Shared services: lux/core/ for config, AI utils, Celery, DB models
	‚Ä¢	Models use Base = declarative_base() and register dynamically
	‚Ä¢	All templates in lux/templates/feature_name/*.html
	‚Ä¢	All static assets in lux/static/feature_name/
	‚Ä¢	REST endpoints under /api/v1/* (JSON)
	‚Ä¢	Web UI uses Jinja templates + fetch/AJAX for interactivity

‚∏ª

üß™ Testing & Quality Control
	‚Ä¢	Include pytest test suite for every module:
	‚Ä¢	DB models
	‚Ä¢	Routes
	‚Ä¢	Celery tasks
	‚Ä¢	Integration tests for AI copy generation and email sending
	‚Ä¢	All tests must pass in CI
	‚Ä¢	Run:

pytest --disable-warnings -q


	‚Ä¢	Minimum coverage 90%
	‚Ä¢	Output includes tests/ folder with realistic test data
	‚Ä¢	Provide a script scripts/demo_data.py to populate demo campaigns & contacts

‚∏ª

üß± Deliverables
	1.	Updated Flask project folder with:
	‚Ä¢	/lux/email/, /lux/sms/, /lux/social/, /lux/seo/, /lux/contacts/ Blueprints
	‚Ä¢	Corresponding models in /lux/models/
	‚Ä¢	Templates and static assets
	‚Ä¢	/tests/ directory
	2.	Updated requirements.txt
	3.	Database migration scripts (alembic)
	4.	README.md with installation and usage steps
	5.	Screenshot (markdown embedded) showing ‚ÄúAll tests passed ‚úÖ‚Äù
	6.	CI workflow YAML (.github/workflows/test.yml)

‚∏ª

‚úÖ Definition of Done

Replit must:
	‚Ä¢	Produce runnable Flask app with zero syntax/runtime errors
	‚Ä¢	Run flask run successfully
	‚Ä¢	Pass all pytest checks
	‚Ä¢	Connect to demo database (SQLite or PostgreSQL URL)
	‚Ä¢	Include at least one working automation (send test email ‚Üí log click)
	‚Ä¢	Provide a screenshot of dashboard showing campaigns and reports

‚∏ª

üí° AI Guidance

Use OpenAI API calls for:
	‚Ä¢	Email copy generation
	‚Ä¢	Subject line and SEO suggestions
	‚Ä¢	Social caption writing
	‚Ä¢	Content tone matching based on BrandKit
AI-generated text must pass validation filters (no empty, no spammy words).

‚∏ª

üì¶ Deployment
	‚Ä¢	Maintain existing Gunicorn + Nginx compatibility
	‚Ä¢	Keep Procfile and wsgi.py unchanged
	‚Ä¢	Include .env.example with required keys:

DATABASE_URL=
MAILGUN_API_KEY=
TWILIO_AUTH_TOKEN=
OPENAI_API_KEY=
REDIS_URL=
STRIPE_SECRET_KEY=
FB_APP_TOKEN=
GOOGLE_ADS_KEY=


	‚Ä¢	Confirm app boots locally with:

flask db upgrade
flask run



‚∏ª

Key Improvements:
‚Ä¢ Aligns with your current Flask architecture
‚Ä¢ Forces Replit to return fully working, error-free code
‚Ä¢ Enforces tests, coverage, and integration proofs
‚Ä¢ Converts your feature wish list into modular deliverables
‚Ä¢ Preserves compatibility with lux.lucifercruz.com deployment

Techniques Applied: Architecture consistency, feature modularization, Definition of Done, CI-driven validation, chain-of-thought enforcement hidden behind structure.

Pro Tip:
Paste this prompt directly into Replit or your Replit agent instruction file.
Before Replit submits completion, it must:
	1.	Run all tests.
	2.	Confirm Flask starts without errors.
	3.	Output ‚Äú‚úÖ All tests passed ‚Äî Ready for Deployment to lux.lucifercruz.com‚Äù.

‚∏ª

Would you like me to append a project-specific repo structure map (showing directories, files, and inter-module imports) to include in this Replit prompt? That helps enforce consistency and prevent broken imports.