root@lux:/var/www/lux-marketing# # Check what files are in the deployment directory
ls -la /var/www/lux-marketing/ | head -30

# Check the tar file
file /tmp/current-lux-complete.tar.gz
md5sum /tmp/current-lux-complete.tar.gz
total 12
drwxr-xr-x 3 luxapp www-data 4096 Oct 21 06:15 .
drwxr-xr-x 4 root   root     4096 Oct 21 06:15 ..
drwxr-xr-x 5 luxapp luxapp   4096 Oct 21 06:15 venv
/tmp/current-lux-complete.tar.gz: data
eb76fc4b23cae47ee21552b99db0e8f8  /tmp/current-lux-complete.tar.gz
root@lux:/var/www/lux-marketing# # Create a Python script to download from Replit
cat > /tmp/download_app.py << 'DOWNLOAD_SCRIPT'
import urllib.request
import os

files_to_download = [
    'app.py', 'main.py', 'models.py', 'routes.py', 'auth.py',
    'ai_agent.py', 'email_service.py', 'scheduler.py', 'tracking.py',
    'user_management.py', 'utils.py', 'gunicorn.conf.py', 'wsgi.py'
]

# Note: You'll need to manually create templates/ and static/ directories
# and copy those files separately

print("Files need to be transferred manually")
print("The tar.gz was corrupted during upload")
DOWNLOAD_SCRIPT

# Let's just manually create the core files instead
cd /var/www/lux-marketing
root@lux:/var/www/lux-marketing# cd /var/www/lux-marketing

# 1. Create requirements.txt
cat > requirements.txt << 'EOF'
gunicorn
flask
flask-sqlalchemy
flask-login
flask-wtf
psycopg2-binary
sqlalchemy
werkzeug
msal
apscheduler
openai
requests
twilio
email-validator
EOF

# 2. Create main.py
cat > main.py << 'EOF'
from app import app

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=True)
EOF

# 3. Create wsgi.py
cat > wsgi.py << 'EOF'
from app import app

if __name__ == "__main__":
    app.run()
EOF

# 4. Create gunicorn.conf.py
cat > gunicorn.conf.py << 'EOF'
bind = "0.0.0.0:5000"
workers = 4
worker_class = "sync"
timeout = 30
accesslog = "/var/log/lux-marketing/access.log"
errorlog = "/var/log/lux-marketing/error.log"
loglevel = "info"
preload_app = True
reload = False
ls -la *.py *.txtig files created"
✓ Core config files created
-rw-r--r-- 1 root root 215 Oct 21 06:18 gunicorn.conf.py
-rw-r--r-- 1 root root  99 Oct 21 06:18 main.py
-rw-r--r-- 1 root root 146 Oct 21 06:18 requirements.txt
-rw-r--r-- 1 root root  62 Oct 21 06:18 wsgi.py
root@lux:/var/www/lux-marketing# cat > app.py << 'EOF'
import os
import logging
from flask import Flask
from flask_sqlalchemy import SQLAlchemy
from flask_login import LoginManager
from flask_wtf.csrf import CSRFProtect
from sqlalchemy.orm import DeclarativeBase
from werkzeug.middleware.proxy_fix import ProxyFix

logging.basicConfig(level=logging.DEBUG)

class Base(DeclarativeBase):
    pass

db = SQLAlchemy(model_class=Base)

app = Flask(__name__)
app.secret_key = os.environ.get("SESSION_SECRET")
app.wsgi_app = ProxyFix(app.wsgi_app, x_proto=1, x_host=1)

app.config["SQLALCHEMY_DATABASE_URI"] = os.environ.get("DATABASE_URL", "sqlite:///email_marketing.db")
app.config["SQLALCHEMY_ENGINE_OPTIONS"] = {
    "pool_recycle": 300,
    "pool_pre_ping": True,
}

app.config["MS_CLIENT_ID"] = os.environ.get("MS_CLIENT_ID", "")
app.config["MS_CLIENT_SECRET"] = os.environ.get("MS_CLIENT_SECRET", "")
app.config["MS_TENANT_ID"] = os.environ.get("MS_TENANT_ID", "")

db.init_app(app)

csrf = CSRFProtect(app)

login_manager = LoginManager()
login_manager.init_app(app)
login_manager.login_view = 'auth.login'
login_manager.login_message = 'Please log in to access this page.'

@login_manager.user_loader
def load_user(user_id):
    from models import User
    return User.query.get(int(user_id))

from routes import main_bp
from auth import auth_bp
echo "✓ app.py created"nit_scheduler 'secondary')')
✓ app.py created
root@lux:/var/www/lux-marketing# 