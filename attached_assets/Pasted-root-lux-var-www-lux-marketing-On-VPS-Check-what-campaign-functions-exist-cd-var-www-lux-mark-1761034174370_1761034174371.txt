root@lux:/var/www/lux-marketing# # On VPS - Check what campaign functions exist
cd /var/www/lux-marketing
grep -n "def.*campaign" routes.py

# Check line 243 where the route should be
sed -n '240,280p' routes.py
32:def campaigns():
84:def lux_generate_campaign():
257:def sms_campaigns():
    return render_template('forms_dashboard.html')

@main_bp.route('/landing-pages')
@login_required
def landing_pages():
    """Landing pages management"""
    return render_template('landing_pages.html')

@main_bp.route('/social-media')
@login_required
def social_media():
    """Social media management"""
    flash('Social media feature coming soon!', 'info')
    return redirect(url_for('main.dashboard'))

@main_bp.route('/sms-campaigns')
@login_required
def sms_campaigns():
    """SMS campaigns"""
    flash('SMS campaigns feature coming soon!', 'info')
    return redirect(url_for('main.dashboard'))

@main_bp.route('/polls')
@login_required
def polls_management():
    """Polls and surveys"""
    flash('Polls feature coming soon!', 'info')
    return redirect(url_for('main.dashboard'))

@main_bp.route('/newsletter-archive')
@login_required
def newsletter_archive():
    """Newsletter archive"""
    flash('Newsletter archive coming soon!', 'info')
    return redirect(url_for('main.dashboard'))

@main_bp.route('/automation/templates')
@login_required
def automation_templates():
    """Automation templates"""
    flash('Automation templates coming soon!', 'info')
root@lux:/var/www/lux-marketing# # On VPS - Check Campaign model structure
cd /var/www/lux-marketing
grep -A 25 "class Campaign" models.py | head -30
class Campaign(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(120), nullable=False)
    subject = db.Column(db.String(255), nullable=False)
    template_id = db.Column(db.Integer, db.ForeignKey('email_template.id'))
    automation_id = db.Column(db.Integer, db.ForeignKey('automation.id'))
    status = db.Column(db.String(20), default='draft')
    scheduled_at = db.Column(db.DateTime)
    sent_at = db.Column(db.DateTime)
    revenue_generated = db.Column(db.Float, default=0.0)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    recipients = db.relationship('CampaignRecipient', backref='campaign', lazy='dynamic', cascade='all, delete-orphan')
    ab_tests = db.relationship('ABTest', backref='campaign', lazy='dynamic')
    
    def __repr__(self):
        return f'<Campaign {self.name}>'
    
    @property
    def total_recipients(self):
        return self.recipients.count()
    
    @property
    def sent_count(self):
        return self.recipients.filter_by(status='sent').count()
--
class CampaignRecipient(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    campaign_id = db.Column(db.Integer, db.ForeignKey('campaign.id'), nullable=False)